/* Code generated by codegen/main.go. DO NOT EDIT. */

using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;
using System.Threading.Tasks;
using Nakama.TinyJson;

namespace Nakama.Console
{
    /// <summary>
    /// An exception generated for <c>HttpResponse</c> objects don't return a success status.
    /// </summary>
    public sealed class ApiResponseException : Exception
    {
        public long StatusCode { get; }

        public int GrpcStatusCode { get; }

        public ApiResponseException(long statusCode, string content, int grpcCode) : base(content)
        {
            StatusCode = statusCode;
            GrpcStatusCode = grpcCode;
        }

        public ApiResponseException(string message, Exception e) : base(message, e)
        {
            StatusCode = -1L;
            GrpcStatusCode = -1;
        }

        public ApiResponseException(string content) : this(-1L, content, -1)
        {
        }

        public override string ToString()
        {
            return $"ApiResponseException(StatusCode={StatusCode}, Message='{Message}', GrpcStatusCode={GrpcStatusCode})";
        }
    }

    /// <summary>
    /// A warning for a configuration field.
    /// </summary>
    public interface IConfigWarning
    {

        /// <summary>
        /// The config field this warning is for in a JSON pointer format.
        /// </summary>
        string Field { get; }

        /// <summary>
        /// Warning message text.
        /// </summary>
        string Message { get; }
    }

    /// <inheritdoc />
    internal class ConfigWarning : IConfigWarning
    {

        /// <inheritdoc />
        [DataMember(Name="field")]
        public string Field { get; set; }

        /// <inheritdoc />
        [DataMember(Name="message")]
        public string Message { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Field: ", Field, ", ");
            output = string.Concat(output, "Message: ", Message, ", ");
            return output;
        }
    }

    /// <summary>
    /// The status of a Nakama node.
    /// </summary>
    public interface IStatusListStatus
    {

        /// <summary>
        /// Average input bandwidth usage.
        /// </summary>
        double AvgInputKbs { get; }

        /// <summary>
        /// Average response latency in milliseconds.
        /// </summary>
        double AvgLatencyMs { get; }

        /// <summary>
        /// Average output bandwidth usage.
        /// </summary>
        double AvgOutputKbs { get; }

        /// <summary>
        /// Average number of requests per second.
        /// </summary>
        double AvgRateSec { get; }

        /// <summary>
        /// Current number of running goroutines.
        /// </summary>
        int GoroutineCount { get; }

        /// <summary>
        /// Health score.
        /// </summary>
        int Health { get; }

        /// <summary>
        /// Current number of active authoritative matches.
        /// </summary>
        int MatchCount { get; }

        /// <summary>
        /// Node name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Currently registered live presences.
        /// </summary>
        int PresenceCount { get; }

        /// <summary>
        /// Currently connected sessions.
        /// </summary>
        int SessionCount { get; }
    }

    /// <inheritdoc />
    internal class StatusListStatus : IStatusListStatus
    {

        /// <inheritdoc />
        [DataMember(Name="avg_input_kbs")]
        public double AvgInputKbs { get; set; }

        /// <inheritdoc />
        [DataMember(Name="avg_latency_ms")]
        public double AvgLatencyMs { get; set; }

        /// <inheritdoc />
        [DataMember(Name="avg_output_kbs")]
        public double AvgOutputKbs { get; set; }

        /// <inheritdoc />
        [DataMember(Name="avg_rate_sec")]
        public double AvgRateSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="goroutine_count")]
        public int GoroutineCount { get; set; }

        /// <inheritdoc />
        [DataMember(Name="health")]
        public int Health { get; set; }

        /// <inheritdoc />
        [DataMember(Name="match_count")]
        public int MatchCount { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="presence_count")]
        public int PresenceCount { get; set; }

        /// <inheritdoc />
        [DataMember(Name="session_count")]
        public int SessionCount { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "AvgInputKbs: ", AvgInputKbs, ", ");
            output = string.Concat(output, "AvgLatencyMs: ", AvgLatencyMs, ", ");
            output = string.Concat(output, "AvgOutputKbs: ", AvgOutputKbs, ", ");
            output = string.Concat(output, "AvgRateSec: ", AvgRateSec, ", ");
            output = string.Concat(output, "GoroutineCount: ", GoroutineCount, ", ");
            output = string.Concat(output, "Health: ", Health, ", ");
            output = string.Concat(output, "MatchCount: ", MatchCount, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "PresenceCount: ", PresenceCount, ", ");
            output = string.Concat(output, "SessionCount: ", SessionCount, ", ");
            return output;
        }
    }

    /// <summary>
    /// A single group-role pair.
    /// </summary>
    public interface IUserGroupListUserGroup
    {

        /// <summary>
        /// Group.
        /// </summary>
        IApiGroup Group { get; }

        /// <summary>
        /// The user's relationship to the group.
        /// </summary>
        int State { get; }
    }

    /// <inheritdoc />
    internal class UserGroupListUserGroup : IUserGroupListUserGroup
    {

        /// <inheritdoc />
        public IApiGroup Group => _group;
        [DataMember(Name="group")]
        public ApiGroup _group { get; set; }

        /// <inheritdoc />
        [DataMember(Name="state")]
        public int State { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Group: ", Group, ", ");
            output = string.Concat(output, "State: ", State, ", ");
            return output;
        }
    }

    /// <summary>
    /// Send a device to the server. Used with authenticate/link/unlink and user.
    /// </summary>
    public interface IApiAccountDevice
    {

        /// <summary>
        /// A device identifier. Should be obtained by a platform-specific device API.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// Extra information that will be bundled in the session token.
        /// </summary>
        IDictionary<string, string> Vars { get; }
    }

    /// <inheritdoc />
    internal class ApiAccountDevice : IApiAccountDevice
    {

        /// <inheritdoc />
        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <inheritdoc />
        public IDictionary<string, string> Vars => _vars ?? new Dictionary<string, string>();
        [DataMember(Name="vars")]
        public Dictionary<string, string> _vars { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Id: ", Id, ", ");

            var mapString = "";
            foreach (var kvp in Vars)
            {
                mapString = string.Concat(mapString, "{" + kvp.Key + "=" + kvp.Value + "}");
            }
            output = string.Concat(output, "Vars: [" + mapString + "]");
            return output;
        }
    }

    /// <summary>
    /// A message sent on a channel.
    /// </summary>
    public interface IApiChannelMessage
    {

        /// <summary>
        /// The channel this message belongs to.
        /// </summary>
        string ChannelId { get; }

        /// <summary>
        /// The code representing a message type or category.
        /// </summary>
        int Code { get; }

        /// <summary>
        /// The content payload.
        /// </summary>
        string Content { get; }

        /// <summary>
        /// The UNIX time when the message was created.
        /// </summary>
        string CreateTime { get; }

        /// <summary>
        /// The ID of the group, or an empty string if this message was not sent through a group channel.
        /// </summary>
        string GroupId { get; }

        /// <summary>
        /// The unique ID of this message.
        /// </summary>
        string MessageId { get; }

        /// <summary>
        /// True if the message was persisted to the channel's history, false otherwise.
        /// </summary>
        bool Persistent { get; }

        /// <summary>
        /// The name of the chat room, or an empty string if this message was not sent through a chat room.
        /// </summary>
        string RoomName { get; }

        /// <summary>
        /// Message sender, usually a user ID.
        /// </summary>
        string SenderId { get; }

        /// <summary>
        /// The UNIX time when the message was last updated.
        /// </summary>
        string UpdateTime { get; }

        /// <summary>
        /// The ID of the first DM user, or an empty string if this message was not sent through a DM chat.
        /// </summary>
        string UserIdOne { get; }

        /// <summary>
        /// The ID of the second DM user, or an empty string if this message was not sent through a DM chat.
        /// </summary>
        string UserIdTwo { get; }

        /// <summary>
        /// The username of the message sender, if any.
        /// </summary>
        string Username { get; }
    }

    /// <inheritdoc />
    internal class ApiChannelMessage : IApiChannelMessage
    {

        /// <inheritdoc />
        [DataMember(Name="channel_id")]
        public string ChannelId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="code")]
        public int Code { get; set; }

        /// <inheritdoc />
        [DataMember(Name="content")]
        public string Content { get; set; }

        /// <inheritdoc />
        [DataMember(Name="create_time")]
        public string CreateTime { get; set; }

        /// <inheritdoc />
        [DataMember(Name="group_id")]
        public string GroupId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="message_id")]
        public string MessageId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="persistent")]
        public bool Persistent { get; set; }

        /// <inheritdoc />
        [DataMember(Name="room_name")]
        public string RoomName { get; set; }

        /// <inheritdoc />
        [DataMember(Name="sender_id")]
        public string SenderId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="update_time")]
        public string UpdateTime { get; set; }

        /// <inheritdoc />
        [DataMember(Name="user_id_one")]
        public string UserIdOne { get; set; }

        /// <inheritdoc />
        [DataMember(Name="user_id_two")]
        public string UserIdTwo { get; set; }

        /// <inheritdoc />
        [DataMember(Name="username")]
        public string Username { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "ChannelId: ", ChannelId, ", ");
            output = string.Concat(output, "Code: ", Code, ", ");
            output = string.Concat(output, "Content: ", Content, ", ");
            output = string.Concat(output, "CreateTime: ", CreateTime, ", ");
            output = string.Concat(output, "GroupId: ", GroupId, ", ");
            output = string.Concat(output, "MessageId: ", MessageId, ", ");
            output = string.Concat(output, "Persistent: ", Persistent, ", ");
            output = string.Concat(output, "RoomName: ", RoomName, ", ");
            output = string.Concat(output, "SenderId: ", SenderId, ", ");
            output = string.Concat(output, "UpdateTime: ", UpdateTime, ", ");
            output = string.Concat(output, "UserIdOne: ", UserIdOne, ", ");
            output = string.Concat(output, "UserIdTwo: ", UserIdTwo, ", ");
            output = string.Concat(output, "Username: ", Username, ", ");
            return output;
        }
    }

    /// <summary>
    /// A friend of a user.
    /// </summary>
    public interface IApiFriend
    {

        /// <summary>
        /// The friend status.
        /// </summary>
        int State { get; }

        /// <summary>
        /// The user object.
        /// </summary>
        IApiUser User { get; }
    }

    /// <inheritdoc />
    internal class ApiFriend : IApiFriend
    {

        /// <inheritdoc />
        [DataMember(Name="state")]
        public int State { get; set; }

        /// <inheritdoc />
        public IApiUser User => _user;
        [DataMember(Name="user")]
        public ApiUser _user { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "State: ", State, ", ");
            output = string.Concat(output, "User: ", User, ", ");
            return output;
        }
    }

    /// <summary>
    /// A collection of zero or more friends of the user.
    /// </summary>
    public interface IApiFriendList
    {

        /// <summary>
        /// Cursor for the next page of results, if any.
        /// </summary>
        string Cursor { get; }

        /// <summary>
        /// The Friend objects.
        /// </summary>
        IEnumerable<IApiFriend> Friends { get; }
    }

    /// <inheritdoc />
    internal class ApiFriendList : IApiFriendList
    {

        /// <inheritdoc />
        [DataMember(Name="cursor")]
        public string Cursor { get; set; }

        /// <inheritdoc />
        public IEnumerable<IApiFriend> Friends => _friends ?? new List<ApiFriend>(0);
        [DataMember(Name="friends")]
        public List<ApiFriend> _friends { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Cursor: ", Cursor, ", ");
            output = string.Concat(output, "Friends: [", string.Join(", ", Friends), "], ");
            return output;
        }
    }

    /// <summary>
    /// A group in the server.
    /// </summary>
    public interface IApiGroup
    {

        /// <summary>
        /// A URL for an avatar image.
        /// </summary>
        string AvatarUrl { get; }

        /// <summary>
        /// The UNIX time when the group was created.
        /// </summary>
        string CreateTime { get; }

        /// <summary>
        /// The id of the user who created the group.
        /// </summary>
        string CreatorId { get; }

        /// <summary>
        /// A description for the group.
        /// </summary>
        string Description { get; }

        /// <summary>
        /// The current count of all members in the group.
        /// </summary>
        int EdgeCount { get; }

        /// <summary>
        /// The id of a group.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// The language expected to be a tag which follows the BCP-47 spec.
        /// </summary>
        string LangTag { get; }

        /// <summary>
        /// The maximum number of members allowed.
        /// </summary>
        int MaxCount { get; }

        /// <summary>
        /// Additional information stored as a JSON object.
        /// </summary>
        string Metadata { get; }

        /// <summary>
        /// The unique name of the group.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Anyone can join open groups, otherwise only admins can accept members.
        /// </summary>
        bool Open { get; }

        /// <summary>
        /// The UNIX time when the group was last updated.
        /// </summary>
        string UpdateTime { get; }
    }

    /// <inheritdoc />
    internal class ApiGroup : IApiGroup
    {

        /// <inheritdoc />
        [DataMember(Name="avatar_url")]
        public string AvatarUrl { get; set; }

        /// <inheritdoc />
        [DataMember(Name="create_time")]
        public string CreateTime { get; set; }

        /// <inheritdoc />
        [DataMember(Name="creator_id")]
        public string CreatorId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <inheritdoc />
        [DataMember(Name="edge_count")]
        public int EdgeCount { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="lang_tag")]
        public string LangTag { get; set; }

        /// <inheritdoc />
        [DataMember(Name="max_count")]
        public int MaxCount { get; set; }

        /// <inheritdoc />
        [DataMember(Name="metadata")]
        public string Metadata { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="open")]
        public bool Open { get; set; }

        /// <inheritdoc />
        [DataMember(Name="update_time")]
        public string UpdateTime { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "AvatarUrl: ", AvatarUrl, ", ");
            output = string.Concat(output, "CreateTime: ", CreateTime, ", ");
            output = string.Concat(output, "CreatorId: ", CreatorId, ", ");
            output = string.Concat(output, "Description: ", Description, ", ");
            output = string.Concat(output, "EdgeCount: ", EdgeCount, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "LangTag: ", LangTag, ", ");
            output = string.Concat(output, "MaxCount: ", MaxCount, ", ");
            output = string.Concat(output, "Metadata: ", Metadata, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Open: ", Open, ", ");
            output = string.Concat(output, "UpdateTime: ", UpdateTime, ", ");
            return output;
        }
    }

    /// <summary>
    /// Represents a complete leaderboard record with all scores and associated metadata.
    /// </summary>
    public interface IApiLeaderboardRecord
    {

        /// <summary>
        /// The UNIX time when the leaderboard record was created.
        /// </summary>
        string CreateTime { get; }

        /// <summary>
        /// The UNIX time when the leaderboard record expires.
        /// </summary>
        string ExpiryTime { get; }

        /// <summary>
        /// The ID of the leaderboard this score belongs to.
        /// </summary>
        string LeaderboardId { get; }

        /// <summary>
        /// The maximum number of score updates allowed by the owner.
        /// </summary>
        int MaxNumScore { get; }

        /// <summary>
        /// Metadata.
        /// </summary>
        string Metadata { get; }

        /// <summary>
        /// The number of submissions to this score record.
        /// </summary>
        int NumScore { get; }

        /// <summary>
        /// The ID of the score owner, usually a user or group.
        /// </summary>
        string OwnerId { get; }

        /// <summary>
        /// The rank of this record.
        /// </summary>
        string Rank { get; }

        /// <summary>
        /// The score value.
        /// </summary>
        string Score { get; }

        /// <summary>
        /// An optional subscore value.
        /// </summary>
        string Subscore { get; }

        /// <summary>
        /// The UNIX time when the leaderboard record was updated.
        /// </summary>
        string UpdateTime { get; }

        /// <summary>
        /// The username of the score owner, if the owner is a user.
        /// </summary>
        string Username { get; }
    }

    /// <inheritdoc />
    internal class ApiLeaderboardRecord : IApiLeaderboardRecord
    {

        /// <inheritdoc />
        [DataMember(Name="create_time")]
        public string CreateTime { get; set; }

        /// <inheritdoc />
        [DataMember(Name="expiry_time")]
        public string ExpiryTime { get; set; }

        /// <inheritdoc />
        [DataMember(Name="leaderboard_id")]
        public string LeaderboardId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="max_num_score")]
        public int MaxNumScore { get; set; }

        /// <inheritdoc />
        [DataMember(Name="metadata")]
        public string Metadata { get; set; }

        /// <inheritdoc />
        [DataMember(Name="num_score")]
        public int NumScore { get; set; }

        /// <inheritdoc />
        [DataMember(Name="owner_id")]
        public string OwnerId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="rank")]
        public string Rank { get; set; }

        /// <inheritdoc />
        [DataMember(Name="score")]
        public string Score { get; set; }

        /// <inheritdoc />
        [DataMember(Name="subscore")]
        public string Subscore { get; set; }

        /// <inheritdoc />
        [DataMember(Name="update_time")]
        public string UpdateTime { get; set; }

        /// <inheritdoc />
        [DataMember(Name="username")]
        public string Username { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "CreateTime: ", CreateTime, ", ");
            output = string.Concat(output, "ExpiryTime: ", ExpiryTime, ", ");
            output = string.Concat(output, "LeaderboardId: ", LeaderboardId, ", ");
            output = string.Concat(output, "MaxNumScore: ", MaxNumScore, ", ");
            output = string.Concat(output, "Metadata: ", Metadata, ", ");
            output = string.Concat(output, "NumScore: ", NumScore, ", ");
            output = string.Concat(output, "OwnerId: ", OwnerId, ", ");
            output = string.Concat(output, "Rank: ", Rank, ", ");
            output = string.Concat(output, "Score: ", Score, ", ");
            output = string.Concat(output, "Subscore: ", Subscore, ", ");
            output = string.Concat(output, "UpdateTime: ", UpdateTime, ", ");
            output = string.Concat(output, "Username: ", Username, ", ");
            return output;
        }
    }

    /// <summary>
    /// A notification in the server.
    /// </summary>
    public interface IApiNotification
    {

        /// <summary>
        /// Category code for this notification.
        /// </summary>
        int Code { get; }

        /// <summary>
        /// Content of the notification in JSON.
        /// </summary>
        string Content { get; }

        /// <summary>
        /// The UNIX time when the notification was created.
        /// </summary>
        string CreateTime { get; }

        /// <summary>
        /// ID of the Notification.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// True if this notification was persisted to the database.
        /// </summary>
        bool Persistent { get; }

        /// <summary>
        /// ID of the sender, if a user. Otherwise 'null'.
        /// </summary>
        string SenderId { get; }

        /// <summary>
        /// Subject of the notification.
        /// </summary>
        string Subject { get; }
    }

    /// <inheritdoc />
    internal class ApiNotification : IApiNotification
    {

        /// <inheritdoc />
        [DataMember(Name="code")]
        public int Code { get; set; }

        /// <inheritdoc />
        [DataMember(Name="content")]
        public string Content { get; set; }

        /// <inheritdoc />
        [DataMember(Name="create_time")]
        public string CreateTime { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="persistent")]
        public bool Persistent { get; set; }

        /// <inheritdoc />
        [DataMember(Name="sender_id")]
        public string SenderId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="subject")]
        public string Subject { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Code: ", Code, ", ");
            output = string.Concat(output, "Content: ", Content, ", ");
            output = string.Concat(output, "CreateTime: ", CreateTime, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Persistent: ", Persistent, ", ");
            output = string.Concat(output, "SenderId: ", SenderId, ", ");
            output = string.Concat(output, "Subject: ", Subject, ", ");
            return output;
        }
    }

    /// <summary>
    /// An object within the storage engine.
    /// </summary>
    public interface IApiStorageObject
    {

        /// <summary>
        /// The collection which stores the object.
        /// </summary>
        string Collection { get; }

        /// <summary>
        /// The UNIX time when the object was created.
        /// </summary>
        string CreateTime { get; }

        /// <summary>
        /// The key of the object within the collection.
        /// </summary>
        string Key { get; }

        /// <summary>
        /// The read access permissions for the object.
        /// </summary>
        int PermissionRead { get; }

        /// <summary>
        /// The write access permissions for the object.
        /// </summary>
        int PermissionWrite { get; }

        /// <summary>
        /// The UNIX time when the object was last updated.
        /// </summary>
        string UpdateTime { get; }

        /// <summary>
        /// The user owner of the object.
        /// </summary>
        string UserId { get; }

        /// <summary>
        /// The value of the object.
        /// </summary>
        string Value { get; }

        /// <summary>
        /// The version hash of the object.
        /// </summary>
        string Version { get; }
    }

    /// <inheritdoc />
    internal class ApiStorageObject : IApiStorageObject
    {

        /// <inheritdoc />
        [DataMember(Name="collection")]
        public string Collection { get; set; }

        /// <inheritdoc />
        [DataMember(Name="create_time")]
        public string CreateTime { get; set; }

        /// <inheritdoc />
        [DataMember(Name="key")]
        public string Key { get; set; }

        /// <inheritdoc />
        [DataMember(Name="permission_read")]
        public int PermissionRead { get; set; }

        /// <inheritdoc />
        [DataMember(Name="permission_write")]
        public int PermissionWrite { get; set; }

        /// <inheritdoc />
        [DataMember(Name="update_time")]
        public string UpdateTime { get; set; }

        /// <inheritdoc />
        [DataMember(Name="user_id")]
        public string UserId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value")]
        public string Value { get; set; }

        /// <inheritdoc />
        [DataMember(Name="version")]
        public string Version { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Collection: ", Collection, ", ");
            output = string.Concat(output, "CreateTime: ", CreateTime, ", ");
            output = string.Concat(output, "Key: ", Key, ", ");
            output = string.Concat(output, "PermissionRead: ", PermissionRead, ", ");
            output = string.Concat(output, "PermissionWrite: ", PermissionWrite, ", ");
            output = string.Concat(output, "UpdateTime: ", UpdateTime, ", ");
            output = string.Concat(output, "UserId: ", UserId, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            output = string.Concat(output, "Version: ", Version, ", ");
            return output;
        }
    }

    /// <summary>
    /// A storage acknowledgement.
    /// </summary>
    public interface IApiStorageObjectAck
    {

        /// <summary>
        /// The collection which stores the object.
        /// </summary>
        string Collection { get; }

        /// <summary>
        /// The key of the object within the collection.
        /// </summary>
        string Key { get; }

        /// <summary>
        /// The owner of the object.
        /// </summary>
        string UserId { get; }

        /// <summary>
        /// The version hash of the object.
        /// </summary>
        string Version { get; }
    }

    /// <inheritdoc />
    internal class ApiStorageObjectAck : IApiStorageObjectAck
    {

        /// <inheritdoc />
        [DataMember(Name="collection")]
        public string Collection { get; set; }

        /// <inheritdoc />
        [DataMember(Name="key")]
        public string Key { get; set; }

        /// <inheritdoc />
        [DataMember(Name="user_id")]
        public string UserId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="version")]
        public string Version { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Collection: ", Collection, ", ");
            output = string.Concat(output, "Key: ", Key, ", ");
            output = string.Concat(output, "UserId: ", UserId, ", ");
            output = string.Concat(output, "Version: ", Version, ", ");
            return output;
        }
    }

    /// <summary>
    /// A user in the server.
    /// </summary>
    public interface IApiUser
    {

        /// <summary>
        /// A URL for an avatar image.
        /// </summary>
        string AvatarUrl { get; }

        /// <summary>
        /// The UNIX time when the user was created.
        /// </summary>
        string CreateTime { get; }

        /// <summary>
        /// The display name of the user.
        /// </summary>
        string DisplayName { get; }

        /// <summary>
        /// Number of related edges to this user.
        /// </summary>
        int EdgeCount { get; }

        /// <summary>
        /// The Facebook id in the user's account.
        /// </summary>
        string FacebookId { get; }

        /// <summary>
        /// The Facebook Instant Game id in the user's account.
        /// </summary>
        string FacebookInstantGameId { get; }

        /// <summary>
        /// The Apple Game Center in of the user's account.
        /// </summary>
        string GamecenterId { get; }

        /// <summary>
        /// The Google id in the user's account.
        /// </summary>
        string GoogleId { get; }

        /// <summary>
        /// The id of the user's account.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// The language expected to be a tag which follows the BCP-47 spec.
        /// </summary>
        string LangTag { get; }

        /// <summary>
        /// The location set by the user.
        /// </summary>
        string Location { get; }

        /// <summary>
        /// Additional information stored as a JSON object.
        /// </summary>
        string Metadata { get; }

        /// <summary>
        /// Indicates whether the user is currently online.
        /// </summary>
        bool Online { get; }

        /// <summary>
        /// The Steam id in the user's account.
        /// </summary>
        string SteamId { get; }

        /// <summary>
        /// The timezone set by the user.
        /// </summary>
        string Timezone { get; }

        /// <summary>
        /// The UNIX time when the user was last updated.
        /// </summary>
        string UpdateTime { get; }

        /// <summary>
        /// The username of the user's account.
        /// </summary>
        string Username { get; }
    }

    /// <inheritdoc />
    internal class ApiUser : IApiUser
    {

        /// <inheritdoc />
        [DataMember(Name="avatar_url")]
        public string AvatarUrl { get; set; }

        /// <inheritdoc />
        [DataMember(Name="create_time")]
        public string CreateTime { get; set; }

        /// <inheritdoc />
        [DataMember(Name="display_name")]
        public string DisplayName { get; set; }

        /// <inheritdoc />
        [DataMember(Name="edge_count")]
        public int EdgeCount { get; set; }

        /// <inheritdoc />
        [DataMember(Name="facebook_id")]
        public string FacebookId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="facebook_instant_game_id")]
        public string FacebookInstantGameId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="gamecenter_id")]
        public string GamecenterId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="google_id")]
        public string GoogleId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="lang_tag")]
        public string LangTag { get; set; }

        /// <inheritdoc />
        [DataMember(Name="location")]
        public string Location { get; set; }

        /// <inheritdoc />
        [DataMember(Name="metadata")]
        public string Metadata { get; set; }

        /// <inheritdoc />
        [DataMember(Name="online")]
        public bool Online { get; set; }

        /// <inheritdoc />
        [DataMember(Name="steam_id")]
        public string SteamId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="timezone")]
        public string Timezone { get; set; }

        /// <inheritdoc />
        [DataMember(Name="update_time")]
        public string UpdateTime { get; set; }

        /// <inheritdoc />
        [DataMember(Name="username")]
        public string Username { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "AvatarUrl: ", AvatarUrl, ", ");
            output = string.Concat(output, "CreateTime: ", CreateTime, ", ");
            output = string.Concat(output, "DisplayName: ", DisplayName, ", ");
            output = string.Concat(output, "EdgeCount: ", EdgeCount, ", ");
            output = string.Concat(output, "FacebookId: ", FacebookId, ", ");
            output = string.Concat(output, "FacebookInstantGameId: ", FacebookInstantGameId, ", ");
            output = string.Concat(output, "GamecenterId: ", GamecenterId, ", ");
            output = string.Concat(output, "GoogleId: ", GoogleId, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "LangTag: ", LangTag, ", ");
            output = string.Concat(output, "Location: ", Location, ", ");
            output = string.Concat(output, "Metadata: ", Metadata, ", ");
            output = string.Concat(output, "Online: ", Online, ", ");
            output = string.Concat(output, "SteamId: ", SteamId, ", ");
            output = string.Concat(output, "Timezone: ", Timezone, ", ");
            output = string.Concat(output, "UpdateTime: ", UpdateTime, ", ");
            output = string.Concat(output, "Username: ", Username, ", ");
            return output;
        }
    }

    /// <summary>
    /// A list of groups belonging to a user, along with the user's role in each group.
    /// </summary>
    public interface IApiUserGroupList
    {

        /// <summary>
        /// Cursor for the next page of results, if any.
        /// </summary>
        string Cursor { get; }

        /// <summary>
        /// Group-role pairs for a user.
        /// </summary>
        IEnumerable<IUserGroupListUserGroup> UserGroups { get; }
    }

    /// <inheritdoc />
    internal class ApiUserGroupList : IApiUserGroupList
    {

        /// <inheritdoc />
        [DataMember(Name="cursor")]
        public string Cursor { get; set; }

        /// <inheritdoc />
        public IEnumerable<IUserGroupListUserGroup> UserGroups => _userGroups ?? new List<UserGroupListUserGroup>(0);
        [DataMember(Name="user_groups")]
        public List<UserGroupListUserGroup> _userGroups { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Cursor: ", Cursor, ", ");
            output = string.Concat(output, "UserGroups: [", string.Join(", ", UserGroups), "], ");
            return output;
        }
    }

    /// <summary>
    /// An export of all information stored for a user account.
    /// </summary>
    public interface IConsoleAccountExport
    {

        /// <summary>
        /// The user's account details.
        /// </summary>
        INakamaapiAccount Account { get; }

        /// <summary>
        /// The user's friends.
        /// </summary>
        IEnumerable<IApiFriend> Friends { get; }

        /// <summary>
        /// The user's groups.
        /// </summary>
        IEnumerable<IApiGroup> Groups { get; }

        /// <summary>
        /// The user's leaderboard records.
        /// </summary>
        IEnumerable<IApiLeaderboardRecord> LeaderboardRecords { get; }

        /// <summary>
        /// The user's chat messages.
        /// </summary>
        IEnumerable<IApiChannelMessage> Messages { get; }

        /// <summary>
        /// The user's notifications.
        /// </summary>
        IEnumerable<IApiNotification> Notifications { get; }

        /// <summary>
        /// The user's storage.
        /// </summary>
        IEnumerable<IApiStorageObject> Objects { get; }

        /// <summary>
        /// The user's wallet ledger items.
        /// </summary>
        IEnumerable<IConsoleWalletLedger> WalletLedgers { get; }
    }

    /// <inheritdoc />
    internal class ConsoleAccountExport : IConsoleAccountExport
    {

        /// <inheritdoc />
        public INakamaapiAccount Account => _account;
        [DataMember(Name="account")]
        public NakamaapiAccount _account { get; set; }

        /// <inheritdoc />
        public IEnumerable<IApiFriend> Friends => _friends ?? new List<ApiFriend>(0);
        [DataMember(Name="friends")]
        public List<ApiFriend> _friends { get; set; }

        /// <inheritdoc />
        public IEnumerable<IApiGroup> Groups => _groups ?? new List<ApiGroup>(0);
        [DataMember(Name="groups")]
        public List<ApiGroup> _groups { get; set; }

        /// <inheritdoc />
        public IEnumerable<IApiLeaderboardRecord> LeaderboardRecords => _leaderboardRecords ?? new List<ApiLeaderboardRecord>(0);
        [DataMember(Name="leaderboard_records")]
        public List<ApiLeaderboardRecord> _leaderboardRecords { get; set; }

        /// <inheritdoc />
        public IEnumerable<IApiChannelMessage> Messages => _messages ?? new List<ApiChannelMessage>(0);
        [DataMember(Name="messages")]
        public List<ApiChannelMessage> _messages { get; set; }

        /// <inheritdoc />
        public IEnumerable<IApiNotification> Notifications => _notifications ?? new List<ApiNotification>(0);
        [DataMember(Name="notifications")]
        public List<ApiNotification> _notifications { get; set; }

        /// <inheritdoc />
        public IEnumerable<IApiStorageObject> Objects => _objects ?? new List<ApiStorageObject>(0);
        [DataMember(Name="objects")]
        public List<ApiStorageObject> _objects { get; set; }

        /// <inheritdoc />
        public IEnumerable<IConsoleWalletLedger> WalletLedgers => _walletLedgers ?? new List<ConsoleWalletLedger>(0);
        [DataMember(Name="wallet_ledgers")]
        public List<ConsoleWalletLedger> _walletLedgers { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Account: ", Account, ", ");
            output = string.Concat(output, "Friends: [", string.Join(", ", Friends), "], ");
            output = string.Concat(output, "Groups: [", string.Join(", ", Groups), "], ");
            output = string.Concat(output, "LeaderboardRecords: [", string.Join(", ", LeaderboardRecords), "], ");
            output = string.Concat(output, "Messages: [", string.Join(", ", Messages), "], ");
            output = string.Concat(output, "Notifications: [", string.Join(", ", Notifications), "], ");
            output = string.Concat(output, "Objects: [", string.Join(", ", Objects), "], ");
            output = string.Concat(output, "WalletLedgers: [", string.Join(", ", WalletLedgers), "], ");
            return output;
        }
    }

    /// <summary>
    /// Authenticate a console user with username and password.
    /// </summary>
    public interface IConsoleAuthenticateRequest
    {

        /// <summary>
        /// The password of the user.
        /// </summary>
        string Password { get; }

        /// <summary>
        /// The username of the user.
        /// </summary>
        string Username { get; }
    }

    /// <inheritdoc />
    internal class ConsoleAuthenticateRequest : IConsoleAuthenticateRequest
    {

        /// <inheritdoc />
        [DataMember(Name="password")]
        public string Password { get; set; }

        /// <inheritdoc />
        [DataMember(Name="username")]
        public string Username { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Password: ", Password, ", ");
            output = string.Concat(output, "Username: ", Username, ", ");
            return output;
        }
    }

    /// <summary>
    /// The current server configuration and any associated warnings.
    /// </summary>
    public interface IConsoleConfig
    {

        /// <summary>
        /// JSON-encoded active server configuration.
        /// </summary>
        string Config { get; }

        /// <summary>
        /// 
        /// </summary>
        string ServerVersion { get; }

        /// <summary>
        /// Any warnings about the current config.
        /// </summary>
        IEnumerable<IConfigWarning> Warnings { get; }
    }

    /// <inheritdoc />
    internal class ConsoleConfig : IConsoleConfig
    {

        /// <inheritdoc />
        [DataMember(Name="config")]
        public string Config { get; set; }

        /// <inheritdoc />
        [DataMember(Name="server_version")]
        public string ServerVersion { get; set; }

        /// <inheritdoc />
        public IEnumerable<IConfigWarning> Warnings => _warnings ?? new List<ConfigWarning>(0);
        [DataMember(Name="warnings")]
        public List<ConfigWarning> _warnings { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Config: ", Config, ", ");
            output = string.Concat(output, "ServerVersion: ", ServerVersion, ", ");
            output = string.Concat(output, "Warnings: [", string.Join(", ", Warnings), "], ");
            return output;
        }
    }

    /// <summary>
    /// A console user session.
    /// </summary>
    public interface IConsoleConsoleSession
    {

        /// <summary>
        /// A session token (JWT) for the console user.
        /// </summary>
        string Token { get; }
    }

    /// <inheritdoc />
    internal class ConsoleConsoleSession : IConsoleConsoleSession
    {

        /// <inheritdoc />
        [DataMember(Name="token")]
        public string Token { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Token: ", Token, ", ");
            return output;
        }
    }

    /// <summary>
    /// List of nodes and their stats.
    /// </summary>
    public interface IConsoleStatusList
    {

        /// <summary>
        /// List of nodes and their stats.
        /// </summary>
        IEnumerable<IStatusListStatus> Nodes { get; }
    }

    /// <inheritdoc />
    internal class ConsoleStatusList : IConsoleStatusList
    {

        /// <inheritdoc />
        public IEnumerable<IStatusListStatus> Nodes => _nodes ?? new List<StatusListStatus>(0);
        [DataMember(Name="nodes")]
        public List<StatusListStatus> _nodes { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Nodes: [", string.Join(", ", Nodes), "], ");
            return output;
        }
    }

    /// <summary>
    /// List of storage objects.
    /// </summary>
    public interface IConsoleStorageList
    {

        /// <summary>
        /// List of storage objects matching list/filter operation.
        /// </summary>
        IEnumerable<IApiStorageObject> Objects { get; }

        /// <summary>
        /// Approximate total number of storage objects.
        /// </summary>
        int TotalCount { get; }
    }

    /// <inheritdoc />
    internal class ConsoleStorageList : IConsoleStorageList
    {

        /// <inheritdoc />
        public IEnumerable<IApiStorageObject> Objects => _objects ?? new List<ApiStorageObject>(0);
        [DataMember(Name="objects")]
        public List<ApiStorageObject> _objects { get; set; }

        /// <inheritdoc />
        [DataMember(Name="total_count")]
        public int TotalCount { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Objects: [", string.Join(", ", Objects), "], ");
            output = string.Concat(output, "TotalCount: ", TotalCount, ", ");
            return output;
        }
    }

    /// <summary>
    /// Unlink a particular device ID from a user's account.
    /// </summary>
    public interface IConsoleUnlinkDeviceRequest
    {

        /// <summary>
        /// Device ID to unlink.
        /// </summary>
        string DeviceId { get; }

        /// <summary>
        /// User ID to unlink from.
        /// </summary>
        string Id { get; }
    }

    /// <inheritdoc />
    internal class ConsoleUnlinkDeviceRequest : IConsoleUnlinkDeviceRequest
    {

        /// <inheritdoc />
        [DataMember(Name="device_id")]
        public string DeviceId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id")]
        public string Id { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "DeviceId: ", DeviceId, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");
            return output;
        }
    }

    /// <summary>
    /// A list of users.
    /// </summary>
    public interface IConsoleUserList
    {

        /// <summary>
        /// Approximate total number of users.
        /// </summary>
        int TotalCount { get; }

        /// <summary>
        /// A list of users.
        /// </summary>
        IEnumerable<IApiUser> Users { get; }
    }

    /// <inheritdoc />
    internal class ConsoleUserList : IConsoleUserList
    {

        /// <inheritdoc />
        [DataMember(Name="total_count")]
        public int TotalCount { get; set; }

        /// <inheritdoc />
        public IEnumerable<IApiUser> Users => _users ?? new List<ApiUser>(0);
        [DataMember(Name="users")]
        public List<ApiUser> _users { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "TotalCount: ", TotalCount, ", ");
            output = string.Concat(output, "Users: [", string.Join(", ", Users), "], ");
            return output;
        }
    }

    /// <summary>
    /// An individual update to a user's wallet.
    /// </summary>
    public interface IConsoleWalletLedger
    {

        /// <summary>
        /// The changeset.
        /// </summary>
        string Changeset { get; }

        /// <summary>
        /// The UNIX time when the wallet ledger item was created.
        /// </summary>
        string CreateTime { get; }

        /// <summary>
        /// The identifier of this wallet change.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// Any associated metadata.
        /// </summary>
        string Metadata { get; }

        /// <summary>
        /// The UNIX time when the wallet ledger item was updated.
        /// </summary>
        string UpdateTime { get; }

        /// <summary>
        /// The user ID this wallet ledger item belongs to.
        /// </summary>
        string UserId { get; }
    }

    /// <inheritdoc />
    internal class ConsoleWalletLedger : IConsoleWalletLedger
    {

        /// <inheritdoc />
        [DataMember(Name="changeset")]
        public string Changeset { get; set; }

        /// <inheritdoc />
        [DataMember(Name="create_time")]
        public string CreateTime { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="metadata")]
        public string Metadata { get; set; }

        /// <inheritdoc />
        [DataMember(Name="update_time")]
        public string UpdateTime { get; set; }

        /// <inheritdoc />
        [DataMember(Name="user_id")]
        public string UserId { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Changeset: ", Changeset, ", ");
            output = string.Concat(output, "CreateTime: ", CreateTime, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Metadata: ", Metadata, ", ");
            output = string.Concat(output, "UpdateTime: ", UpdateTime, ", ");
            output = string.Concat(output, "UserId: ", UserId, ", ");
            return output;
        }
    }

    /// <summary>
    /// List of wallet ledger items for a particular user.
    /// </summary>
    public interface IConsoleWalletLedgerList
    {

        /// <summary>
        /// A list of wallet ledger items.
        /// </summary>
        IEnumerable<IConsoleWalletLedger> Items { get; }
    }

    /// <inheritdoc />
    internal class ConsoleWalletLedgerList : IConsoleWalletLedgerList
    {

        /// <inheritdoc />
        public IEnumerable<IConsoleWalletLedger> Items => _items ?? new List<ConsoleWalletLedger>(0);
        [DataMember(Name="items")]
        public List<ConsoleWalletLedger> _items { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Items: [", string.Join(", ", Items), "], ");
            return output;
        }
    }

    /// <summary>
    /// Write a new storage object or update an existing one.
    /// </summary>
    public interface IConsoleWriteStorageObjectRequest
    {

        /// <summary>
        /// Collection.
        /// </summary>
        string Collection { get; }

        /// <summary>
        /// Key.
        /// </summary>
        string Key { get; }

        /// <summary>
        /// Read permission value.
        /// </summary>
        int PermissionRead { get; }

        /// <summary>
        /// Write permission value.
        /// </summary>
        int PermissionWrite { get; }

        /// <summary>
        /// Owner user ID.
        /// </summary>
        string UserId { get; }

        /// <summary>
        /// Value.
        /// </summary>
        string Value { get; }

        /// <summary>
        /// Version for OCC.
        /// </summary>
        string Version { get; }
    }

    /// <inheritdoc />
    internal class ConsoleWriteStorageObjectRequest : IConsoleWriteStorageObjectRequest
    {

        /// <inheritdoc />
        [DataMember(Name="collection")]
        public string Collection { get; set; }

        /// <inheritdoc />
        [DataMember(Name="key")]
        public string Key { get; set; }

        /// <inheritdoc />
        [DataMember(Name="permission_read")]
        public int PermissionRead { get; set; }

        /// <inheritdoc />
        [DataMember(Name="permission_write")]
        public int PermissionWrite { get; set; }

        /// <inheritdoc />
        [DataMember(Name="user_id")]
        public string UserId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value")]
        public string Value { get; set; }

        /// <inheritdoc />
        [DataMember(Name="version")]
        public string Version { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Collection: ", Collection, ", ");
            output = string.Concat(output, "Key: ", Key, ", ");
            output = string.Concat(output, "PermissionRead: ", PermissionRead, ", ");
            output = string.Concat(output, "PermissionWrite: ", PermissionWrite, ", ");
            output = string.Concat(output, "UserId: ", UserId, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            output = string.Concat(output, "Version: ", Version, ", ");
            return output;
        }
    }

    /// <summary>
    /// A user with additional account details. Always the current user.
    /// </summary>
    public interface INakamaapiAccount
    {

        /// <summary>
        /// The custom id in the user's account.
        /// </summary>
        string CustomId { get; }

        /// <summary>
        /// The devices which belong to the user's account.
        /// </summary>
        IEnumerable<IApiAccountDevice> Devices { get; }

        /// <summary>
        /// The email address of the user.
        /// </summary>
        string Email { get; }

        /// <summary>
        /// The user object.
        /// </summary>
        IApiUser User { get; }

        /// <summary>
        /// The UNIX time when the user's email was verified.
        /// </summary>
        string VerifyTime { get; }

        /// <summary>
        /// The user's wallet data.
        /// </summary>
        string Wallet { get; }
    }

    /// <inheritdoc />
    internal class NakamaapiAccount : INakamaapiAccount
    {

        /// <inheritdoc />
        [DataMember(Name="custom_id")]
        public string CustomId { get; set; }

        /// <inheritdoc />
        public IEnumerable<IApiAccountDevice> Devices => _devices ?? new List<ApiAccountDevice>(0);
        [DataMember(Name="devices")]
        public List<ApiAccountDevice> _devices { get; set; }

        /// <inheritdoc />
        [DataMember(Name="email")]
        public string Email { get; set; }

        /// <inheritdoc />
        public IApiUser User => _user;
        [DataMember(Name="user")]
        public ApiUser _user { get; set; }

        /// <inheritdoc />
        [DataMember(Name="verify_time")]
        public string VerifyTime { get; set; }

        /// <inheritdoc />
        [DataMember(Name="wallet")]
        public string Wallet { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "CustomId: ", CustomId, ", ");
            output = string.Concat(output, "Devices: [", string.Join(", ", Devices), "], ");
            output = string.Concat(output, "Email: ", Email, ", ");
            output = string.Concat(output, "User: ", User, ", ");
            output = string.Concat(output, "VerifyTime: ", VerifyTime, ", ");
            output = string.Concat(output, "Wallet: ", Wallet, ", ");
            return output;
        }
    }

    /// <summary>
    /// Account information.
    /// </summary>
    public interface INakamaconsoleAccount
    {

        /// <summary>
        /// The user's account details.
        /// </summary>
        INakamaapiAccount Account { get; }

        /// <summary>
        /// The UNIX time when the account was disabled.
        /// </summary>
        string DisableTime { get; }
    }

    /// <inheritdoc />
    internal class NakamaconsoleAccount : INakamaconsoleAccount
    {

        /// <inheritdoc />
        public INakamaapiAccount Account => _account;
        [DataMember(Name="account")]
        public NakamaapiAccount _account { get; set; }

        /// <inheritdoc />
        [DataMember(Name="disable_time")]
        public string DisableTime { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Account: ", Account, ", ");
            output = string.Concat(output, "DisableTime: ", DisableTime, ", ");
            return output;
        }
    }

    /// <summary>
    /// Update user account information.
    /// </summary>
    public interface INakamaconsoleUpdateAccountRequest
    {

        /// <summary>
        /// Avatar URL.
        /// </summary>
        string AvatarUrl { get; }

        /// <summary>
        /// Custom ID.
        /// </summary>
        string CustomId { get; }

        /// <summary>
        /// Device ID modifications.
        /// </summary>
        IDictionary<string, string> DeviceIds { get; }

        /// <summary>
        /// Display name.
        /// </summary>
        string DisplayName { get; }

        /// <summary>
        /// Email.
        /// </summary>
        string Email { get; }

        /// <summary>
        /// User ID to update.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// Langtag.
        /// </summary>
        string LangTag { get; }

        /// <summary>
        /// Location.
        /// </summary>
        string Location { get; }

        /// <summary>
        /// Metadata.
        /// </summary>
        string Metadata { get; }

        /// <summary>
        /// Password.
        /// </summary>
        string Password { get; }

        /// <summary>
        /// Timezone.
        /// </summary>
        string Timezone { get; }

        /// <summary>
        /// Username.
        /// </summary>
        string Username { get; }

        /// <summary>
        /// Wallet.
        /// </summary>
        string Wallet { get; }
    }

    /// <inheritdoc />
    internal class NakamaconsoleUpdateAccountRequest : INakamaconsoleUpdateAccountRequest
    {

        /// <inheritdoc />
        [DataMember(Name="avatar_url")]
        public string AvatarUrl { get; set; }

        /// <inheritdoc />
        [DataMember(Name="custom_id")]
        public string CustomId { get; set; }

        /// <inheritdoc />
        public IDictionary<string, string> DeviceIds => _deviceIds ?? new Dictionary<string, string>();
        [DataMember(Name="device_ids")]
        public Dictionary<string, string> _deviceIds { get; set; }

        /// <inheritdoc />
        [DataMember(Name="display_name")]
        public string DisplayName { get; set; }

        /// <inheritdoc />
        [DataMember(Name="email")]
        public string Email { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="lang_tag")]
        public string LangTag { get; set; }

        /// <inheritdoc />
        [DataMember(Name="location")]
        public string Location { get; set; }

        /// <inheritdoc />
        [DataMember(Name="metadata")]
        public string Metadata { get; set; }

        /// <inheritdoc />
        [DataMember(Name="password")]
        public string Password { get; set; }

        /// <inheritdoc />
        [DataMember(Name="timezone")]
        public string Timezone { get; set; }

        /// <inheritdoc />
        [DataMember(Name="username")]
        public string Username { get; set; }

        /// <inheritdoc />
        [DataMember(Name="wallet")]
        public string Wallet { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "AvatarUrl: ", AvatarUrl, ", ");
            output = string.Concat(output, "CustomId: ", CustomId, ", ");

            var mapString = "";
            foreach (var kvp in DeviceIds)
            {
                mapString = string.Concat(mapString, "{" + kvp.Key + "=" + kvp.Value + "}");
            }
            output = string.Concat(output, "DeviceIds: [" + mapString + "]");
            output = string.Concat(output, "DisplayName: ", DisplayName, ", ");
            output = string.Concat(output, "Email: ", Email, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "LangTag: ", LangTag, ", ");
            output = string.Concat(output, "Location: ", Location, ", ");
            output = string.Concat(output, "Metadata: ", Metadata, ", ");
            output = string.Concat(output, "Password: ", Password, ", ");
            output = string.Concat(output, "Timezone: ", Timezone, ", ");
            output = string.Concat(output, "Username: ", Username, ", ");
            output = string.Concat(output, "Wallet: ", Wallet, ", ");
            return output;
        }
    }

    /// <summary>
    /// `Any` contains an arbitrary serialized protocol buffer message along with a URL that describes the type of the serialized message.  Protobuf library provides support to pack/unpack Any values in the form of utility functions or additional generated methods of the Any type.  Example 1: Pack and unpack a message in C++.      Foo foo = ...;     Any any;     any.PackFrom(foo);     ...     if (any.UnpackTo(&foo)) {       ...     }  Example 2: Pack and unpack a message in Java.      Foo foo = ...;     Any any = Any.pack(foo);     ...     if (any.is(Foo.class)) {       foo = any.unpack(Foo.class);     }   Example 3: Pack and unpack a message in Python.      foo = Foo(...)     any = Any()     any.Pack(foo)     ...     if any.Is(Foo.DESCRIPTOR):       any.Unpack(foo)       ...   Example 4: Pack and unpack a message in Go       foo := &pb.Foo{...}      any, err := ptypes.MarshalAny(foo)      ...      foo := &pb.Foo{}      if err := ptypes.UnmarshalAny(any, foo); err != nil {        ...      }  The pack methods provided by protobuf library will by default use 'type.googleapis.com/full.type.name' as the type URL and the unpack methods only use the fully qualified type name after the last '/' in the type URL, for example "foo.bar.com/x/y.z" will yield type name "y.z".   JSON ==== The JSON representation of an `Any` value uses the regular representation of the deserialized, embedded message, with an additional field `@type` which contains the type URL. Example:      package google.profile;     message Person {       string first_name = 1;       string last_name = 2;     }      {       "@type": "type.googleapis.com/google.profile.Person",       "firstName": <string>,       "lastName": <string>     }  If the embedded message type is well-known and has a custom JSON representation, that representation will be embedded adding a field `value` which holds the custom JSON in addition to the `@type` field. Example (for message [google.protobuf.Duration][]):      {       "@type": "type.googleapis.com/google.protobuf.Duration",       "value": "1.212s"     }
    /// </summary>
    public interface IProtobufAny
    {

        /// <summary>
        /// A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one "/" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading "." is not accepted).  In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows:  * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.)  Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com.  Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics.
        /// </summary>
        string TypeUrl { get; }

        /// <summary>
        /// Must be a valid serialized protocol buffer of the above specified type.
        /// </summary>
        string Value { get; }
    }

    /// <inheritdoc />
    internal class ProtobufAny : IProtobufAny
    {

        /// <inheritdoc />
        [DataMember(Name="type_url")]
        public string TypeUrl { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value")]
        public string Value { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "TypeUrl: ", TypeUrl, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IRuntimeError
    {

        /// <summary>
        /// 
        /// </summary>
        int Code { get; }

        /// <summary>
        /// 
        /// </summary>
        IEnumerable<IProtobufAny> Details { get; }

        /// <summary>
        /// 
        /// </summary>
        string Error { get; }

        /// <summary>
        /// 
        /// </summary>
        string Message { get; }
    }

    /// <inheritdoc />
    internal class RuntimeError : IRuntimeError
    {

        /// <inheritdoc />
        [DataMember(Name="code")]
        public int Code { get; set; }

        /// <inheritdoc />
        public IEnumerable<IProtobufAny> Details => _details ?? new List<ProtobufAny>(0);
        [DataMember(Name="details")]
        public List<ProtobufAny> _details { get; set; }

        /// <inheritdoc />
        [DataMember(Name="error")]
        public string Error { get; set; }

        /// <inheritdoc />
        [DataMember(Name="message")]
        public string Message { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Code: ", Code, ", ");
            output = string.Concat(output, "Details: [", string.Join(", ", Details), "], ");
            output = string.Concat(output, "Error: ", Error, ", ");
            output = string.Concat(output, "Message: ", Message, ", ");
            return output;
        }
    }

    /// <summary>
    /// The low level client for the Nakama API.
    /// </summary>
    internal class ApiClient
    {
        private readonly Uri _baseUri;
        private readonly int _timeout;
        public readonly IHttpAdapter HttpAdapter;

        public ApiClient(Uri baseUri, IHttpAdapter httpAdapter, int timeout = 10)
        {
            _baseUri = baseUri;
            _timeout = timeout;
            HttpAdapter = httpAdapter;
        }

        /// <summary>
        /// Delete all information stored for a user account.
        /// </summary>
        public async Task DeleteAccountAsync(
            string bearerToken,
            string id,
            bool? recordDeletion)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v2/console/account/{id}";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";
            if (recordDeletion != null) {
                queryParams = string.Concat(queryParams, "record_deletion=", recordDeletion.ToString().ToLower(), "&");
            }

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "DELETE";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, _timeout);
        }

        /// <summary>
        /// Get detailed account information for a single user.
        /// </summary>
        public async Task<INakamaconsoleAccount> GetAccountAsync(
            string bearerToken,
            string id)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v2/console/account/{id}";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, _timeout);
            return contents.FromJson<NakamaconsoleAccount>();
        }

        /// <summary>
        /// Update one or more fields on a user account.
        /// </summary>
        public async Task UpdateAccountAsync(
            string bearerToken,
            string id,
            NakamaconsoleUpdateAccountRequest body)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/console/account/{id}";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            await HttpAdapter.SendAsync(method, uri, headers, content, _timeout);
        }

        /// <summary>
        /// Ban a user.
        /// </summary>
        public async Task BanUserAsync(
            string bearerToken,
            string id)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v2/console/account/{id}/ban";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, _timeout);
        }

        /// <summary>
        /// Export all information stored about a user account.
        /// </summary>
        public async Task<IConsoleAccountExport> ExportAccountAsync(
            string bearerToken,
            string id)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v2/console/account/{id}/export";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, _timeout);
            return contents.FromJson<ConsoleAccountExport>();
        }

        /// <summary>
        /// Get a user's list of friend relationships.
        /// </summary>
        public async Task<IApiFriendList> GetFriendsAsync(
            string bearerToken,
            string id)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v2/console/account/{id}/friend";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, _timeout);
            return contents.FromJson<ApiFriendList>();
        }

        /// <summary>
        /// Delete the friend relationship between two users.
        /// </summary>
        public async Task DeleteFriendAsync(
            string bearerToken,
            string id,
            string friendId)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }
            if (friendId == null)
            {
                throw new ArgumentException("'friendId' is required but was null.");
            }

            var urlpath = "/v2/console/account/{id}/friend/{friend_id}";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));
            urlpath = urlpath.Replace("{friend_id}", Uri.EscapeDataString(friendId));

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "DELETE";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, _timeout);
        }

        /// <summary>
        /// Get a list of groups the user is a member of.
        /// </summary>
        public async Task<IApiUserGroupList> GetGroupsAsync(
            string bearerToken,
            string id)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v2/console/account/{id}/group";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, _timeout);
            return contents.FromJson<ApiUserGroupList>();
        }

        /// <summary>
        /// Remove a user from a group.
        /// </summary>
        public async Task DeleteGroupUserAsync(
            string bearerToken,
            string id,
            string groupId)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }
            if (groupId == null)
            {
                throw new ArgumentException("'groupId' is required but was null.");
            }

            var urlpath = "/v2/console/account/{id}/group/{group_id}";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));
            urlpath = urlpath.Replace("{group_id}", Uri.EscapeDataString(groupId));

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "DELETE";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, _timeout);
        }

        /// <summary>
        /// Unban a user.
        /// </summary>
        public async Task UnbanUserAsync(
            string bearerToken,
            string id)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v2/console/account/{id}/unban";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, _timeout);
        }

        /// <summary>
        /// Unlink the custom ID from a user account.
        /// </summary>
        public async Task UnlinkCustomAsync(
            string bearerToken,
            string id)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v2/console/account/{id}/unlink/custom";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, _timeout);
        }

        /// <summary>
        /// Unlink the device ID from a user account.
        /// </summary>
        public async Task UnlinkDeviceAsync(
            string bearerToken,
            string id,
            ConsoleUnlinkDeviceRequest body)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/console/account/{id}/unlink/device";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            await HttpAdapter.SendAsync(method, uri, headers, content, _timeout);
        }

        /// <summary>
        /// Unlink the email from a user account.
        /// </summary>
        public async Task UnlinkEmailAsync(
            string bearerToken,
            string id)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v2/console/account/{id}/unlink/email";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, _timeout);
        }

        /// <summary>
        /// Unlink the Facebook ID from a user account.
        /// </summary>
        public async Task UnlinkFacebookAsync(
            string bearerToken,
            string id)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v2/console/account/{id}/unlink/facebook";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, _timeout);
        }

        /// <summary>
        /// Unlink the Facebook ID from a user account.
        /// </summary>
        public async Task UnlinkFacebookInstantGameAsync(
            string bearerToken,
            string id)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v2/console/account/{id}/unlink/facebookinstantgame";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, _timeout);
        }

        /// <summary>
        /// Unlink the Game Center ID from a user account.
        /// </summary>
        public async Task UnlinkGameCenterAsync(
            string bearerToken,
            string id)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v2/console/account/{id}/unlink/gamecenter";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, _timeout);
        }

        /// <summary>
        /// Unlink the Google ID from a user account.
        /// </summary>
        public async Task UnlinkGoogleAsync(
            string bearerToken,
            string id)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v2/console/account/{id}/unlink/google";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, _timeout);
        }

        /// <summary>
        /// Unlink the Steam ID from a user account.
        /// </summary>
        public async Task UnlinkSteamAsync(
            string bearerToken,
            string id)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v2/console/account/{id}/unlink/steam";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, _timeout);
        }

        /// <summary>
        /// Get a list of the user's wallet transactions.
        /// </summary>
        public async Task<IConsoleWalletLedgerList> GetWalletLedgerAsync(
            string bearerToken,
            string id)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v2/console/account/{id}/wallet";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, _timeout);
            return contents.FromJson<ConsoleWalletLedgerList>();
        }

        /// <summary>
        /// Delete a wallet ledger item.
        /// </summary>
        public async Task DeleteWalletLedgerAsync(
            string bearerToken,
            string id,
            string walletId)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }
            if (walletId == null)
            {
                throw new ArgumentException("'walletId' is required but was null.");
            }

            var urlpath = "/v2/console/account/{id}/wallet/{wallet_id}";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));
            urlpath = urlpath.Replace("{wallet_id}", Uri.EscapeDataString(walletId));

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "DELETE";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, _timeout);
        }

        /// <summary>
        /// Authenticate a console user with username and password.
        /// </summary>
        public async Task<IConsoleConsoleSession> AuthenticateAsync(
            ConsoleAuthenticateRequest body)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/console/authenticate";

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, _timeout);
            return contents.FromJson<ConsoleConsoleSession>();
        }

        /// <summary>
        /// Get server config and configuration warnings.
        /// </summary>
        public async Task<IConsoleConfig> GetConfigAsync(
            string bearerToken)
        {

            var urlpath = "/v2/console/config";

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, _timeout);
            return contents.FromJson<ConsoleConfig>();
        }

        /// <summary>
        /// Get current status data for all nodes.
        /// </summary>
        public async Task<IConsoleStatusList> GetStatusAsync(
            string bearerToken)
        {

            var urlpath = "/v2/console/status";

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, _timeout);
            return contents.FromJson<ConsoleStatusList>();
        }

        /// <summary>
        /// Delete all storage data.
        /// </summary>
        public async Task DeleteStorageAsync(
            string bearerToken)
        {

            var urlpath = "/v2/console/storage";

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "DELETE";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, _timeout);
        }

        /// <summary>
        /// List (and optionally filter) storage data.
        /// </summary>
        public async Task<IConsoleStorageList> ListStorageAsync(
            string bearerToken,
            string userId)
        {

            var urlpath = "/v2/console/storage";

            var queryParams = "";
            if (userId != null) {
                queryParams = string.Concat(queryParams, "user_id=", Uri.EscapeDataString(userId), "&");
            }

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, _timeout);
            return contents.FromJson<ConsoleStorageList>();
        }

        /// <summary>
        /// Delete a storage object.
        /// </summary>
        public async Task DeleteStorageObjectAsync(
            string bearerToken,
            string collection,
            string key,
            string userId,
            string version)
        {
            if (collection == null)
            {
                throw new ArgumentException("'collection' is required but was null.");
            }
            if (key == null)
            {
                throw new ArgumentException("'key' is required but was null.");
            }
            if (userId == null)
            {
                throw new ArgumentException("'userId' is required but was null.");
            }

            var urlpath = "/v2/console/storage/{collection}/{key}/{user_id}";
            urlpath = urlpath.Replace("{collection}", Uri.EscapeDataString(collection));
            urlpath = urlpath.Replace("{key}", Uri.EscapeDataString(key));
            urlpath = urlpath.Replace("{user_id}", Uri.EscapeDataString(userId));

            var queryParams = "";
            if (version != null) {
                queryParams = string.Concat(queryParams, "version=", Uri.EscapeDataString(version), "&");
            }

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "DELETE";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, _timeout);
        }

        /// <summary>
        /// Get a storage object.
        /// </summary>
        public async Task<IApiStorageObject> GetStorageAsync(
            string bearerToken,
            string collection,
            string key,
            string userId)
        {
            if (collection == null)
            {
                throw new ArgumentException("'collection' is required but was null.");
            }
            if (key == null)
            {
                throw new ArgumentException("'key' is required but was null.");
            }
            if (userId == null)
            {
                throw new ArgumentException("'userId' is required but was null.");
            }

            var urlpath = "/v2/console/storage/{collection}/{key}/{user_id}";
            urlpath = urlpath.Replace("{collection}", Uri.EscapeDataString(collection));
            urlpath = urlpath.Replace("{key}", Uri.EscapeDataString(key));
            urlpath = urlpath.Replace("{user_id}", Uri.EscapeDataString(userId));

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, _timeout);
            return contents.FromJson<ApiStorageObject>();
        }

        /// <summary>
        /// Write a new storage object or replace an existing one.
        /// </summary>
        public async Task<IApiStorageObjectAck> WriteStorageObjectAsync(
            string bearerToken,
            string collection,
            string key,
            string userId,
            ConsoleWriteStorageObjectRequest body)
        {
            if (collection == null)
            {
                throw new ArgumentException("'collection' is required but was null.");
            }
            if (key == null)
            {
                throw new ArgumentException("'key' is required but was null.");
            }
            if (userId == null)
            {
                throw new ArgumentException("'userId' is required but was null.");
            }
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/console/storage/{collection}/{key}/{user_id}";
            urlpath = urlpath.Replace("{collection}", Uri.EscapeDataString(collection));
            urlpath = urlpath.Replace("{key}", Uri.EscapeDataString(key));
            urlpath = urlpath.Replace("{user_id}", Uri.EscapeDataString(userId));

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "PUT";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, _timeout);
            return contents.FromJson<ApiStorageObjectAck>();
        }

        /// <summary>
        /// Delete a storage object.
        /// </summary>
        public async Task DeleteStorageObject2Async(
            string bearerToken,
            string collection,
            string key,
            string userId,
            string version)
        {
            if (collection == null)
            {
                throw new ArgumentException("'collection' is required but was null.");
            }
            if (key == null)
            {
                throw new ArgumentException("'key' is required but was null.");
            }
            if (userId == null)
            {
                throw new ArgumentException("'userId' is required but was null.");
            }
            if (version == null)
            {
                throw new ArgumentException("'version' is required but was null.");
            }

            var urlpath = "/v2/console/storage/{collection}/{key}/{user_id}/{version}";
            urlpath = urlpath.Replace("{collection}", Uri.EscapeDataString(collection));
            urlpath = urlpath.Replace("{key}", Uri.EscapeDataString(key));
            urlpath = urlpath.Replace("{user_id}", Uri.EscapeDataString(userId));
            urlpath = urlpath.Replace("{version}", Uri.EscapeDataString(version));

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "DELETE";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, _timeout);
        }

        /// <summary>
        /// Delete (non-recorded) all user accounts.
        /// </summary>
        public async Task DeleteUsersAsync(
            string bearerToken)
        {

            var urlpath = "/v2/console/user";

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "DELETE";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, _timeout);
        }

        /// <summary>
        /// List (and optionally filter) users.
        /// </summary>
        public async Task<IConsoleUserList> ListUsersAsync(
            string bearerToken,
            string filter,
            bool? banned,
            bool? tombstones)
        {

            var urlpath = "/v2/console/user";

            var queryParams = "";
            if (filter != null) {
                queryParams = string.Concat(queryParams, "filter=", Uri.EscapeDataString(filter), "&");
            }
            if (banned != null) {
                queryParams = string.Concat(queryParams, "banned=", banned.ToString().ToLower(), "&");
            }
            if (tombstones != null) {
                queryParams = string.Concat(queryParams, "tombstones=", tombstones.ToString().ToLower(), "&");
            }

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, _timeout);
            return contents.FromJson<ConsoleUserList>();
        }
    }
}
