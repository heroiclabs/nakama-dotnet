/* Code generated by codegen/main.go. DO NOT EDIT. */
namespace Nakama
{
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
    using System.Text;
    using System.Threading.Tasks;
    using TinyJson;

    /// <summary>
    /// An exception generated for <c>HttpResponse</c> objects don't return a success status.
    /// </summary>
    public sealed class ApiResponseException : Exception
    {
        public long StatusCode { get; }

        public int GrpcStatusCode { get; }

        public ApiResponseException(long statusCode, string content, int grpcCode) : base(content)
        {
            StatusCode = statusCode;
            GrpcStatusCode = grpcCode;
        }

        public ApiResponseException(string message, Exception e) : base(message, e)
        {
            StatusCode = -1L;
            GrpcStatusCode = -1;
        }

        public ApiResponseException(string content) : this(-1L, content, -1)
        {
        }

        public override string ToString()
        {
            return $"ApiResponseException(StatusCode={StatusCode}, Message='{Message}', GrpcStatusCode={GrpcStatusCode})";
        }
    }

    /// <summary>
    /// A single user-role pair.
    /// </summary>
    public interface IGroupUserListGroupUser
    {

        /// <summary>
        /// Their relationship to the group.
        /// </summary>
        int State { get; }

        /// <summary>
        /// User.
        /// </summary>
        IApiUser User { get; }
    }

    /// <inheritdoc />
    internal class GroupUserListGroupUser : IGroupUserListGroupUser
    {

        /// <inheritdoc />
        [DataMember(Name="state"), Preserve]
        public int State { get; set; }

        /// <inheritdoc />
        public IApiUser User => _user;
        [DataMember(Name="user"), Preserve]
        public ApiUser _user { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "State: ", State, ", ");
            output = string.Concat(output, "User: ", User, ", ");
            return output;
        }
    }

    /// <summary>
    /// A single group-role pair.
    /// </summary>
    public interface IUserGroupListUserGroup
    {

        /// <summary>
        /// Group.
        /// </summary>
        IApiGroup Group { get; }

        /// <summary>
        /// The user's relationship to the group.
        /// </summary>
        int State { get; }
    }

    /// <inheritdoc />
    internal class UserGroupListUserGroup : IUserGroupListUserGroup
    {

        /// <inheritdoc />
        public IApiGroup Group => _group;
        [DataMember(Name="group"), Preserve]
        public ApiGroup _group { get; set; }

        /// <inheritdoc />
        [DataMember(Name="state"), Preserve]
        public int State { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Group: ", Group, ", ");
            output = string.Concat(output, "State: ", State, ", ");
            return output;
        }
    }

    /// <summary>
    /// Environment where the purchase took place
    /// </summary>
    public enum ValidatedPurchaseEnvironment
    {
        /// <summary>
        /// - UNKNOWN: Unknown environment.
        /// </summary>
        UNKNOWN = 0,
        /// <summary>
        ///  - SANDBOX: Sandbox/test environment.
        /// </summary>
        SANDBOX = 1,
        /// <summary>
        ///  - PRODUCTION: Production environment.
        /// </summary>
        PRODUCTION = 2,
    }

    /// <summary>
    /// Validation Provider
    /// </summary>
    public enum ValidatedPurchaseStore
    {
        /// <summary>
        /// - APPLE_APP_STORE: Apple App Store
        /// </summary>
        APPLE_APP_STORE = 0,
        /// <summary>
        ///  - GOOGLE_PLAY_STORE: Google Play Store
        /// </summary>
        GOOGLE_PLAY_STORE = 1,
        /// <summary>
        ///  - HUAWEI_APP_GALLERY: Huawei App Gallery
        /// </summary>
        HUAWEI_APP_GALLERY = 2,
    }

    /// <summary>
    /// Record values to write.
    /// </summary>
    public interface IWriteLeaderboardRecordRequestLeaderboardRecordWrite
    {

        /// <summary>
        /// Optional record metadata.
        /// </summary>
        string Metadata { get; }

        /// <summary>
        /// The score value to submit.
        /// </summary>
        string Score { get; }

        /// <summary>
        /// An optional secondary value.
        /// </summary>
        string Subscore { get; }
    }

    /// <inheritdoc />
    internal class WriteLeaderboardRecordRequestLeaderboardRecordWrite : IWriteLeaderboardRecordRequestLeaderboardRecordWrite
    {

        /// <inheritdoc />
        [DataMember(Name="metadata"), Preserve]
        public string Metadata { get; set; }

        /// <inheritdoc />
        [DataMember(Name="score"), Preserve]
        public string Score { get; set; }

        /// <inheritdoc />
        [DataMember(Name="subscore"), Preserve]
        public string Subscore { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Metadata: ", Metadata, ", ");
            output = string.Concat(output, "Score: ", Score, ", ");
            output = string.Concat(output, "Subscore: ", Subscore, ", ");
            return output;
        }
    }

    /// <summary>
    /// Record values to write.
    /// </summary>
    public interface IWriteTournamentRecordRequestTournamentRecordWrite
    {

        /// <summary>
        /// A JSON object of additional properties (optional).
        /// </summary>
        string Metadata { get; }

        /// <summary>
        /// The score value to submit.
        /// </summary>
        string Score { get; }

        /// <summary>
        /// An optional secondary value.
        /// </summary>
        string Subscore { get; }
    }

    /// <inheritdoc />
    internal class WriteTournamentRecordRequestTournamentRecordWrite : IWriteTournamentRecordRequestTournamentRecordWrite
    {

        /// <inheritdoc />
        [DataMember(Name="metadata"), Preserve]
        public string Metadata { get; set; }

        /// <inheritdoc />
        [DataMember(Name="score"), Preserve]
        public string Score { get; set; }

        /// <inheritdoc />
        [DataMember(Name="subscore"), Preserve]
        public string Subscore { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Metadata: ", Metadata, ", ");
            output = string.Concat(output, "Score: ", Score, ", ");
            output = string.Concat(output, "Subscore: ", Subscore, ", ");
            return output;
        }
    }

    /// <summary>
    /// A user with additional account details. Always the current user.
    /// </summary>
    public interface IApiAccount
    {

        /// <summary>
        /// The custom id in the user's account.
        /// </summary>
        string CustomId { get; }

        /// <summary>
        /// The devices which belong to the user's account.
        /// </summary>
        IEnumerable<IApiAccountDevice> Devices { get; }

        /// <summary>
        /// The UNIX time when the user's account was disabled/banned.
        /// </summary>
        string DisableTime { get; }

        /// <summary>
        /// The email address of the user.
        /// </summary>
        string Email { get; }

        /// <summary>
        /// The user object.
        /// </summary>
        IApiUser User { get; }

        /// <summary>
        /// The UNIX time when the user's email was verified.
        /// </summary>
        string VerifyTime { get; }

        /// <summary>
        /// The user's wallet data.
        /// </summary>
        string Wallet { get; }
    }

    /// <inheritdoc />
    internal class ApiAccount : IApiAccount
    {

        /// <inheritdoc />
        [DataMember(Name="custom_id"), Preserve]
        public string CustomId { get; set; }

        /// <inheritdoc />
        public IEnumerable<IApiAccountDevice> Devices => _devices ?? new List<ApiAccountDevice>(0);
        [DataMember(Name="devices"), Preserve]
        public List<ApiAccountDevice> _devices { get; set; }

        /// <inheritdoc />
        [DataMember(Name="disable_time"), Preserve]
        public string DisableTime { get; set; }

        /// <inheritdoc />
        [DataMember(Name="email"), Preserve]
        public string Email { get; set; }

        /// <inheritdoc />
        public IApiUser User => _user;
        [DataMember(Name="user"), Preserve]
        public ApiUser _user { get; set; }

        /// <inheritdoc />
        [DataMember(Name="verify_time"), Preserve]
        public string VerifyTime { get; set; }

        /// <inheritdoc />
        [DataMember(Name="wallet"), Preserve]
        public string Wallet { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "CustomId: ", CustomId, ", ");
            output = string.Concat(output, "Devices: [", string.Join(", ", Devices), "], ");
            output = string.Concat(output, "DisableTime: ", DisableTime, ", ");
            output = string.Concat(output, "Email: ", Email, ", ");
            output = string.Concat(output, "User: ", User, ", ");
            output = string.Concat(output, "VerifyTime: ", VerifyTime, ", ");
            output = string.Concat(output, "Wallet: ", Wallet, ", ");
            return output;
        }
    }

    /// <summary>
    /// Send a Apple Sign In token to the server. Used with authenticate/link/unlink.
    /// </summary>
    public interface IApiAccountApple
    {

        /// <summary>
        /// The ID token received from Apple to validate.
        /// </summary>
        string Token { get; }

        /// <summary>
        /// Extra information that will be bundled in the session token.
        /// </summary>
        IDictionary<string, string> Vars { get; }
    }

    /// <inheritdoc />
    internal class ApiAccountApple : IApiAccountApple
    {

        /// <inheritdoc />
        [DataMember(Name="token"), Preserve]
        public string Token { get; set; }

        /// <inheritdoc />
        public IDictionary<string, string> Vars => _vars ?? new Dictionary<string, string>();
        [DataMember(Name="vars"), Preserve]
        public Dictionary<string, string> _vars { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Token: ", Token, ", ");

            var mapString = "";
            foreach (var kvp in Vars)
            {
                mapString = string.Concat(mapString, "{" + kvp.Key + "=" + kvp.Value + "}");
            }
            output = string.Concat(output, "Vars: [" + mapString + "]");
            return output;
        }
    }

    /// <summary>
    /// Send a custom ID to the server. Used with authenticate/link/unlink.
    /// </summary>
    public interface IApiAccountCustom
    {

        /// <summary>
        /// A custom identifier.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// Extra information that will be bundled in the session token.
        /// </summary>
        IDictionary<string, string> Vars { get; }
    }

    /// <inheritdoc />
    internal class ApiAccountCustom : IApiAccountCustom
    {

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        public IDictionary<string, string> Vars => _vars ?? new Dictionary<string, string>();
        [DataMember(Name="vars"), Preserve]
        public Dictionary<string, string> _vars { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Id: ", Id, ", ");

            var mapString = "";
            foreach (var kvp in Vars)
            {
                mapString = string.Concat(mapString, "{" + kvp.Key + "=" + kvp.Value + "}");
            }
            output = string.Concat(output, "Vars: [" + mapString + "]");
            return output;
        }
    }

    /// <summary>
    /// Send a device to the server. Used with authenticate/link/unlink and user.
    /// </summary>
    public interface IApiAccountDevice
    {

        /// <summary>
        /// A device identifier. Should be obtained by a platform-specific device API.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// Extra information that will be bundled in the session token.
        /// </summary>
        IDictionary<string, string> Vars { get; }
    }

    /// <inheritdoc />
    internal class ApiAccountDevice : IApiAccountDevice
    {

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        public IDictionary<string, string> Vars => _vars ?? new Dictionary<string, string>();
        [DataMember(Name="vars"), Preserve]
        public Dictionary<string, string> _vars { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Id: ", Id, ", ");

            var mapString = "";
            foreach (var kvp in Vars)
            {
                mapString = string.Concat(mapString, "{" + kvp.Key + "=" + kvp.Value + "}");
            }
            output = string.Concat(output, "Vars: [" + mapString + "]");
            return output;
        }
    }

    /// <summary>
    /// Send an email with password to the server. Used with authenticate/link/unlink.
    /// </summary>
    public interface IApiAccountEmail
    {

        /// <summary>
        /// A valid RFC-5322 email address.
        /// </summary>
        string Email { get; }

        /// <summary>
        /// A password for the user account.
        /// </summary>
        string Password { get; }

        /// <summary>
        /// Extra information that will be bundled in the session token.
        /// </summary>
        IDictionary<string, string> Vars { get; }
    }

    /// <inheritdoc />
    internal class ApiAccountEmail : IApiAccountEmail
    {

        /// <inheritdoc />
        [DataMember(Name="email"), Preserve]
        public string Email { get; set; }

        /// <inheritdoc />
        [DataMember(Name="password"), Preserve]
        public string Password { get; set; }

        /// <inheritdoc />
        public IDictionary<string, string> Vars => _vars ?? new Dictionary<string, string>();
        [DataMember(Name="vars"), Preserve]
        public Dictionary<string, string> _vars { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Email: ", Email, ", ");
            output = string.Concat(output, "Password: ", Password, ", ");

            var mapString = "";
            foreach (var kvp in Vars)
            {
                mapString = string.Concat(mapString, "{" + kvp.Key + "=" + kvp.Value + "}");
            }
            output = string.Concat(output, "Vars: [" + mapString + "]");
            return output;
        }
    }

    /// <summary>
    /// Send a Facebook token to the server. Used with authenticate/link/unlink.
    /// </summary>
    public interface IApiAccountFacebook
    {

        /// <summary>
        /// The OAuth token received from Facebook to access their profile API.
        /// </summary>
        string Token { get; }

        /// <summary>
        /// Extra information that will be bundled in the session token.
        /// </summary>
        IDictionary<string, string> Vars { get; }
    }

    /// <inheritdoc />
    internal class ApiAccountFacebook : IApiAccountFacebook
    {

        /// <inheritdoc />
        [DataMember(Name="token"), Preserve]
        public string Token { get; set; }

        /// <inheritdoc />
        public IDictionary<string, string> Vars => _vars ?? new Dictionary<string, string>();
        [DataMember(Name="vars"), Preserve]
        public Dictionary<string, string> _vars { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Token: ", Token, ", ");

            var mapString = "";
            foreach (var kvp in Vars)
            {
                mapString = string.Concat(mapString, "{" + kvp.Key + "=" + kvp.Value + "}");
            }
            output = string.Concat(output, "Vars: [" + mapString + "]");
            return output;
        }
    }

    /// <summary>
    /// Send a Facebook Instant Game token to the server. Used with authenticate/link/unlink.
    /// </summary>
    public interface IApiAccountFacebookInstantGame
    {

        /// <summary>
        /// The OAuth token received from a Facebook Instant Game that may be decoded with the Application Secret (must be available with the nakama configuration)
        /// </summary>
        string SignedPlayerInfo { get; }

        /// <summary>
        /// Extra information that will be bundled in the session token.
        /// </summary>
        IDictionary<string, string> Vars { get; }
    }

    /// <inheritdoc />
    internal class ApiAccountFacebookInstantGame : IApiAccountFacebookInstantGame
    {

        /// <inheritdoc />
        [DataMember(Name="signed_player_info"), Preserve]
        public string SignedPlayerInfo { get; set; }

        /// <inheritdoc />
        public IDictionary<string, string> Vars => _vars ?? new Dictionary<string, string>();
        [DataMember(Name="vars"), Preserve]
        public Dictionary<string, string> _vars { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "SignedPlayerInfo: ", SignedPlayerInfo, ", ");

            var mapString = "";
            foreach (var kvp in Vars)
            {
                mapString = string.Concat(mapString, "{" + kvp.Key + "=" + kvp.Value + "}");
            }
            output = string.Concat(output, "Vars: [" + mapString + "]");
            return output;
        }
    }

    /// <summary>
    /// Send Apple's Game Center account credentials to the server. Used with authenticate/link/unlink.
    /// </summary>
    public interface IApiAccountGameCenter
    {

        /// <summary>
        /// Bundle ID (generated by GameCenter).
        /// </summary>
        string BundleId { get; }

        /// <summary>
        /// Player ID (generated by GameCenter).
        /// </summary>
        string PlayerId { get; }

        /// <summary>
        /// The URL for the public encryption key.
        /// </summary>
        string PublicKeyUrl { get; }

        /// <summary>
        /// A random "NSString" used to compute the hash and keep it randomized.
        /// </summary>
        string Salt { get; }

        /// <summary>
        /// The verification signature data generated.
        /// </summary>
        string Signature { get; }

        /// <summary>
        /// Time since UNIX epoch when the signature was created.
        /// </summary>
        string TimestampSeconds { get; }

        /// <summary>
        /// Extra information that will be bundled in the session token.
        /// </summary>
        IDictionary<string, string> Vars { get; }
    }

    /// <inheritdoc />
    internal class ApiAccountGameCenter : IApiAccountGameCenter
    {

        /// <inheritdoc />
        [DataMember(Name="bundle_id"), Preserve]
        public string BundleId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="player_id"), Preserve]
        public string PlayerId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="public_key_url"), Preserve]
        public string PublicKeyUrl { get; set; }

        /// <inheritdoc />
        [DataMember(Name="salt"), Preserve]
        public string Salt { get; set; }

        /// <inheritdoc />
        [DataMember(Name="signature"), Preserve]
        public string Signature { get; set; }

        /// <inheritdoc />
        [DataMember(Name="timestamp_seconds"), Preserve]
        public string TimestampSeconds { get; set; }

        /// <inheritdoc />
        public IDictionary<string, string> Vars => _vars ?? new Dictionary<string, string>();
        [DataMember(Name="vars"), Preserve]
        public Dictionary<string, string> _vars { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "BundleId: ", BundleId, ", ");
            output = string.Concat(output, "PlayerId: ", PlayerId, ", ");
            output = string.Concat(output, "PublicKeyUrl: ", PublicKeyUrl, ", ");
            output = string.Concat(output, "Salt: ", Salt, ", ");
            output = string.Concat(output, "Signature: ", Signature, ", ");
            output = string.Concat(output, "TimestampSeconds: ", TimestampSeconds, ", ");

            var mapString = "";
            foreach (var kvp in Vars)
            {
                mapString = string.Concat(mapString, "{" + kvp.Key + "=" + kvp.Value + "}");
            }
            output = string.Concat(output, "Vars: [" + mapString + "]");
            return output;
        }
    }

    /// <summary>
    /// Send a Google token to the server. Used with authenticate/link/unlink.
    /// </summary>
    public interface IApiAccountGoogle
    {

        /// <summary>
        /// The OAuth token received from Google to access their profile API.
        /// </summary>
        string Token { get; }

        /// <summary>
        /// Extra information that will be bundled in the session token.
        /// </summary>
        IDictionary<string, string> Vars { get; }
    }

    /// <inheritdoc />
    internal class ApiAccountGoogle : IApiAccountGoogle
    {

        /// <inheritdoc />
        [DataMember(Name="token"), Preserve]
        public string Token { get; set; }

        /// <inheritdoc />
        public IDictionary<string, string> Vars => _vars ?? new Dictionary<string, string>();
        [DataMember(Name="vars"), Preserve]
        public Dictionary<string, string> _vars { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Token: ", Token, ", ");

            var mapString = "";
            foreach (var kvp in Vars)
            {
                mapString = string.Concat(mapString, "{" + kvp.Key + "=" + kvp.Value + "}");
            }
            output = string.Concat(output, "Vars: [" + mapString + "]");
            return output;
        }
    }

    /// <summary>
    /// Send a Steam token to the server. Used with authenticate/link/unlink.
    /// </summary>
    public interface IApiAccountSteam
    {

        /// <summary>
        /// The account token received from Steam to access their profile API.
        /// </summary>
        string Token { get; }

        /// <summary>
        /// Extra information that will be bundled in the session token.
        /// </summary>
        IDictionary<string, string> Vars { get; }
    }

    /// <inheritdoc />
    internal class ApiAccountSteam : IApiAccountSteam
    {

        /// <inheritdoc />
        [DataMember(Name="token"), Preserve]
        public string Token { get; set; }

        /// <inheritdoc />
        public IDictionary<string, string> Vars => _vars ?? new Dictionary<string, string>();
        [DataMember(Name="vars"), Preserve]
        public Dictionary<string, string> _vars { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Token: ", Token, ", ");

            var mapString = "";
            foreach (var kvp in Vars)
            {
                mapString = string.Concat(mapString, "{" + kvp.Key + "=" + kvp.Value + "}");
            }
            output = string.Concat(output, "Vars: [" + mapString + "]");
            return output;
        }
    }

    /// <summary>
    /// A message sent on a channel.
    /// </summary>
    public interface IApiChannelMessage
    {

        /// <summary>
        /// The channel this message belongs to.
        /// </summary>
        string ChannelId { get; }

        /// <summary>
        /// The code representing a message type or category.
        /// </summary>
        int Code { get; }

        /// <summary>
        /// The content payload.
        /// </summary>
        string Content { get; }

        /// <summary>
        /// The UNIX time when the message was created.
        /// </summary>
        string CreateTime { get; }

        /// <summary>
        /// The ID of the group, or an empty string if this message was not sent through a group channel.
        /// </summary>
        string GroupId { get; }

        /// <summary>
        /// The unique ID of this message.
        /// </summary>
        string MessageId { get; }

        /// <summary>
        /// True if the message was persisted to the channel's history, false otherwise.
        /// </summary>
        bool Persistent { get; }

        /// <summary>
        /// The name of the chat room, or an empty string if this message was not sent through a chat room.
        /// </summary>
        string RoomName { get; }

        /// <summary>
        /// Message sender, usually a user ID.
        /// </summary>
        string SenderId { get; }

        /// <summary>
        /// The UNIX time when the message was last updated.
        /// </summary>
        string UpdateTime { get; }

        /// <summary>
        /// The ID of the first DM user, or an empty string if this message was not sent through a DM chat.
        /// </summary>
        string UserIdOne { get; }

        /// <summary>
        /// The ID of the second DM user, or an empty string if this message was not sent through a DM chat.
        /// </summary>
        string UserIdTwo { get; }

        /// <summary>
        /// The username of the message sender, if any.
        /// </summary>
        string Username { get; }
    }

    /// <inheritdoc />
    internal class ApiChannelMessage : IApiChannelMessage
    {

        /// <inheritdoc />
        [DataMember(Name="channel_id"), Preserve]
        public string ChannelId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="code"), Preserve]
        public int Code { get; set; }

        /// <inheritdoc />
        [DataMember(Name="content"), Preserve]
        public string Content { get; set; }

        /// <inheritdoc />
        [DataMember(Name="create_time"), Preserve]
        public string CreateTime { get; set; }

        /// <inheritdoc />
        [DataMember(Name="group_id"), Preserve]
        public string GroupId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="message_id"), Preserve]
        public string MessageId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="persistent"), Preserve]
        public bool Persistent { get; set; }

        /// <inheritdoc />
        [DataMember(Name="room_name"), Preserve]
        public string RoomName { get; set; }

        /// <inheritdoc />
        [DataMember(Name="sender_id"), Preserve]
        public string SenderId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="update_time"), Preserve]
        public string UpdateTime { get; set; }

        /// <inheritdoc />
        [DataMember(Name="user_id_one"), Preserve]
        public string UserIdOne { get; set; }

        /// <inheritdoc />
        [DataMember(Name="user_id_two"), Preserve]
        public string UserIdTwo { get; set; }

        /// <inheritdoc />
        [DataMember(Name="username"), Preserve]
        public string Username { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "ChannelId: ", ChannelId, ", ");
            output = string.Concat(output, "Code: ", Code, ", ");
            output = string.Concat(output, "Content: ", Content, ", ");
            output = string.Concat(output, "CreateTime: ", CreateTime, ", ");
            output = string.Concat(output, "GroupId: ", GroupId, ", ");
            output = string.Concat(output, "MessageId: ", MessageId, ", ");
            output = string.Concat(output, "Persistent: ", Persistent, ", ");
            output = string.Concat(output, "RoomName: ", RoomName, ", ");
            output = string.Concat(output, "SenderId: ", SenderId, ", ");
            output = string.Concat(output, "UpdateTime: ", UpdateTime, ", ");
            output = string.Concat(output, "UserIdOne: ", UserIdOne, ", ");
            output = string.Concat(output, "UserIdTwo: ", UserIdTwo, ", ");
            output = string.Concat(output, "Username: ", Username, ", ");
            return output;
        }
    }

    /// <summary>
    /// A list of channel messages, usually a result of a list operation.
    /// </summary>
    public interface IApiChannelMessageList
    {

        /// <summary>
        /// Cacheable cursor to list newer messages. Durable and designed to be stored, unlike next/prev cursors.
        /// </summary>
        string CacheableCursor { get; }

        /// <summary>
        /// A list of messages.
        /// </summary>
        IEnumerable<IApiChannelMessage> Messages { get; }

        /// <summary>
        /// The cursor to send when retrieving the next page, if any.
        /// </summary>
        string NextCursor { get; }

        /// <summary>
        /// The cursor to send when retrieving the previous page, if any.
        /// </summary>
        string PrevCursor { get; }
    }

    /// <inheritdoc />
    internal class ApiChannelMessageList : IApiChannelMessageList
    {

        /// <inheritdoc />
        [DataMember(Name="cacheable_cursor"), Preserve]
        public string CacheableCursor { get; set; }

        /// <inheritdoc />
        public IEnumerable<IApiChannelMessage> Messages => _messages ?? new List<ApiChannelMessage>(0);
        [DataMember(Name="messages"), Preserve]
        public List<ApiChannelMessage> _messages { get; set; }

        /// <inheritdoc />
        [DataMember(Name="next_cursor"), Preserve]
        public string NextCursor { get; set; }

        /// <inheritdoc />
        [DataMember(Name="prev_cursor"), Preserve]
        public string PrevCursor { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "CacheableCursor: ", CacheableCursor, ", ");
            output = string.Concat(output, "Messages: [", string.Join(", ", Messages), "], ");
            output = string.Concat(output, "NextCursor: ", NextCursor, ", ");
            output = string.Concat(output, "PrevCursor: ", PrevCursor, ", ");
            return output;
        }
    }

    /// <summary>
    /// Create a group with the current user as owner.
    /// </summary>
    public interface IApiCreateGroupRequest
    {

        /// <summary>
        /// A URL for an avatar image.
        /// </summary>
        string AvatarUrl { get; }

        /// <summary>
        /// A description for the group.
        /// </summary>
        string Description { get; }

        /// <summary>
        /// The language expected to be a tag which follows the BCP-47 spec.
        /// </summary>
        string LangTag { get; }

        /// <summary>
        /// Maximum number of group members.
        /// </summary>
        int MaxCount { get; }

        /// <summary>
        /// A unique name for the group.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Mark a group as open or not where only admins can accept members.
        /// </summary>
        bool Open { get; }
    }

    /// <inheritdoc />
    internal class ApiCreateGroupRequest : IApiCreateGroupRequest
    {

        /// <inheritdoc />
        [DataMember(Name="avatar_url"), Preserve]
        public string AvatarUrl { get; set; }

        /// <inheritdoc />
        [DataMember(Name="description"), Preserve]
        public string Description { get; set; }

        /// <inheritdoc />
        [DataMember(Name="lang_tag"), Preserve]
        public string LangTag { get; set; }

        /// <inheritdoc />
        [DataMember(Name="max_count"), Preserve]
        public int MaxCount { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="open"), Preserve]
        public bool Open { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "AvatarUrl: ", AvatarUrl, ", ");
            output = string.Concat(output, "Description: ", Description, ", ");
            output = string.Concat(output, "LangTag: ", LangTag, ", ");
            output = string.Concat(output, "MaxCount: ", MaxCount, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Open: ", Open, ", ");
            return output;
        }
    }

    /// <summary>
    /// Storage objects to delete.
    /// </summary>
    public interface IApiDeleteStorageObjectId
    {

        /// <summary>
        /// The collection which stores the object.
        /// </summary>
        string Collection { get; }

        /// <summary>
        /// The key of the object within the collection.
        /// </summary>
        string Key { get; }

        /// <summary>
        /// The version hash of the object.
        /// </summary>
        string Version { get; }
    }

    /// <inheritdoc />
    internal class ApiDeleteStorageObjectId : IApiDeleteStorageObjectId
    {

        /// <inheritdoc />
        [DataMember(Name="collection"), Preserve]
        public string Collection { get; set; }

        /// <inheritdoc />
        [DataMember(Name="key"), Preserve]
        public string Key { get; set; }

        /// <inheritdoc />
        [DataMember(Name="version"), Preserve]
        public string Version { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Collection: ", Collection, ", ");
            output = string.Concat(output, "Key: ", Key, ", ");
            output = string.Concat(output, "Version: ", Version, ", ");
            return output;
        }
    }

    /// <summary>
    /// Batch delete storage objects.
    /// </summary>
    public interface IApiDeleteStorageObjectsRequest
    {

        /// <summary>
        /// Batch of storage objects.
        /// </summary>
        IEnumerable<IApiDeleteStorageObjectId> ObjectIds { get; }
    }

    /// <inheritdoc />
    internal class ApiDeleteStorageObjectsRequest : IApiDeleteStorageObjectsRequest
    {

        /// <inheritdoc />
        public IEnumerable<IApiDeleteStorageObjectId> ObjectIds => _objectIds ?? new List<ApiDeleteStorageObjectId>(0);
        [DataMember(Name="object_ids"), Preserve]
        public List<ApiDeleteStorageObjectId> _objectIds { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "ObjectIds: [", string.Join(", ", ObjectIds), "], ");
            return output;
        }
    }

    /// <summary>
    /// Represents an event to be passed through the server to registered event handlers.
    /// </summary>
    public interface IApiEvent
    {

        /// <summary>
        /// True if the event came directly from a client call, false otherwise.
        /// </summary>
        bool External { get; }

        /// <summary>
        /// An event name, type, category, or identifier.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Arbitrary event property values.
        /// </summary>
        IDictionary<string, string> Properties { get; }

        /// <summary>
        /// The time when the event was triggered.
        /// </summary>
        string Timestamp { get; }
    }

    /// <inheritdoc />
    internal class ApiEvent : IApiEvent
    {

        /// <inheritdoc />
        [DataMember(Name="external"), Preserve]
        public bool External { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        public IDictionary<string, string> Properties => _properties ?? new Dictionary<string, string>();
        [DataMember(Name="properties"), Preserve]
        public Dictionary<string, string> _properties { get; set; }

        /// <inheritdoc />
        [DataMember(Name="timestamp"), Preserve]
        public string Timestamp { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "External: ", External, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");

            var mapString = "";
            foreach (var kvp in Properties)
            {
                mapString = string.Concat(mapString, "{" + kvp.Key + "=" + kvp.Value + "}");
            }
            output = string.Concat(output, "Properties: [" + mapString + "]");
            output = string.Concat(output, "Timestamp: ", Timestamp, ", ");
            return output;
        }
    }

    /// <summary>
    /// A friend of a user.
    /// </summary>
    public interface IApiFriend
    {

        /// <summary>
        /// The friend status.
        /// </summary>
        int State { get; }

        /// <summary>
        /// Time of the latest relationship update.
        /// </summary>
        string UpdateTime { get; }

        /// <summary>
        /// The user object.
        /// </summary>
        IApiUser User { get; }
    }

    /// <inheritdoc />
    internal class ApiFriend : IApiFriend
    {

        /// <inheritdoc />
        [DataMember(Name="state"), Preserve]
        public int State { get; set; }

        /// <inheritdoc />
        [DataMember(Name="update_time"), Preserve]
        public string UpdateTime { get; set; }

        /// <inheritdoc />
        public IApiUser User => _user;
        [DataMember(Name="user"), Preserve]
        public ApiUser _user { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "State: ", State, ", ");
            output = string.Concat(output, "UpdateTime: ", UpdateTime, ", ");
            output = string.Concat(output, "User: ", User, ", ");
            return output;
        }
    }

    /// <summary>
    /// A collection of zero or more friends of the user.
    /// </summary>
    public interface IApiFriendList
    {

        /// <summary>
        /// Cursor for the next page of results, if any.
        /// </summary>
        string Cursor { get; }

        /// <summary>
        /// The Friend objects.
        /// </summary>
        IEnumerable<IApiFriend> Friends { get; }
    }

    /// <inheritdoc />
    internal class ApiFriendList : IApiFriendList
    {

        /// <inheritdoc />
        [DataMember(Name="cursor"), Preserve]
        public string Cursor { get; set; }

        /// <inheritdoc />
        public IEnumerable<IApiFriend> Friends => _friends ?? new List<ApiFriend>(0);
        [DataMember(Name="friends"), Preserve]
        public List<ApiFriend> _friends { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Cursor: ", Cursor, ", ");
            output = string.Concat(output, "Friends: [", string.Join(", ", Friends), "], ");
            return output;
        }
    }

    /// <summary>
    /// A group in the server.
    /// </summary>
    public interface IApiGroup
    {

        /// <summary>
        /// A URL for an avatar image.
        /// </summary>
        string AvatarUrl { get; }

        /// <summary>
        /// The UNIX time when the group was created.
        /// </summary>
        string CreateTime { get; }

        /// <summary>
        /// The id of the user who created the group.
        /// </summary>
        string CreatorId { get; }

        /// <summary>
        /// A description for the group.
        /// </summary>
        string Description { get; }

        /// <summary>
        /// The current count of all members in the group.
        /// </summary>
        int EdgeCount { get; }

        /// <summary>
        /// The id of a group.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// The language expected to be a tag which follows the BCP-47 spec.
        /// </summary>
        string LangTag { get; }

        /// <summary>
        /// The maximum number of members allowed.
        /// </summary>
        int MaxCount { get; }

        /// <summary>
        /// Additional information stored as a JSON object.
        /// </summary>
        string Metadata { get; }

        /// <summary>
        /// The unique name of the group.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Anyone can join open groups, otherwise only admins can accept members.
        /// </summary>
        bool Open { get; }

        /// <summary>
        /// The UNIX time when the group was last updated.
        /// </summary>
        string UpdateTime { get; }
    }

    /// <inheritdoc />
    internal class ApiGroup : IApiGroup
    {

        /// <inheritdoc />
        [DataMember(Name="avatar_url"), Preserve]
        public string AvatarUrl { get; set; }

        /// <inheritdoc />
        [DataMember(Name="create_time"), Preserve]
        public string CreateTime { get; set; }

        /// <inheritdoc />
        [DataMember(Name="creator_id"), Preserve]
        public string CreatorId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="description"), Preserve]
        public string Description { get; set; }

        /// <inheritdoc />
        [DataMember(Name="edge_count"), Preserve]
        public int EdgeCount { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="lang_tag"), Preserve]
        public string LangTag { get; set; }

        /// <inheritdoc />
        [DataMember(Name="max_count"), Preserve]
        public int MaxCount { get; set; }

        /// <inheritdoc />
        [DataMember(Name="metadata"), Preserve]
        public string Metadata { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="open"), Preserve]
        public bool Open { get; set; }

        /// <inheritdoc />
        [DataMember(Name="update_time"), Preserve]
        public string UpdateTime { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "AvatarUrl: ", AvatarUrl, ", ");
            output = string.Concat(output, "CreateTime: ", CreateTime, ", ");
            output = string.Concat(output, "CreatorId: ", CreatorId, ", ");
            output = string.Concat(output, "Description: ", Description, ", ");
            output = string.Concat(output, "EdgeCount: ", EdgeCount, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "LangTag: ", LangTag, ", ");
            output = string.Concat(output, "MaxCount: ", MaxCount, ", ");
            output = string.Concat(output, "Metadata: ", Metadata, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Open: ", Open, ", ");
            output = string.Concat(output, "UpdateTime: ", UpdateTime, ", ");
            return output;
        }
    }

    /// <summary>
    /// One or more groups returned from a listing operation.
    /// </summary>
    public interface IApiGroupList
    {

        /// <summary>
        /// A cursor used to get the next page.
        /// </summary>
        string Cursor { get; }

        /// <summary>
        /// One or more groups.
        /// </summary>
        IEnumerable<IApiGroup> Groups { get; }
    }

    /// <inheritdoc />
    internal class ApiGroupList : IApiGroupList
    {

        /// <inheritdoc />
        [DataMember(Name="cursor"), Preserve]
        public string Cursor { get; set; }

        /// <inheritdoc />
        public IEnumerable<IApiGroup> Groups => _groups ?? new List<ApiGroup>(0);
        [DataMember(Name="groups"), Preserve]
        public List<ApiGroup> _groups { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Cursor: ", Cursor, ", ");
            output = string.Concat(output, "Groups: [", string.Join(", ", Groups), "], ");
            return output;
        }
    }

    /// <summary>
    /// A list of users belonging to a group, along with their role.
    /// </summary>
    public interface IApiGroupUserList
    {

        /// <summary>
        /// Cursor for the next page of results, if any.
        /// </summary>
        string Cursor { get; }

        /// <summary>
        /// User-role pairs for a group.
        /// </summary>
        IEnumerable<IGroupUserListGroupUser> GroupUsers { get; }
    }

    /// <inheritdoc />
    internal class ApiGroupUserList : IApiGroupUserList
    {

        /// <inheritdoc />
        [DataMember(Name="cursor"), Preserve]
        public string Cursor { get; set; }

        /// <inheritdoc />
        public IEnumerable<IGroupUserListGroupUser> GroupUsers => _groupUsers ?? new List<GroupUserListGroupUser>(0);
        [DataMember(Name="group_users"), Preserve]
        public List<GroupUserListGroupUser> _groupUsers { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Cursor: ", Cursor, ", ");
            output = string.Concat(output, "GroupUsers: [", string.Join(", ", GroupUsers), "], ");
            return output;
        }
    }

    /// <summary>
    /// Represents a complete leaderboard record with all scores and associated metadata.
    /// </summary>
    public interface IApiLeaderboardRecord
    {

        /// <summary>
        /// The UNIX time when the leaderboard record was created.
        /// </summary>
        string CreateTime { get; }

        /// <summary>
        /// The UNIX time when the leaderboard record expires.
        /// </summary>
        string ExpiryTime { get; }

        /// <summary>
        /// The ID of the leaderboard this score belongs to.
        /// </summary>
        string LeaderboardId { get; }

        /// <summary>
        /// The maximum number of score updates allowed by the owner.
        /// </summary>
        int MaxNumScore { get; }

        /// <summary>
        /// Metadata.
        /// </summary>
        string Metadata { get; }

        /// <summary>
        /// The number of submissions to this score record.
        /// </summary>
        int NumScore { get; }

        /// <summary>
        /// The ID of the score owner, usually a user or group.
        /// </summary>
        string OwnerId { get; }

        /// <summary>
        /// The rank of this record.
        /// </summary>
        string Rank { get; }

        /// <summary>
        /// The score value.
        /// </summary>
        string Score { get; }

        /// <summary>
        /// An optional subscore value.
        /// </summary>
        string Subscore { get; }

        /// <summary>
        /// The UNIX time when the leaderboard record was updated.
        /// </summary>
        string UpdateTime { get; }

        /// <summary>
        /// The username of the score owner, if the owner is a user.
        /// </summary>
        string Username { get; }
    }

    /// <inheritdoc />
    internal class ApiLeaderboardRecord : IApiLeaderboardRecord
    {

        /// <inheritdoc />
        [DataMember(Name="create_time"), Preserve]
        public string CreateTime { get; set; }

        /// <inheritdoc />
        [DataMember(Name="expiry_time"), Preserve]
        public string ExpiryTime { get; set; }

        /// <inheritdoc />
        [DataMember(Name="leaderboard_id"), Preserve]
        public string LeaderboardId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="max_num_score"), Preserve]
        public int MaxNumScore { get; set; }

        /// <inheritdoc />
        [DataMember(Name="metadata"), Preserve]
        public string Metadata { get; set; }

        /// <inheritdoc />
        [DataMember(Name="num_score"), Preserve]
        public int NumScore { get; set; }

        /// <inheritdoc />
        [DataMember(Name="owner_id"), Preserve]
        public string OwnerId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="rank"), Preserve]
        public string Rank { get; set; }

        /// <inheritdoc />
        [DataMember(Name="score"), Preserve]
        public string Score { get; set; }

        /// <inheritdoc />
        [DataMember(Name="subscore"), Preserve]
        public string Subscore { get; set; }

        /// <inheritdoc />
        [DataMember(Name="update_time"), Preserve]
        public string UpdateTime { get; set; }

        /// <inheritdoc />
        [DataMember(Name="username"), Preserve]
        public string Username { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "CreateTime: ", CreateTime, ", ");
            output = string.Concat(output, "ExpiryTime: ", ExpiryTime, ", ");
            output = string.Concat(output, "LeaderboardId: ", LeaderboardId, ", ");
            output = string.Concat(output, "MaxNumScore: ", MaxNumScore, ", ");
            output = string.Concat(output, "Metadata: ", Metadata, ", ");
            output = string.Concat(output, "NumScore: ", NumScore, ", ");
            output = string.Concat(output, "OwnerId: ", OwnerId, ", ");
            output = string.Concat(output, "Rank: ", Rank, ", ");
            output = string.Concat(output, "Score: ", Score, ", ");
            output = string.Concat(output, "Subscore: ", Subscore, ", ");
            output = string.Concat(output, "UpdateTime: ", UpdateTime, ", ");
            output = string.Concat(output, "Username: ", Username, ", ");
            return output;
        }
    }

    /// <summary>
    /// A set of leaderboard records, may be part of a leaderboard records page or a batch of individual records.
    /// </summary>
    public interface IApiLeaderboardRecordList
    {

        /// <summary>
        /// The cursor to send when retrieving the next page, if any.
        /// </summary>
        string NextCursor { get; }

        /// <summary>
        /// A batched set of leaderboard records belonging to specified owners.
        /// </summary>
        IEnumerable<IApiLeaderboardRecord> OwnerRecords { get; }

        /// <summary>
        /// The cursor to send when retrieving the previous page, if any.
        /// </summary>
        string PrevCursor { get; }

        /// <summary>
        /// A list of leaderboard records.
        /// </summary>
        IEnumerable<IApiLeaderboardRecord> Records { get; }
    }

    /// <inheritdoc />
    internal class ApiLeaderboardRecordList : IApiLeaderboardRecordList
    {

        /// <inheritdoc />
        [DataMember(Name="next_cursor"), Preserve]
        public string NextCursor { get; set; }

        /// <inheritdoc />
        public IEnumerable<IApiLeaderboardRecord> OwnerRecords => _ownerRecords ?? new List<ApiLeaderboardRecord>(0);
        [DataMember(Name="owner_records"), Preserve]
        public List<ApiLeaderboardRecord> _ownerRecords { get; set; }

        /// <inheritdoc />
        [DataMember(Name="prev_cursor"), Preserve]
        public string PrevCursor { get; set; }

        /// <inheritdoc />
        public IEnumerable<IApiLeaderboardRecord> Records => _records ?? new List<ApiLeaderboardRecord>(0);
        [DataMember(Name="records"), Preserve]
        public List<ApiLeaderboardRecord> _records { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "NextCursor: ", NextCursor, ", ");
            output = string.Concat(output, "OwnerRecords: [", string.Join(", ", OwnerRecords), "], ");
            output = string.Concat(output, "PrevCursor: ", PrevCursor, ", ");
            output = string.Concat(output, "Records: [", string.Join(", ", Records), "], ");
            return output;
        }
    }

    /// <summary>
    /// Link Steam to the current user's account.
    /// </summary>
    public interface IApiLinkSteamRequest
    {

        /// <summary>
        /// The Facebook account details.
        /// </summary>
        IApiAccountSteam Account { get; }

        /// <summary>
        /// Import Steam friends for the user.
        /// </summary>
        bool Sync { get; }
    }

    /// <inheritdoc />
    internal class ApiLinkSteamRequest : IApiLinkSteamRequest
    {

        /// <inheritdoc />
        public IApiAccountSteam Account => _account;
        [DataMember(Name="account"), Preserve]
        public ApiAccountSteam _account { get; set; }

        /// <inheritdoc />
        [DataMember(Name="sync"), Preserve]
        public bool Sync { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Account: ", Account, ", ");
            output = string.Concat(output, "Sync: ", Sync, ", ");
            return output;
        }
    }

    /// <summary>
    /// Represents a realtime match.
    /// </summary>
    public interface IApiMatch
    {

        /// <summary>
        /// True if it's an server-managed authoritative match, false otherwise.
        /// </summary>
        bool Authoritative { get; }

        /// <summary>
        /// Handler name
        /// </summary>
        string HandlerName { get; }

        /// <summary>
        /// Match label, if any.
        /// </summary>
        string Label { get; }

        /// <summary>
        /// The ID of the match, can be used to join.
        /// </summary>
        string MatchId { get; }

        /// <summary>
        /// Current number of users in the match.
        /// </summary>
        int Size { get; }

        /// <summary>
        /// Tick Rate
        /// </summary>
        int TickRate { get; }
    }

    /// <inheritdoc />
    internal class ApiMatch : IApiMatch
    {

        /// <inheritdoc />
        [DataMember(Name="authoritative"), Preserve]
        public bool Authoritative { get; set; }

        /// <inheritdoc />
        [DataMember(Name="handler_name"), Preserve]
        public string HandlerName { get; set; }

        /// <inheritdoc />
        [DataMember(Name="label"), Preserve]
        public string Label { get; set; }

        /// <inheritdoc />
        [DataMember(Name="match_id"), Preserve]
        public string MatchId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="size"), Preserve]
        public int Size { get; set; }

        /// <inheritdoc />
        [DataMember(Name="tick_rate"), Preserve]
        public int TickRate { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Authoritative: ", Authoritative, ", ");
            output = string.Concat(output, "HandlerName: ", HandlerName, ", ");
            output = string.Concat(output, "Label: ", Label, ", ");
            output = string.Concat(output, "MatchId: ", MatchId, ", ");
            output = string.Concat(output, "Size: ", Size, ", ");
            output = string.Concat(output, "TickRate: ", TickRate, ", ");
            return output;
        }
    }

    /// <summary>
    /// A list of realtime matches.
    /// </summary>
    public interface IApiMatchList
    {

        /// <summary>
        /// A number of matches corresponding to a list operation.
        /// </summary>
        IEnumerable<IApiMatch> Matches { get; }
    }

    /// <inheritdoc />
    internal class ApiMatchList : IApiMatchList
    {

        /// <inheritdoc />
        public IEnumerable<IApiMatch> Matches => _matches ?? new List<ApiMatch>(0);
        [DataMember(Name="matches"), Preserve]
        public List<ApiMatch> _matches { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Matches: [", string.Join(", ", Matches), "], ");
            return output;
        }
    }

    /// <summary>
    /// A notification in the server.
    /// </summary>
    public interface IApiNotification
    {

        /// <summary>
        /// Category code for this notification.
        /// </summary>
        int Code { get; }

        /// <summary>
        /// Content of the notification in JSON.
        /// </summary>
        string Content { get; }

        /// <summary>
        /// The UNIX time when the notification was created.
        /// </summary>
        string CreateTime { get; }

        /// <summary>
        /// ID of the Notification.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// True if this notification was persisted to the database.
        /// </summary>
        bool Persistent { get; }

        /// <summary>
        /// ID of the sender, if a user. Otherwise 'null'.
        /// </summary>
        string SenderId { get; }

        /// <summary>
        /// Subject of the notification.
        /// </summary>
        string Subject { get; }
    }

    /// <inheritdoc />
    internal class ApiNotification : IApiNotification
    {

        /// <inheritdoc />
        [DataMember(Name="code"), Preserve]
        public int Code { get; set; }

        /// <inheritdoc />
        [DataMember(Name="content"), Preserve]
        public string Content { get; set; }

        /// <inheritdoc />
        [DataMember(Name="create_time"), Preserve]
        public string CreateTime { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="persistent"), Preserve]
        public bool Persistent { get; set; }

        /// <inheritdoc />
        [DataMember(Name="sender_id"), Preserve]
        public string SenderId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="subject"), Preserve]
        public string Subject { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Code: ", Code, ", ");
            output = string.Concat(output, "Content: ", Content, ", ");
            output = string.Concat(output, "CreateTime: ", CreateTime, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Persistent: ", Persistent, ", ");
            output = string.Concat(output, "SenderId: ", SenderId, ", ");
            output = string.Concat(output, "Subject: ", Subject, ", ");
            return output;
        }
    }

    /// <summary>
    /// A collection of zero or more notifications.
    /// </summary>
    public interface IApiNotificationList
    {

        /// <summary>
        /// Use this cursor to paginate notifications. Cache this to catch up to new notifications.
        /// </summary>
        string CacheableCursor { get; }

        /// <summary>
        /// Collection of notifications.
        /// </summary>
        IEnumerable<IApiNotification> Notifications { get; }
    }

    /// <inheritdoc />
    internal class ApiNotificationList : IApiNotificationList
    {

        /// <inheritdoc />
        [DataMember(Name="cacheable_cursor"), Preserve]
        public string CacheableCursor { get; set; }

        /// <inheritdoc />
        public IEnumerable<IApiNotification> Notifications => _notifications ?? new List<ApiNotification>(0);
        [DataMember(Name="notifications"), Preserve]
        public List<ApiNotification> _notifications { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "CacheableCursor: ", CacheableCursor, ", ");
            output = string.Concat(output, "Notifications: [", string.Join(", ", Notifications), "], ");
            return output;
        }
    }

    /// <summary>
    /// Storage objects to get.
    /// </summary>
    public interface IApiReadStorageObjectId
    {

        /// <summary>
        /// The collection which stores the object.
        /// </summary>
        string Collection { get; }

        /// <summary>
        /// The key of the object within the collection.
        /// </summary>
        string Key { get; }

        /// <summary>
        /// The user owner of the object.
        /// </summary>
        string UserId { get; }
    }

    /// <inheritdoc />
    internal class ApiReadStorageObjectId : IApiReadStorageObjectId
    {

        /// <inheritdoc />
        [DataMember(Name="collection"), Preserve]
        public string Collection { get; set; }

        /// <inheritdoc />
        [DataMember(Name="key"), Preserve]
        public string Key { get; set; }

        /// <inheritdoc />
        [DataMember(Name="user_id"), Preserve]
        public string UserId { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Collection: ", Collection, ", ");
            output = string.Concat(output, "Key: ", Key, ", ");
            output = string.Concat(output, "UserId: ", UserId, ", ");
            return output;
        }
    }

    /// <summary>
    /// Batch get storage objects.
    /// </summary>
    public interface IApiReadStorageObjectsRequest
    {

        /// <summary>
        /// Batch of storage objects.
        /// </summary>
        IEnumerable<IApiReadStorageObjectId> ObjectIds { get; }
    }

    /// <inheritdoc />
    internal class ApiReadStorageObjectsRequest : IApiReadStorageObjectsRequest
    {

        /// <inheritdoc />
        public IEnumerable<IApiReadStorageObjectId> ObjectIds => _objectIds ?? new List<ApiReadStorageObjectId>(0);
        [DataMember(Name="object_ids"), Preserve]
        public List<ApiReadStorageObjectId> _objectIds { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "ObjectIds: [", string.Join(", ", ObjectIds), "], ");
            return output;
        }
    }

    /// <summary>
    /// Execute an Lua function on the server.
    /// </summary>
    public interface IApiRpc
    {

        /// <summary>
        /// The authentication key used when executed as a non-client HTTP request.
        /// </summary>
        string HttpKey { get; }

        /// <summary>
        /// The identifier of the function.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// The payload of the function which must be a JSON object.
        /// </summary>
        string Payload { get; }
    }

    /// <inheritdoc />
    internal class ApiRpc : IApiRpc
    {

        /// <inheritdoc />
        [DataMember(Name="http_key"), Preserve]
        public string HttpKey { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="payload"), Preserve]
        public string Payload { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "HttpKey: ", HttpKey, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Payload: ", Payload, ", ");
            return output;
        }
    }

    /// <summary>
    /// A user's session used to authenticate messages.
    /// </summary>
    public interface IApiSession
    {

        /// <summary>
        /// True if the corresponding account was just created, false otherwise.
        /// </summary>
        bool Created { get; }

        /// <summary>
        /// Refresh token that can be used for session token renewal.
        /// </summary>
        string RefreshToken { get; }

        /// <summary>
        /// Authentication credentials.
        /// </summary>
        string Token { get; }
    }

    /// <inheritdoc />
    internal class ApiSession : IApiSession
    {

        /// <inheritdoc />
        [DataMember(Name="created"), Preserve]
        public bool Created { get; set; }

        /// <inheritdoc />
        [DataMember(Name="refresh_token"), Preserve]
        public string RefreshToken { get; set; }

        /// <inheritdoc />
        [DataMember(Name="token"), Preserve]
        public string Token { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Created: ", Created, ", ");
            output = string.Concat(output, "RefreshToken: ", RefreshToken, ", ");
            output = string.Concat(output, "Token: ", Token, ", ");
            return output;
        }
    }

    /// <summary>
    /// Log out a session, invalidate a refresh token, or log out all sessions/refresh tokens for a user.
    /// </summary>
    public interface IApiSessionLogoutRequest
    {

        /// <summary>
        /// Refresh token to invalidate.
        /// </summary>
        string RefreshToken { get; }

        /// <summary>
        /// Session token to log out.
        /// </summary>
        string Token { get; }
    }

    /// <inheritdoc />
    internal class ApiSessionLogoutRequest : IApiSessionLogoutRequest
    {

        /// <inheritdoc />
        [DataMember(Name="refresh_token"), Preserve]
        public string RefreshToken { get; set; }

        /// <inheritdoc />
        [DataMember(Name="token"), Preserve]
        public string Token { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "RefreshToken: ", RefreshToken, ", ");
            output = string.Concat(output, "Token: ", Token, ", ");
            return output;
        }
    }

    /// <summary>
    /// Authenticate against the server with a refresh token.
    /// </summary>
    public interface IApiSessionRefreshRequest
    {

        /// <summary>
        /// Refresh token.
        /// </summary>
        string Token { get; }

        /// <summary>
        /// Extra information that will be bundled in the session token.
        /// </summary>
        IDictionary<string, string> Vars { get; }
    }

    /// <inheritdoc />
    internal class ApiSessionRefreshRequest : IApiSessionRefreshRequest
    {

        /// <inheritdoc />
        [DataMember(Name="token"), Preserve]
        public string Token { get; set; }

        /// <inheritdoc />
        public IDictionary<string, string> Vars => _vars ?? new Dictionary<string, string>();
        [DataMember(Name="vars"), Preserve]
        public Dictionary<string, string> _vars { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Token: ", Token, ", ");

            var mapString = "";
            foreach (var kvp in Vars)
            {
                mapString = string.Concat(mapString, "{" + kvp.Key + "=" + kvp.Value + "}");
            }
            output = string.Concat(output, "Vars: [" + mapString + "]");
            return output;
        }
    }

    /// <summary>
    /// An object within the storage engine.
    /// </summary>
    public interface IApiStorageObject
    {

        /// <summary>
        /// The collection which stores the object.
        /// </summary>
        string Collection { get; }

        /// <summary>
        /// The UNIX time when the object was created.
        /// </summary>
        string CreateTime { get; }

        /// <summary>
        /// The key of the object within the collection.
        /// </summary>
        string Key { get; }

        /// <summary>
        /// The read access permissions for the object.
        /// </summary>
        int PermissionRead { get; }

        /// <summary>
        /// The write access permissions for the object.
        /// </summary>
        int PermissionWrite { get; }

        /// <summary>
        /// The UNIX time when the object was last updated.
        /// </summary>
        string UpdateTime { get; }

        /// <summary>
        /// The user owner of the object.
        /// </summary>
        string UserId { get; }

        /// <summary>
        /// The value of the object.
        /// </summary>
        string Value { get; }

        /// <summary>
        /// The version hash of the object.
        /// </summary>
        string Version { get; }
    }

    /// <inheritdoc />
    internal class ApiStorageObject : IApiStorageObject
    {

        /// <inheritdoc />
        [DataMember(Name="collection"), Preserve]
        public string Collection { get; set; }

        /// <inheritdoc />
        [DataMember(Name="create_time"), Preserve]
        public string CreateTime { get; set; }

        /// <inheritdoc />
        [DataMember(Name="key"), Preserve]
        public string Key { get; set; }

        /// <inheritdoc />
        [DataMember(Name="permission_read"), Preserve]
        public int PermissionRead { get; set; }

        /// <inheritdoc />
        [DataMember(Name="permission_write"), Preserve]
        public int PermissionWrite { get; set; }

        /// <inheritdoc />
        [DataMember(Name="update_time"), Preserve]
        public string UpdateTime { get; set; }

        /// <inheritdoc />
        [DataMember(Name="user_id"), Preserve]
        public string UserId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        /// <inheritdoc />
        [DataMember(Name="version"), Preserve]
        public string Version { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Collection: ", Collection, ", ");
            output = string.Concat(output, "CreateTime: ", CreateTime, ", ");
            output = string.Concat(output, "Key: ", Key, ", ");
            output = string.Concat(output, "PermissionRead: ", PermissionRead, ", ");
            output = string.Concat(output, "PermissionWrite: ", PermissionWrite, ", ");
            output = string.Concat(output, "UpdateTime: ", UpdateTime, ", ");
            output = string.Concat(output, "UserId: ", UserId, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            output = string.Concat(output, "Version: ", Version, ", ");
            return output;
        }
    }

    /// <summary>
    /// A storage acknowledgement.
    /// </summary>
    public interface IApiStorageObjectAck
    {

        /// <summary>
        /// The collection which stores the object.
        /// </summary>
        string Collection { get; }

        /// <summary>
        /// The key of the object within the collection.
        /// </summary>
        string Key { get; }

        /// <summary>
        /// The owner of the object.
        /// </summary>
        string UserId { get; }

        /// <summary>
        /// The version hash of the object.
        /// </summary>
        string Version { get; }
    }

    /// <inheritdoc />
    internal class ApiStorageObjectAck : IApiStorageObjectAck
    {

        /// <inheritdoc />
        [DataMember(Name="collection"), Preserve]
        public string Collection { get; set; }

        /// <inheritdoc />
        [DataMember(Name="key"), Preserve]
        public string Key { get; set; }

        /// <inheritdoc />
        [DataMember(Name="user_id"), Preserve]
        public string UserId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="version"), Preserve]
        public string Version { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Collection: ", Collection, ", ");
            output = string.Concat(output, "Key: ", Key, ", ");
            output = string.Concat(output, "UserId: ", UserId, ", ");
            output = string.Concat(output, "Version: ", Version, ", ");
            return output;
        }
    }

    /// <summary>
    /// Batch of acknowledgements for the storage object write.
    /// </summary>
    public interface IApiStorageObjectAcks
    {

        /// <summary>
        /// Batch of storage write acknowledgements.
        /// </summary>
        IEnumerable<IApiStorageObjectAck> Acks { get; }
    }

    /// <inheritdoc />
    internal class ApiStorageObjectAcks : IApiStorageObjectAcks
    {

        /// <inheritdoc />
        public IEnumerable<IApiStorageObjectAck> Acks => _acks ?? new List<ApiStorageObjectAck>(0);
        [DataMember(Name="acks"), Preserve]
        public List<ApiStorageObjectAck> _acks { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Acks: [", string.Join(", ", Acks), "], ");
            return output;
        }
    }

    /// <summary>
    /// List of storage objects.
    /// </summary>
    public interface IApiStorageObjectList
    {

        /// <summary>
        /// The cursor for the next page of results, if any.
        /// </summary>
        string Cursor { get; }

        /// <summary>
        /// The list of storage objects.
        /// </summary>
        IEnumerable<IApiStorageObject> Objects { get; }
    }

    /// <inheritdoc />
    internal class ApiStorageObjectList : IApiStorageObjectList
    {

        /// <inheritdoc />
        [DataMember(Name="cursor"), Preserve]
        public string Cursor { get; set; }

        /// <inheritdoc />
        public IEnumerable<IApiStorageObject> Objects => _objects ?? new List<ApiStorageObject>(0);
        [DataMember(Name="objects"), Preserve]
        public List<ApiStorageObject> _objects { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Cursor: ", Cursor, ", ");
            output = string.Concat(output, "Objects: [", string.Join(", ", Objects), "], ");
            return output;
        }
    }

    /// <summary>
    /// Batch of storage objects.
    /// </summary>
    public interface IApiStorageObjects
    {

        /// <summary>
        /// The batch of storage objects.
        /// </summary>
        IEnumerable<IApiStorageObject> Objects { get; }
    }

    /// <inheritdoc />
    internal class ApiStorageObjects : IApiStorageObjects
    {

        /// <inheritdoc />
        public IEnumerable<IApiStorageObject> Objects => _objects ?? new List<ApiStorageObject>(0);
        [DataMember(Name="objects"), Preserve]
        public List<ApiStorageObject> _objects { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Objects: [", string.Join(", ", Objects), "], ");
            return output;
        }
    }

    /// <summary>
    /// A tournament on the server.
    /// </summary>
    public interface IApiTournament
    {

        /// <summary>
        /// True if the tournament is active and can enter. A computed value.
        /// </summary>
        bool CanEnter { get; }

        /// <summary>
        /// The category of the tournament. e.g. "vip" could be category 1.
        /// </summary>
        int Category { get; }

        /// <summary>
        /// The UNIX time when the tournament was created.
        /// </summary>
        string CreateTime { get; }

        /// <summary>
        /// The description of the tournament. May be blank.
        /// </summary>
        string Description { get; }

        /// <summary>
        /// Duration of the tournament in seconds.
        /// </summary>
        int Duration { get; }

        /// <summary>
        /// The UNIX time when the tournament stops being active until next reset. A computed value.
        /// </summary>
        int EndActive { get; }

        /// <summary>
        /// The UNIX time when the tournament will be stopped.
        /// </summary>
        string EndTime { get; }

        /// <summary>
        /// The ID of the tournament.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// The maximum score updates allowed per player for the current tournament.
        /// </summary>
        int MaxNumScore { get; }

        /// <summary>
        /// The maximum number of players for the tournament.
        /// </summary>
        int MaxSize { get; }

        /// <summary>
        /// Additional information stored as a JSON object.
        /// </summary>
        string Metadata { get; }

        /// <summary>
        /// The UNIX time when the tournament is next playable. A computed value.
        /// </summary>
        int NextReset { get; }

        /// <summary>
        /// The current number of players in the tournament.
        /// </summary>
        int Size { get; }

        /// <summary>
        /// ASC or DESC sort mode of scores in the tournament.
        /// </summary>
        int SortOrder { get; }

        /// <summary>
        /// The UNIX time when the tournament start being active. A computed value.
        /// </summary>
        int StartActive { get; }

        /// <summary>
        /// The UNIX time when the tournament will start.
        /// </summary>
        string StartTime { get; }

        /// <summary>
        /// The title for the tournament.
        /// </summary>
        string Title { get; }
    }

    /// <inheritdoc />
    internal class ApiTournament : IApiTournament
    {

        /// <inheritdoc />
        [DataMember(Name="can_enter"), Preserve]
        public bool CanEnter { get; set; }

        /// <inheritdoc />
        [DataMember(Name="category"), Preserve]
        public int Category { get; set; }

        /// <inheritdoc />
        [DataMember(Name="create_time"), Preserve]
        public string CreateTime { get; set; }

        /// <inheritdoc />
        [DataMember(Name="description"), Preserve]
        public string Description { get; set; }

        /// <inheritdoc />
        [DataMember(Name="duration"), Preserve]
        public int Duration { get; set; }

        /// <inheritdoc />
        [DataMember(Name="end_active"), Preserve]
        public int EndActive { get; set; }

        /// <inheritdoc />
        [DataMember(Name="end_time"), Preserve]
        public string EndTime { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="max_num_score"), Preserve]
        public int MaxNumScore { get; set; }

        /// <inheritdoc />
        [DataMember(Name="max_size"), Preserve]
        public int MaxSize { get; set; }

        /// <inheritdoc />
        [DataMember(Name="metadata"), Preserve]
        public string Metadata { get; set; }

        /// <inheritdoc />
        [DataMember(Name="next_reset"), Preserve]
        public int NextReset { get; set; }

        /// <inheritdoc />
        [DataMember(Name="size"), Preserve]
        public int Size { get; set; }

        /// <inheritdoc />
        [DataMember(Name="sort_order"), Preserve]
        public int SortOrder { get; set; }

        /// <inheritdoc />
        [DataMember(Name="start_active"), Preserve]
        public int StartActive { get; set; }

        /// <inheritdoc />
        [DataMember(Name="start_time"), Preserve]
        public string StartTime { get; set; }

        /// <inheritdoc />
        [DataMember(Name="title"), Preserve]
        public string Title { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "CanEnter: ", CanEnter, ", ");
            output = string.Concat(output, "Category: ", Category, ", ");
            output = string.Concat(output, "CreateTime: ", CreateTime, ", ");
            output = string.Concat(output, "Description: ", Description, ", ");
            output = string.Concat(output, "Duration: ", Duration, ", ");
            output = string.Concat(output, "EndActive: ", EndActive, ", ");
            output = string.Concat(output, "EndTime: ", EndTime, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "MaxNumScore: ", MaxNumScore, ", ");
            output = string.Concat(output, "MaxSize: ", MaxSize, ", ");
            output = string.Concat(output, "Metadata: ", Metadata, ", ");
            output = string.Concat(output, "NextReset: ", NextReset, ", ");
            output = string.Concat(output, "Size: ", Size, ", ");
            output = string.Concat(output, "SortOrder: ", SortOrder, ", ");
            output = string.Concat(output, "StartActive: ", StartActive, ", ");
            output = string.Concat(output, "StartTime: ", StartTime, ", ");
            output = string.Concat(output, "Title: ", Title, ", ");
            return output;
        }
    }

    /// <summary>
    /// A list of tournaments.
    /// </summary>
    public interface IApiTournamentList
    {

        /// <summary>
        /// A pagination cursor (optional).
        /// </summary>
        string Cursor { get; }

        /// <summary>
        /// The list of tournaments returned.
        /// </summary>
        IEnumerable<IApiTournament> Tournaments { get; }
    }

    /// <inheritdoc />
    internal class ApiTournamentList : IApiTournamentList
    {

        /// <inheritdoc />
        [DataMember(Name="cursor"), Preserve]
        public string Cursor { get; set; }

        /// <inheritdoc />
        public IEnumerable<IApiTournament> Tournaments => _tournaments ?? new List<ApiTournament>(0);
        [DataMember(Name="tournaments"), Preserve]
        public List<ApiTournament> _tournaments { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Cursor: ", Cursor, ", ");
            output = string.Concat(output, "Tournaments: [", string.Join(", ", Tournaments), "], ");
            return output;
        }
    }

    /// <summary>
    /// A set of tournament records which may be part of a tournament records page or a batch of individual records.
    /// </summary>
    public interface IApiTournamentRecordList
    {

        /// <summary>
        /// The cursor to send when retireving the next page (optional).
        /// </summary>
        string NextCursor { get; }

        /// <summary>
        /// A batched set of tournament records belonging to specified owners.
        /// </summary>
        IEnumerable<IApiLeaderboardRecord> OwnerRecords { get; }

        /// <summary>
        /// The cursor to send when retrieving the previous page (optional).
        /// </summary>
        string PrevCursor { get; }

        /// <summary>
        /// A list of tournament records.
        /// </summary>
        IEnumerable<IApiLeaderboardRecord> Records { get; }
    }

    /// <inheritdoc />
    internal class ApiTournamentRecordList : IApiTournamentRecordList
    {

        /// <inheritdoc />
        [DataMember(Name="next_cursor"), Preserve]
        public string NextCursor { get; set; }

        /// <inheritdoc />
        public IEnumerable<IApiLeaderboardRecord> OwnerRecords => _ownerRecords ?? new List<ApiLeaderboardRecord>(0);
        [DataMember(Name="owner_records"), Preserve]
        public List<ApiLeaderboardRecord> _ownerRecords { get; set; }

        /// <inheritdoc />
        [DataMember(Name="prev_cursor"), Preserve]
        public string PrevCursor { get; set; }

        /// <inheritdoc />
        public IEnumerable<IApiLeaderboardRecord> Records => _records ?? new List<ApiLeaderboardRecord>(0);
        [DataMember(Name="records"), Preserve]
        public List<ApiLeaderboardRecord> _records { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "NextCursor: ", NextCursor, ", ");
            output = string.Concat(output, "OwnerRecords: [", string.Join(", ", OwnerRecords), "], ");
            output = string.Concat(output, "PrevCursor: ", PrevCursor, ", ");
            output = string.Concat(output, "Records: [", string.Join(", ", Records), "], ");
            return output;
        }
    }

    /// <summary>
    /// Update a user's account details.
    /// </summary>
    public interface IApiUpdateAccountRequest
    {

        /// <summary>
        /// A URL for an avatar image.
        /// </summary>
        string AvatarUrl { get; }

        /// <summary>
        /// The display name of the user.
        /// </summary>
        string DisplayName { get; }

        /// <summary>
        /// The language expected to be a tag which follows the BCP-47 spec.
        /// </summary>
        string LangTag { get; }

        /// <summary>
        /// The location set by the user.
        /// </summary>
        string Location { get; }

        /// <summary>
        /// The timezone set by the user.
        /// </summary>
        string Timezone { get; }

        /// <summary>
        /// The username of the user's account.
        /// </summary>
        string Username { get; }
    }

    /// <inheritdoc />
    internal class ApiUpdateAccountRequest : IApiUpdateAccountRequest
    {

        /// <inheritdoc />
        [DataMember(Name="avatar_url"), Preserve]
        public string AvatarUrl { get; set; }

        /// <inheritdoc />
        [DataMember(Name="display_name"), Preserve]
        public string DisplayName { get; set; }

        /// <inheritdoc />
        [DataMember(Name="lang_tag"), Preserve]
        public string LangTag { get; set; }

        /// <inheritdoc />
        [DataMember(Name="location"), Preserve]
        public string Location { get; set; }

        /// <inheritdoc />
        [DataMember(Name="timezone"), Preserve]
        public string Timezone { get; set; }

        /// <inheritdoc />
        [DataMember(Name="username"), Preserve]
        public string Username { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "AvatarUrl: ", AvatarUrl, ", ");
            output = string.Concat(output, "DisplayName: ", DisplayName, ", ");
            output = string.Concat(output, "LangTag: ", LangTag, ", ");
            output = string.Concat(output, "Location: ", Location, ", ");
            output = string.Concat(output, "Timezone: ", Timezone, ", ");
            output = string.Concat(output, "Username: ", Username, ", ");
            return output;
        }
    }

    /// <summary>
    /// Update fields in a given group.
    /// </summary>
    public interface IApiUpdateGroupRequest
    {

        /// <summary>
        /// Avatar URL.
        /// </summary>
        string AvatarUrl { get; }

        /// <summary>
        /// Description string.
        /// </summary>
        string Description { get; }

        /// <summary>
        /// The ID of the group to update.
        /// </summary>
        string GroupId { get; }

        /// <summary>
        /// Lang tag.
        /// </summary>
        string LangTag { get; }

        /// <summary>
        /// Name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Open is true if anyone should be allowed to join, or false if joins must be approved by a group admin.
        /// </summary>
        bool Open { get; }
    }

    /// <inheritdoc />
    internal class ApiUpdateGroupRequest : IApiUpdateGroupRequest
    {

        /// <inheritdoc />
        [DataMember(Name="avatar_url"), Preserve]
        public string AvatarUrl { get; set; }

        /// <inheritdoc />
        [DataMember(Name="description"), Preserve]
        public string Description { get; set; }

        /// <inheritdoc />
        [DataMember(Name="group_id"), Preserve]
        public string GroupId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="lang_tag"), Preserve]
        public string LangTag { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="open"), Preserve]
        public bool Open { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "AvatarUrl: ", AvatarUrl, ", ");
            output = string.Concat(output, "Description: ", Description, ", ");
            output = string.Concat(output, "GroupId: ", GroupId, ", ");
            output = string.Concat(output, "LangTag: ", LangTag, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Open: ", Open, ", ");
            return output;
        }
    }

    /// <summary>
    /// A user in the server.
    /// </summary>
    public interface IApiUser
    {

        /// <summary>
        /// The Apple Sign In ID in the user's account.
        /// </summary>
        string AppleId { get; }

        /// <summary>
        /// A URL for an avatar image.
        /// </summary>
        string AvatarUrl { get; }

        /// <summary>
        /// The UNIX time when the user was created.
        /// </summary>
        string CreateTime { get; }

        /// <summary>
        /// The display name of the user.
        /// </summary>
        string DisplayName { get; }

        /// <summary>
        /// Number of related edges to this user.
        /// </summary>
        int EdgeCount { get; }

        /// <summary>
        /// The Facebook id in the user's account.
        /// </summary>
        string FacebookId { get; }

        /// <summary>
        /// The Facebook Instant Game ID in the user's account.
        /// </summary>
        string FacebookInstantGameId { get; }

        /// <summary>
        /// The Apple Game Center in of the user's account.
        /// </summary>
        string GamecenterId { get; }

        /// <summary>
        /// The Google id in the user's account.
        /// </summary>
        string GoogleId { get; }

        /// <summary>
        /// The id of the user's account.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// The language expected to be a tag which follows the BCP-47 spec.
        /// </summary>
        string LangTag { get; }

        /// <summary>
        /// The location set by the user.
        /// </summary>
        string Location { get; }

        /// <summary>
        /// Additional information stored as a JSON object.
        /// </summary>
        string Metadata { get; }

        /// <summary>
        /// Indicates whether the user is currently online.
        /// </summary>
        bool Online { get; }

        /// <summary>
        /// The Steam id in the user's account.
        /// </summary>
        string SteamId { get; }

        /// <summary>
        /// The timezone set by the user.
        /// </summary>
        string Timezone { get; }

        /// <summary>
        /// The UNIX time when the user was last updated.
        /// </summary>
        string UpdateTime { get; }

        /// <summary>
        /// The username of the user's account.
        /// </summary>
        string Username { get; }
    }

    /// <inheritdoc />
    internal class ApiUser : IApiUser
    {

        /// <inheritdoc />
        [DataMember(Name="apple_id"), Preserve]
        public string AppleId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="avatar_url"), Preserve]
        public string AvatarUrl { get; set; }

        /// <inheritdoc />
        [DataMember(Name="create_time"), Preserve]
        public string CreateTime { get; set; }

        /// <inheritdoc />
        [DataMember(Name="display_name"), Preserve]
        public string DisplayName { get; set; }

        /// <inheritdoc />
        [DataMember(Name="edge_count"), Preserve]
        public int EdgeCount { get; set; }

        /// <inheritdoc />
        [DataMember(Name="facebook_id"), Preserve]
        public string FacebookId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="facebook_instant_game_id"), Preserve]
        public string FacebookInstantGameId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="gamecenter_id"), Preserve]
        public string GamecenterId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="google_id"), Preserve]
        public string GoogleId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="lang_tag"), Preserve]
        public string LangTag { get; set; }

        /// <inheritdoc />
        [DataMember(Name="location"), Preserve]
        public string Location { get; set; }

        /// <inheritdoc />
        [DataMember(Name="metadata"), Preserve]
        public string Metadata { get; set; }

        /// <inheritdoc />
        [DataMember(Name="online"), Preserve]
        public bool Online { get; set; }

        /// <inheritdoc />
        [DataMember(Name="steam_id"), Preserve]
        public string SteamId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="timezone"), Preserve]
        public string Timezone { get; set; }

        /// <inheritdoc />
        [DataMember(Name="update_time"), Preserve]
        public string UpdateTime { get; set; }

        /// <inheritdoc />
        [DataMember(Name="username"), Preserve]
        public string Username { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "AppleId: ", AppleId, ", ");
            output = string.Concat(output, "AvatarUrl: ", AvatarUrl, ", ");
            output = string.Concat(output, "CreateTime: ", CreateTime, ", ");
            output = string.Concat(output, "DisplayName: ", DisplayName, ", ");
            output = string.Concat(output, "EdgeCount: ", EdgeCount, ", ");
            output = string.Concat(output, "FacebookId: ", FacebookId, ", ");
            output = string.Concat(output, "FacebookInstantGameId: ", FacebookInstantGameId, ", ");
            output = string.Concat(output, "GamecenterId: ", GamecenterId, ", ");
            output = string.Concat(output, "GoogleId: ", GoogleId, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "LangTag: ", LangTag, ", ");
            output = string.Concat(output, "Location: ", Location, ", ");
            output = string.Concat(output, "Metadata: ", Metadata, ", ");
            output = string.Concat(output, "Online: ", Online, ", ");
            output = string.Concat(output, "SteamId: ", SteamId, ", ");
            output = string.Concat(output, "Timezone: ", Timezone, ", ");
            output = string.Concat(output, "UpdateTime: ", UpdateTime, ", ");
            output = string.Concat(output, "Username: ", Username, ", ");
            return output;
        }
    }

    /// <summary>
    /// A list of groups belonging to a user, along with the user's role in each group.
    /// </summary>
    public interface IApiUserGroupList
    {

        /// <summary>
        /// Cursor for the next page of results, if any.
        /// </summary>
        string Cursor { get; }

        /// <summary>
        /// Group-role pairs for a user.
        /// </summary>
        IEnumerable<IUserGroupListUserGroup> UserGroups { get; }
    }

    /// <inheritdoc />
    internal class ApiUserGroupList : IApiUserGroupList
    {

        /// <inheritdoc />
        [DataMember(Name="cursor"), Preserve]
        public string Cursor { get; set; }

        /// <inheritdoc />
        public IEnumerable<IUserGroupListUserGroup> UserGroups => _userGroups ?? new List<UserGroupListUserGroup>(0);
        [DataMember(Name="user_groups"), Preserve]
        public List<UserGroupListUserGroup> _userGroups { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Cursor: ", Cursor, ", ");
            output = string.Concat(output, "UserGroups: [", string.Join(", ", UserGroups), "], ");
            return output;
        }
    }

    /// <summary>
    /// A collection of zero or more users.
    /// </summary>
    public interface IApiUsers
    {

        /// <summary>
        /// The User objects.
        /// </summary>
        IEnumerable<IApiUser> Users { get; }
    }

    /// <inheritdoc />
    internal class ApiUsers : IApiUsers
    {

        /// <inheritdoc />
        public IEnumerable<IApiUser> Users => _users ?? new List<ApiUser>(0);
        [DataMember(Name="users"), Preserve]
        public List<ApiUser> _users { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Users: [", string.Join(", ", Users), "], ");
            return output;
        }
    }

    /// <summary>
    /// Apple IAP Purchases validation request
    /// </summary>
    public interface IApiValidatePurchaseAppleRequest
    {

        /// <summary>
        /// Base64 encoded Apple receipt data payload.
        /// </summary>
        string Receipt { get; }
    }

    /// <inheritdoc />
    internal class ApiValidatePurchaseAppleRequest : IApiValidatePurchaseAppleRequest
    {

        /// <inheritdoc />
        [DataMember(Name="receipt"), Preserve]
        public string Receipt { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Receipt: ", Receipt, ", ");
            return output;
        }
    }

    /// <summary>
    /// Google IAP Purchase validation request
    /// </summary>
    public interface IApiValidatePurchaseGoogleRequest
    {

        /// <summary>
        /// JSON encoded Google purchase payload.
        /// </summary>
        string Purchase { get; }
    }

    /// <inheritdoc />
    internal class ApiValidatePurchaseGoogleRequest : IApiValidatePurchaseGoogleRequest
    {

        /// <inheritdoc />
        [DataMember(Name="purchase"), Preserve]
        public string Purchase { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Purchase: ", Purchase, ", ");
            return output;
        }
    }

    /// <summary>
    /// Huawei IAP Purchase validation request
    /// </summary>
    public interface IApiValidatePurchaseHuaweiRequest
    {

        /// <summary>
        /// JSON encoded Huawei InAppPurchaseData.
        /// </summary>
        string Purchase { get; }

        /// <summary>
        /// InAppPurchaseData signature.
        /// </summary>
        string Signature { get; }
    }

    /// <inheritdoc />
    internal class ApiValidatePurchaseHuaweiRequest : IApiValidatePurchaseHuaweiRequest
    {

        /// <inheritdoc />
        [DataMember(Name="purchase"), Preserve]
        public string Purchase { get; set; }

        /// <inheritdoc />
        [DataMember(Name="signature"), Preserve]
        public string Signature { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Purchase: ", Purchase, ", ");
            output = string.Concat(output, "Signature: ", Signature, ", ");
            return output;
        }
    }

    /// <summary>
    /// Validate IAP response
    /// </summary>
    public interface IApiValidatePurchaseResponse
    {

        /// <summary>
        /// Newly seen validated purchases.
        /// </summary>
        IEnumerable<IApiValidatedPurchase> ValidatedPurchases { get; }
    }

    /// <inheritdoc />
    internal class ApiValidatePurchaseResponse : IApiValidatePurchaseResponse
    {

        /// <inheritdoc />
        public IEnumerable<IApiValidatedPurchase> ValidatedPurchases => _validatedPurchases ?? new List<ApiValidatedPurchase>(0);
        [DataMember(Name="validated_purchases"), Preserve]
        public List<ApiValidatedPurchase> _validatedPurchases { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "ValidatedPurchases: [", string.Join(", ", ValidatedPurchases), "], ");
            return output;
        }
    }

    /// <summary>
    /// Validated Purchase stored by Nakama.
    /// </summary>
    public interface IApiValidatedPurchase
    {

        /// <summary>
        /// UNIX Timestamp when the receipt validation was stored in DB.
        /// </summary>
        string CreateTime { get; }

        /// <summary>
        /// Whether the purchase was done in production or sandbox environment.
        /// </summary>
        ValidatedPurchaseEnvironment Environment { get; }

        /// <summary>
        /// Purchase Product ID.
        /// </summary>
        string ProductId { get; }

        /// <summary>
        /// Raw provider validation response.
        /// </summary>
        string ProviderResponse { get; }

        /// <summary>
        /// UNIX Timestamp when the purchase was done.
        /// </summary>
        string PurchaseTime { get; }

        /// <summary>
        /// Store identifier
        /// </summary>
        ValidatedPurchaseStore Store { get; }

        /// <summary>
        /// Purchase Transaction ID.
        /// </summary>
        string TransactionId { get; }

        /// <summary>
        /// UNIX Timestamp when the receipt validation was updated in DB.
        /// </summary>
        string UpdateTime { get; }
    }

    /// <inheritdoc />
    internal class ApiValidatedPurchase : IApiValidatedPurchase
    {

        /// <inheritdoc />
        [DataMember(Name="create_time"), Preserve]
        public string CreateTime { get; set; }

        /// <inheritdoc />
        public ValidatedPurchaseEnvironment Environment => _environment;
        [DataMember(Name="environment"), Preserve]
        public ValidatedPurchaseEnvironment _environment { get; set; }

        /// <inheritdoc />
        [DataMember(Name="product_id"), Preserve]
        public string ProductId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="provider_response"), Preserve]
        public string ProviderResponse { get; set; }

        /// <inheritdoc />
        [DataMember(Name="purchase_time"), Preserve]
        public string PurchaseTime { get; set; }

        /// <inheritdoc />
        public ValidatedPurchaseStore Store => _store;
        [DataMember(Name="store"), Preserve]
        public ValidatedPurchaseStore _store { get; set; }

        /// <inheritdoc />
        [DataMember(Name="transaction_id"), Preserve]
        public string TransactionId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="update_time"), Preserve]
        public string UpdateTime { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "CreateTime: ", CreateTime, ", ");
            output = string.Concat(output, "Environment: ", Environment, ", ");
            output = string.Concat(output, "ProductId: ", ProductId, ", ");
            output = string.Concat(output, "ProviderResponse: ", ProviderResponse, ", ");
            output = string.Concat(output, "PurchaseTime: ", PurchaseTime, ", ");
            output = string.Concat(output, "Store: ", Store, ", ");
            output = string.Concat(output, "TransactionId: ", TransactionId, ", ");
            output = string.Concat(output, "UpdateTime: ", UpdateTime, ", ");
            return output;
        }
    }

    /// <summary>
    /// The object to store.
    /// </summary>
    public interface IApiWriteStorageObject
    {

        /// <summary>
        /// The collection to store the object.
        /// </summary>
        string Collection { get; }

        /// <summary>
        /// The key for the object within the collection.
        /// </summary>
        string Key { get; }

        /// <summary>
        /// The read access permissions for the object.
        /// </summary>
        int PermissionRead { get; }

        /// <summary>
        /// The write access permissions for the object.
        /// </summary>
        int PermissionWrite { get; }

        /// <summary>
        /// The value of the object.
        /// </summary>
        string Value { get; }

        /// <summary>
        /// The version hash of the object to check. Possible values are: ["", "*", "#hash#"].
        /// </summary>
        string Version { get; }
    }

    /// <inheritdoc />
    internal class ApiWriteStorageObject : IApiWriteStorageObject
    {

        /// <inheritdoc />
        [DataMember(Name="collection"), Preserve]
        public string Collection { get; set; }

        /// <inheritdoc />
        [DataMember(Name="key"), Preserve]
        public string Key { get; set; }

        /// <inheritdoc />
        [DataMember(Name="permission_read"), Preserve]
        public int PermissionRead { get; set; }

        /// <inheritdoc />
        [DataMember(Name="permission_write"), Preserve]
        public int PermissionWrite { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        /// <inheritdoc />
        [DataMember(Name="version"), Preserve]
        public string Version { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Collection: ", Collection, ", ");
            output = string.Concat(output, "Key: ", Key, ", ");
            output = string.Concat(output, "PermissionRead: ", PermissionRead, ", ");
            output = string.Concat(output, "PermissionWrite: ", PermissionWrite, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            output = string.Concat(output, "Version: ", Version, ", ");
            return output;
        }
    }

    /// <summary>
    /// Write objects to the storage engine.
    /// </summary>
    public interface IApiWriteStorageObjectsRequest
    {

        /// <summary>
        /// The objects to store on the server.
        /// </summary>
        IEnumerable<IApiWriteStorageObject> Objects { get; }
    }

    /// <inheritdoc />
    internal class ApiWriteStorageObjectsRequest : IApiWriteStorageObjectsRequest
    {

        /// <inheritdoc />
        public IEnumerable<IApiWriteStorageObject> Objects => _objects ?? new List<ApiWriteStorageObject>(0);
        [DataMember(Name="objects"), Preserve]
        public List<ApiWriteStorageObject> _objects { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Objects: [", string.Join(", ", Objects), "], ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IProtobufAny
    {

        /// <summary>
        /// 
        /// </summary>
        string TypeUrl { get; }

        /// <summary>
        /// 
        /// </summary>
        string Value { get; }
    }

    /// <inheritdoc />
    internal class ProtobufAny : IProtobufAny
    {

        /// <inheritdoc />
        [DataMember(Name="type_url"), Preserve]
        public string TypeUrl { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "TypeUrl: ", TypeUrl, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IRpcStatus
    {

        /// <summary>
        /// 
        /// </summary>
        int Code { get; }

        /// <summary>
        /// 
        /// </summary>
        IEnumerable<IProtobufAny> Details { get; }

        /// <summary>
        /// 
        /// </summary>
        string Message { get; }
    }

    /// <inheritdoc />
    internal class RpcStatus : IRpcStatus
    {

        /// <inheritdoc />
        [DataMember(Name="code"), Preserve]
        public int Code { get; set; }

        /// <inheritdoc />
        public IEnumerable<IProtobufAny> Details => _details ?? new List<ProtobufAny>(0);
        [DataMember(Name="details"), Preserve]
        public List<ProtobufAny> _details { get; set; }

        /// <inheritdoc />
        [DataMember(Name="message"), Preserve]
        public string Message { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Code: ", Code, ", ");
            output = string.Concat(output, "Details: [", string.Join(", ", Details), "], ");
            output = string.Concat(output, "Message: ", Message, ", ");
            return output;
        }
    }

    /// <summary>
    /// The low level client for the Nakama API.
    /// </summary>
    internal class ApiClient
    {
        public readonly IHttpAdapter HttpAdapter;
        public int Timeout { get; set; }

        private readonly Uri _baseUri;

        public ApiClient(Uri baseUri, IHttpAdapter httpAdapter, int timeout = 10)
        {
            _baseUri = baseUri;
            HttpAdapter = httpAdapter;
            Timeout = timeout;
        }

        /// <summary>
        /// A healthcheck which load balancers can use to check the service.
        /// </summary>
        public async Task HealthcheckAsync(
            string bearerToken)
        {

            var urlpath = "/healthcheck";

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
        }

        /// <summary>
        /// Fetch the current user's account.
        /// </summary>
        public async Task<IApiAccount> GetAccountAsync(
            string bearerToken)
        {

            var urlpath = "/v2/account";

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
            return contents.FromJson<ApiAccount>();
        }

        /// <summary>
        /// Update fields in the current user's account.
        /// </summary>
        public async Task UpdateAccountAsync(
            string bearerToken,
            ApiUpdateAccountRequest body)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/account";

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "PUT";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
        }

        /// <summary>
        /// Authenticate a user with an Apple ID against the server.
        /// </summary>
        public async Task<IApiSession> AuthenticateAppleAsync(
            string basicAuthUsername,
            string basicAuthPassword,
            ApiAccountApple body,
            bool? create,
            string username)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/account/authenticate/apple";

            var queryParams = "";
            if (create != null) {
                queryParams = string.Concat(queryParams, "create=", create.ToString().ToLower(), "&");
            }
            if (username != null) {
                queryParams = string.Concat(queryParams, "username=", Uri.EscapeDataString(username), "&");
            }

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var credentials = Encoding.UTF8.GetBytes(basicAuthUsername + ":" + basicAuthPassword);
            var header = string.Concat("Basic ", Convert.ToBase64String(credentials));
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
            return contents.FromJson<ApiSession>();
        }

        /// <summary>
        /// Authenticate a user with a custom id against the server.
        /// </summary>
        public async Task<IApiSession> AuthenticateCustomAsync(
            string basicAuthUsername,
            string basicAuthPassword,
            ApiAccountCustom body,
            bool? create,
            string username)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/account/authenticate/custom";

            var queryParams = "";
            if (create != null) {
                queryParams = string.Concat(queryParams, "create=", create.ToString().ToLower(), "&");
            }
            if (username != null) {
                queryParams = string.Concat(queryParams, "username=", Uri.EscapeDataString(username), "&");
            }

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var credentials = Encoding.UTF8.GetBytes(basicAuthUsername + ":" + basicAuthPassword);
            var header = string.Concat("Basic ", Convert.ToBase64String(credentials));
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
            return contents.FromJson<ApiSession>();
        }

        /// <summary>
        /// Authenticate a user with a device id against the server.
        /// </summary>
        public async Task<IApiSession> AuthenticateDeviceAsync(
            string basicAuthUsername,
            string basicAuthPassword,
            ApiAccountDevice body,
            bool? create,
            string username)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/account/authenticate/device";

            var queryParams = "";
            if (create != null) {
                queryParams = string.Concat(queryParams, "create=", create.ToString().ToLower(), "&");
            }
            if (username != null) {
                queryParams = string.Concat(queryParams, "username=", Uri.EscapeDataString(username), "&");
            }

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var credentials = Encoding.UTF8.GetBytes(basicAuthUsername + ":" + basicAuthPassword);
            var header = string.Concat("Basic ", Convert.ToBase64String(credentials));
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
            return contents.FromJson<ApiSession>();
        }

        /// <summary>
        /// Authenticate a user with an email+password against the server.
        /// </summary>
        public async Task<IApiSession> AuthenticateEmailAsync(
            string basicAuthUsername,
            string basicAuthPassword,
            ApiAccountEmail body,
            bool? create,
            string username)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/account/authenticate/email";

            var queryParams = "";
            if (create != null) {
                queryParams = string.Concat(queryParams, "create=", create.ToString().ToLower(), "&");
            }
            if (username != null) {
                queryParams = string.Concat(queryParams, "username=", Uri.EscapeDataString(username), "&");
            }

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var credentials = Encoding.UTF8.GetBytes(basicAuthUsername + ":" + basicAuthPassword);
            var header = string.Concat("Basic ", Convert.ToBase64String(credentials));
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
            return contents.FromJson<ApiSession>();
        }

        /// <summary>
        /// Authenticate a user with a Facebook OAuth token against the server.
        /// </summary>
        public async Task<IApiSession> AuthenticateFacebookAsync(
            string basicAuthUsername,
            string basicAuthPassword,
            ApiAccountFacebook body,
            bool? create,
            string username,
            bool? sync)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/account/authenticate/facebook";

            var queryParams = "";
            if (create != null) {
                queryParams = string.Concat(queryParams, "create=", create.ToString().ToLower(), "&");
            }
            if (username != null) {
                queryParams = string.Concat(queryParams, "username=", Uri.EscapeDataString(username), "&");
            }
            if (sync != null) {
                queryParams = string.Concat(queryParams, "sync=", sync.ToString().ToLower(), "&");
            }

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var credentials = Encoding.UTF8.GetBytes(basicAuthUsername + ":" + basicAuthPassword);
            var header = string.Concat("Basic ", Convert.ToBase64String(credentials));
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
            return contents.FromJson<ApiSession>();
        }

        /// <summary>
        /// Authenticate a user with a Facebook Instant Game token against the server.
        /// </summary>
        public async Task<IApiSession> AuthenticateFacebookInstantGameAsync(
            string basicAuthUsername,
            string basicAuthPassword,
            ApiAccountFacebookInstantGame body,
            bool? create,
            string username)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/account/authenticate/facebookinstantgame";

            var queryParams = "";
            if (create != null) {
                queryParams = string.Concat(queryParams, "create=", create.ToString().ToLower(), "&");
            }
            if (username != null) {
                queryParams = string.Concat(queryParams, "username=", Uri.EscapeDataString(username), "&");
            }

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var credentials = Encoding.UTF8.GetBytes(basicAuthUsername + ":" + basicAuthPassword);
            var header = string.Concat("Basic ", Convert.ToBase64String(credentials));
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
            return contents.FromJson<ApiSession>();
        }

        /// <summary>
        /// Authenticate a user with Apple's GameCenter against the server.
        /// </summary>
        public async Task<IApiSession> AuthenticateGameCenterAsync(
            string basicAuthUsername,
            string basicAuthPassword,
            ApiAccountGameCenter body,
            bool? create,
            string username)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/account/authenticate/gamecenter";

            var queryParams = "";
            if (create != null) {
                queryParams = string.Concat(queryParams, "create=", create.ToString().ToLower(), "&");
            }
            if (username != null) {
                queryParams = string.Concat(queryParams, "username=", Uri.EscapeDataString(username), "&");
            }

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var credentials = Encoding.UTF8.GetBytes(basicAuthUsername + ":" + basicAuthPassword);
            var header = string.Concat("Basic ", Convert.ToBase64String(credentials));
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
            return contents.FromJson<ApiSession>();
        }

        /// <summary>
        /// Authenticate a user with Google against the server.
        /// </summary>
        public async Task<IApiSession> AuthenticateGoogleAsync(
            string basicAuthUsername,
            string basicAuthPassword,
            ApiAccountGoogle body,
            bool? create,
            string username)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/account/authenticate/google";

            var queryParams = "";
            if (create != null) {
                queryParams = string.Concat(queryParams, "create=", create.ToString().ToLower(), "&");
            }
            if (username != null) {
                queryParams = string.Concat(queryParams, "username=", Uri.EscapeDataString(username), "&");
            }

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var credentials = Encoding.UTF8.GetBytes(basicAuthUsername + ":" + basicAuthPassword);
            var header = string.Concat("Basic ", Convert.ToBase64String(credentials));
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
            return contents.FromJson<ApiSession>();
        }

        /// <summary>
        /// Authenticate a user with Steam against the server.
        /// </summary>
        public async Task<IApiSession> AuthenticateSteamAsync(
            string basicAuthUsername,
            string basicAuthPassword,
            ApiAccountSteam body,
            bool? create,
            string username,
            bool? sync)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/account/authenticate/steam";

            var queryParams = "";
            if (create != null) {
                queryParams = string.Concat(queryParams, "create=", create.ToString().ToLower(), "&");
            }
            if (username != null) {
                queryParams = string.Concat(queryParams, "username=", Uri.EscapeDataString(username), "&");
            }
            if (sync != null) {
                queryParams = string.Concat(queryParams, "sync=", sync.ToString().ToLower(), "&");
            }

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var credentials = Encoding.UTF8.GetBytes(basicAuthUsername + ":" + basicAuthPassword);
            var header = string.Concat("Basic ", Convert.ToBase64String(credentials));
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
            return contents.FromJson<ApiSession>();
        }

        /// <summary>
        /// Add an Apple ID to the social profiles on the current user's account.
        /// </summary>
        public async Task LinkAppleAsync(
            string bearerToken,
            ApiAccountApple body)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/account/link/apple";

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
        }

        /// <summary>
        /// Add a custom ID to the social profiles on the current user's account.
        /// </summary>
        public async Task LinkCustomAsync(
            string bearerToken,
            ApiAccountCustom body)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/account/link/custom";

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
        }

        /// <summary>
        /// Add a device ID to the social profiles on the current user's account.
        /// </summary>
        public async Task LinkDeviceAsync(
            string bearerToken,
            ApiAccountDevice body)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/account/link/device";

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
        }

        /// <summary>
        /// Add an email+password to the social profiles on the current user's account.
        /// </summary>
        public async Task LinkEmailAsync(
            string bearerToken,
            ApiAccountEmail body)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/account/link/email";

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
        }

        /// <summary>
        /// Add Facebook to the social profiles on the current user's account.
        /// </summary>
        public async Task LinkFacebookAsync(
            string bearerToken,
            ApiAccountFacebook body,
            bool? sync)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/account/link/facebook";

            var queryParams = "";
            if (sync != null) {
                queryParams = string.Concat(queryParams, "sync=", sync.ToString().ToLower(), "&");
            }

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
        }

        /// <summary>
        /// Add Facebook Instant Game to the social profiles on the current user's account.
        /// </summary>
        public async Task LinkFacebookInstantGameAsync(
            string bearerToken,
            ApiAccountFacebookInstantGame body)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/account/link/facebookinstantgame";

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
        }

        /// <summary>
        /// Add Apple's GameCenter to the social profiles on the current user's account.
        /// </summary>
        public async Task LinkGameCenterAsync(
            string bearerToken,
            ApiAccountGameCenter body)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/account/link/gamecenter";

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
        }

        /// <summary>
        /// Add Google to the social profiles on the current user's account.
        /// </summary>
        public async Task LinkGoogleAsync(
            string bearerToken,
            ApiAccountGoogle body)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/account/link/google";

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
        }

        /// <summary>
        /// Add Steam to the social profiles on the current user's account.
        /// </summary>
        public async Task LinkSteamAsync(
            string bearerToken,
            ApiLinkSteamRequest body)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/account/link/steam";

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
        }

        /// <summary>
        /// Refresh a user's session using a refresh token retrieved from a previous authentication request.
        /// </summary>
        public async Task<IApiSession> SessionRefreshAsync(
            string basicAuthUsername,
            string basicAuthPassword,
            ApiSessionRefreshRequest body)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/account/session/refresh";

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var credentials = Encoding.UTF8.GetBytes(basicAuthUsername + ":" + basicAuthPassword);
            var header = string.Concat("Basic ", Convert.ToBase64String(credentials));
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
            return contents.FromJson<ApiSession>();
        }

        /// <summary>
        /// Remove the Apple ID from the social profiles on the current user's account.
        /// </summary>
        public async Task UnlinkAppleAsync(
            string bearerToken,
            ApiAccountApple body)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/account/unlink/apple";

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
        }

        /// <summary>
        /// Remove the custom ID from the social profiles on the current user's account.
        /// </summary>
        public async Task UnlinkCustomAsync(
            string bearerToken,
            ApiAccountCustom body)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/account/unlink/custom";

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
        }

        /// <summary>
        /// Remove the device ID from the social profiles on the current user's account.
        /// </summary>
        public async Task UnlinkDeviceAsync(
            string bearerToken,
            ApiAccountDevice body)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/account/unlink/device";

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
        }

        /// <summary>
        /// Remove the email+password from the social profiles on the current user's account.
        /// </summary>
        public async Task UnlinkEmailAsync(
            string bearerToken,
            ApiAccountEmail body)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/account/unlink/email";

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
        }

        /// <summary>
        /// Remove Facebook from the social profiles on the current user's account.
        /// </summary>
        public async Task UnlinkFacebookAsync(
            string bearerToken,
            ApiAccountFacebook body)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/account/unlink/facebook";

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
        }

        /// <summary>
        /// Remove Facebook Instant Game profile from the social profiles on the current user's account.
        /// </summary>
        public async Task UnlinkFacebookInstantGameAsync(
            string bearerToken,
            ApiAccountFacebookInstantGame body)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/account/unlink/facebookinstantgame";

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
        }

        /// <summary>
        /// Remove Apple's GameCenter from the social profiles on the current user's account.
        /// </summary>
        public async Task UnlinkGameCenterAsync(
            string bearerToken,
            ApiAccountGameCenter body)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/account/unlink/gamecenter";

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
        }

        /// <summary>
        /// Remove Google from the social profiles on the current user's account.
        /// </summary>
        public async Task UnlinkGoogleAsync(
            string bearerToken,
            ApiAccountGoogle body)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/account/unlink/google";

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
        }

        /// <summary>
        /// Remove Steam from the social profiles on the current user's account.
        /// </summary>
        public async Task UnlinkSteamAsync(
            string bearerToken,
            ApiAccountSteam body)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/account/unlink/steam";

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
        }

        /// <summary>
        /// List a channel's message history.
        /// </summary>
        public async Task<IApiChannelMessageList> ListChannelMessagesAsync(
            string bearerToken,
            string channelId,
            int? limit,
            bool? forward,
            string cursor)
        {
            if (channelId == null)
            {
                throw new ArgumentException("'channelId' is required but was null.");
            }

            var urlpath = "/v2/channel/{channelId}";
            urlpath = urlpath.Replace("{channelId}", Uri.EscapeDataString(channelId));

            var queryParams = "";
            if (limit != null) {
                queryParams = string.Concat(queryParams, "limit=", limit, "&");
            }
            if (forward != null) {
                queryParams = string.Concat(queryParams, "forward=", forward.ToString().ToLower(), "&");
            }
            if (cursor != null) {
                queryParams = string.Concat(queryParams, "cursor=", Uri.EscapeDataString(cursor), "&");
            }

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
            return contents.FromJson<ApiChannelMessageList>();
        }

        /// <summary>
        /// Submit an event for processing in the server's registered runtime custom events handler.
        /// </summary>
        public async Task EventAsync(
            string bearerToken,
            ApiEvent body)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/event";

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
        }

        /// <summary>
        /// Delete one or more users by ID or username.
        /// </summary>
        public async Task DeleteFriendsAsync(
            string bearerToken,
            IEnumerable<string> ids,
            IEnumerable<string> usernames)
        {

            var urlpath = "/v2/friend";

            var queryParams = "";
            foreach (var elem in ids ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "ids=", elem, "&");
            }
            foreach (var elem in usernames ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "usernames=", elem, "&");
            }

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "DELETE";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
        }

        /// <summary>
        /// List all friends for the current user.
        /// </summary>
        public async Task<IApiFriendList> ListFriendsAsync(
            string bearerToken,
            int? limit,
            int? state,
            string cursor)
        {

            var urlpath = "/v2/friend";

            var queryParams = "";
            if (limit != null) {
                queryParams = string.Concat(queryParams, "limit=", limit, "&");
            }
            if (state != null) {
                queryParams = string.Concat(queryParams, "state=", state, "&");
            }
            if (cursor != null) {
                queryParams = string.Concat(queryParams, "cursor=", Uri.EscapeDataString(cursor), "&");
            }

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
            return contents.FromJson<ApiFriendList>();
        }

        /// <summary>
        /// Add friends by ID or username to a user's account.
        /// </summary>
        public async Task AddFriendsAsync(
            string bearerToken,
            IEnumerable<string> ids,
            IEnumerable<string> usernames)
        {

            var urlpath = "/v2/friend";

            var queryParams = "";
            foreach (var elem in ids ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "ids=", elem, "&");
            }
            foreach (var elem in usernames ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "usernames=", elem, "&");
            }

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
        }

        /// <summary>
        /// Block one or more users by ID or username.
        /// </summary>
        public async Task BlockFriendsAsync(
            string bearerToken,
            IEnumerable<string> ids,
            IEnumerable<string> usernames)
        {

            var urlpath = "/v2/friend/block";

            var queryParams = "";
            foreach (var elem in ids ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "ids=", elem, "&");
            }
            foreach (var elem in usernames ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "usernames=", elem, "&");
            }

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
        }

        /// <summary>
        /// Import Facebook friends and add them to a user's account.
        /// </summary>
        public async Task ImportFacebookFriendsAsync(
            string bearerToken,
            ApiAccountFacebook body,
            bool? reset)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/friend/facebook";

            var queryParams = "";
            if (reset != null) {
                queryParams = string.Concat(queryParams, "reset=", reset.ToString().ToLower(), "&");
            }

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
        }

        /// <summary>
        /// Import Steam friends and add them to a user's account.
        /// </summary>
        public async Task ImportSteamFriendsAsync(
            string bearerToken,
            ApiAccountSteam body,
            bool? reset)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/friend/steam";

            var queryParams = "";
            if (reset != null) {
                queryParams = string.Concat(queryParams, "reset=", reset.ToString().ToLower(), "&");
            }

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
        }

        /// <summary>
        /// List groups based on given filters.
        /// </summary>
        public async Task<IApiGroupList> ListGroupsAsync(
            string bearerToken,
            string name,
            string cursor,
            int? limit)
        {

            var urlpath = "/v2/group";

            var queryParams = "";
            if (name != null) {
                queryParams = string.Concat(queryParams, "name=", Uri.EscapeDataString(name), "&");
            }
            if (cursor != null) {
                queryParams = string.Concat(queryParams, "cursor=", Uri.EscapeDataString(cursor), "&");
            }
            if (limit != null) {
                queryParams = string.Concat(queryParams, "limit=", limit, "&");
            }

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
            return contents.FromJson<ApiGroupList>();
        }

        /// <summary>
        /// Create a new group with the current user as the owner.
        /// </summary>
        public async Task<IApiGroup> CreateGroupAsync(
            string bearerToken,
            ApiCreateGroupRequest body)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/group";

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
            return contents.FromJson<ApiGroup>();
        }

        /// <summary>
        /// Delete a group by ID.
        /// </summary>
        public async Task DeleteGroupAsync(
            string bearerToken,
            string groupId)
        {
            if (groupId == null)
            {
                throw new ArgumentException("'groupId' is required but was null.");
            }

            var urlpath = "/v2/group/{groupId}";
            urlpath = urlpath.Replace("{groupId}", Uri.EscapeDataString(groupId));

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "DELETE";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
        }

        /// <summary>
        /// Update fields in a given group.
        /// </summary>
        public async Task UpdateGroupAsync(
            string bearerToken,
            string groupId,
            ApiUpdateGroupRequest body)
        {
            if (groupId == null)
            {
                throw new ArgumentException("'groupId' is required but was null.");
            }
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/group/{groupId}";
            urlpath = urlpath.Replace("{groupId}", Uri.EscapeDataString(groupId));

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "PUT";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
        }

        /// <summary>
        /// Add users to a group.
        /// </summary>
        public async Task AddGroupUsersAsync(
            string bearerToken,
            string groupId,
            IEnumerable<string> userIds)
        {
            if (groupId == null)
            {
                throw new ArgumentException("'groupId' is required but was null.");
            }

            var urlpath = "/v2/group/{groupId}/add";
            urlpath = urlpath.Replace("{groupId}", Uri.EscapeDataString(groupId));

            var queryParams = "";
            foreach (var elem in userIds ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "user_ids=", elem, "&");
            }

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
        }

        /// <summary>
        /// Ban a set of users from a group.
        /// </summary>
        public async Task BanGroupUsersAsync(
            string bearerToken,
            string groupId,
            IEnumerable<string> userIds)
        {
            if (groupId == null)
            {
                throw new ArgumentException("'groupId' is required but was null.");
            }

            var urlpath = "/v2/group/{groupId}/ban";
            urlpath = urlpath.Replace("{groupId}", Uri.EscapeDataString(groupId));

            var queryParams = "";
            foreach (var elem in userIds ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "user_ids=", elem, "&");
            }

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
        }

        /// <summary>
        /// Demote a set of users in a group to the next role down.
        /// </summary>
        public async Task DemoteGroupUsersAsync(
            string bearerToken,
            string groupId,
            IEnumerable<string> userIds)
        {
            if (groupId == null)
            {
                throw new ArgumentException("'groupId' is required but was null.");
            }
            if (userIds == null)
            {
                throw new ArgumentException("'userIds' is required but was null.");
            }

            var urlpath = "/v2/group/{groupId}/demote";
            urlpath = urlpath.Replace("{groupId}", Uri.EscapeDataString(groupId));

            var queryParams = "";
            foreach (var elem in userIds ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "user_ids=", elem, "&");
            }

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
        }

        /// <summary>
        /// Immediately join an open group, or request to join a closed one.
        /// </summary>
        public async Task JoinGroupAsync(
            string bearerToken,
            string groupId)
        {
            if (groupId == null)
            {
                throw new ArgumentException("'groupId' is required but was null.");
            }

            var urlpath = "/v2/group/{groupId}/join";
            urlpath = urlpath.Replace("{groupId}", Uri.EscapeDataString(groupId));

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
        }

        /// <summary>
        /// Kick a set of users from a group.
        /// </summary>
        public async Task KickGroupUsersAsync(
            string bearerToken,
            string groupId,
            IEnumerable<string> userIds)
        {
            if (groupId == null)
            {
                throw new ArgumentException("'groupId' is required but was null.");
            }

            var urlpath = "/v2/group/{groupId}/kick";
            urlpath = urlpath.Replace("{groupId}", Uri.EscapeDataString(groupId));

            var queryParams = "";
            foreach (var elem in userIds ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "user_ids=", elem, "&");
            }

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
        }

        /// <summary>
        /// Leave a group the user is a member of.
        /// </summary>
        public async Task LeaveGroupAsync(
            string bearerToken,
            string groupId)
        {
            if (groupId == null)
            {
                throw new ArgumentException("'groupId' is required but was null.");
            }

            var urlpath = "/v2/group/{groupId}/leave";
            urlpath = urlpath.Replace("{groupId}", Uri.EscapeDataString(groupId));

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
        }

        /// <summary>
        /// Promote a set of users in a group to the next role up.
        /// </summary>
        public async Task PromoteGroupUsersAsync(
            string bearerToken,
            string groupId,
            IEnumerable<string> userIds)
        {
            if (groupId == null)
            {
                throw new ArgumentException("'groupId' is required but was null.");
            }

            var urlpath = "/v2/group/{groupId}/promote";
            urlpath = urlpath.Replace("{groupId}", Uri.EscapeDataString(groupId));

            var queryParams = "";
            foreach (var elem in userIds ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "user_ids=", elem, "&");
            }

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
        }

        /// <summary>
        /// List all users that are part of a group.
        /// </summary>
        public async Task<IApiGroupUserList> ListGroupUsersAsync(
            string bearerToken,
            string groupId,
            int? limit,
            int? state,
            string cursor)
        {
            if (groupId == null)
            {
                throw new ArgumentException("'groupId' is required but was null.");
            }

            var urlpath = "/v2/group/{groupId}/user";
            urlpath = urlpath.Replace("{groupId}", Uri.EscapeDataString(groupId));

            var queryParams = "";
            if (limit != null) {
                queryParams = string.Concat(queryParams, "limit=", limit, "&");
            }
            if (state != null) {
                queryParams = string.Concat(queryParams, "state=", state, "&");
            }
            if (cursor != null) {
                queryParams = string.Concat(queryParams, "cursor=", Uri.EscapeDataString(cursor), "&");
            }

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
            return contents.FromJson<ApiGroupUserList>();
        }

        /// <summary>
        /// Validate Apple IAP Receipt
        /// </summary>
        public async Task<IApiValidatePurchaseResponse> ValidatePurchaseAppleAsync(
            string bearerToken,
            ApiValidatePurchaseAppleRequest body)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/iap/purchase/apple";

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
            return contents.FromJson<ApiValidatePurchaseResponse>();
        }

        /// <summary>
        /// Validate Google IAP Receipt
        /// </summary>
        public async Task<IApiValidatePurchaseResponse> ValidatePurchaseGoogleAsync(
            string bearerToken,
            ApiValidatePurchaseGoogleRequest body)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/iap/purchase/google";

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
            return contents.FromJson<ApiValidatePurchaseResponse>();
        }

        /// <summary>
        /// Validate Huawei IAP Receipt
        /// </summary>
        public async Task<IApiValidatePurchaseResponse> ValidatePurchaseHuaweiAsync(
            string bearerToken,
            ApiValidatePurchaseHuaweiRequest body)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/iap/purchase/huawei";

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
            return contents.FromJson<ApiValidatePurchaseResponse>();
        }

        /// <summary>
        /// Delete a leaderboard record.
        /// </summary>
        public async Task DeleteLeaderboardRecordAsync(
            string bearerToken,
            string leaderboardId)
        {
            if (leaderboardId == null)
            {
                throw new ArgumentException("'leaderboardId' is required but was null.");
            }

            var urlpath = "/v2/leaderboard/{leaderboardId}";
            urlpath = urlpath.Replace("{leaderboardId}", Uri.EscapeDataString(leaderboardId));

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "DELETE";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
        }

        /// <summary>
        /// List leaderboard records.
        /// </summary>
        public async Task<IApiLeaderboardRecordList> ListLeaderboardRecordsAsync(
            string bearerToken,
            string leaderboardId,
            IEnumerable<string> ownerIds,
            int? limit,
            string cursor,
            string expiry)
        {
            if (leaderboardId == null)
            {
                throw new ArgumentException("'leaderboardId' is required but was null.");
            }

            var urlpath = "/v2/leaderboard/{leaderboardId}";
            urlpath = urlpath.Replace("{leaderboardId}", Uri.EscapeDataString(leaderboardId));

            var queryParams = "";
            foreach (var elem in ownerIds ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "owner_ids=", elem, "&");
            }
            if (limit != null) {
                queryParams = string.Concat(queryParams, "limit=", limit, "&");
            }
            if (cursor != null) {
                queryParams = string.Concat(queryParams, "cursor=", Uri.EscapeDataString(cursor), "&");
            }
            if (expiry != null) {
                queryParams = string.Concat(queryParams, "expiry=", Uri.EscapeDataString(expiry), "&");
            }

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
            return contents.FromJson<ApiLeaderboardRecordList>();
        }

        /// <summary>
        /// Write a record to a leaderboard.
        /// </summary>
        public async Task<IApiLeaderboardRecord> WriteLeaderboardRecordAsync(
            string bearerToken,
            string leaderboardId,
            WriteLeaderboardRecordRequestLeaderboardRecordWrite body)
        {
            if (leaderboardId == null)
            {
                throw new ArgumentException("'leaderboardId' is required but was null.");
            }
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/leaderboard/{leaderboardId}";
            urlpath = urlpath.Replace("{leaderboardId}", Uri.EscapeDataString(leaderboardId));

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
            return contents.FromJson<ApiLeaderboardRecord>();
        }

        /// <summary>
        /// List leaderboard records that belong to a user.
        /// </summary>
        public async Task<IApiLeaderboardRecordList> ListLeaderboardRecordsAroundOwnerAsync(
            string bearerToken,
            string leaderboardId,
            string ownerId,
            int? limit,
            string expiry)
        {
            if (leaderboardId == null)
            {
                throw new ArgumentException("'leaderboardId' is required but was null.");
            }
            if (ownerId == null)
            {
                throw new ArgumentException("'ownerId' is required but was null.");
            }

            var urlpath = "/v2/leaderboard/{leaderboardId}/owner/{ownerId}";
            urlpath = urlpath.Replace("{leaderboardId}", Uri.EscapeDataString(leaderboardId));
            urlpath = urlpath.Replace("{ownerId}", Uri.EscapeDataString(ownerId));

            var queryParams = "";
            if (limit != null) {
                queryParams = string.Concat(queryParams, "limit=", limit, "&");
            }
            if (expiry != null) {
                queryParams = string.Concat(queryParams, "expiry=", Uri.EscapeDataString(expiry), "&");
            }

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
            return contents.FromJson<ApiLeaderboardRecordList>();
        }

        /// <summary>
        /// Fetch list of running matches.
        /// </summary>
        public async Task<IApiMatchList> ListMatchesAsync(
            string bearerToken,
            int? limit,
            bool? authoritative,
            string label,
            int? minSize,
            int? maxSize,
            string query)
        {

            var urlpath = "/v2/match";

            var queryParams = "";
            if (limit != null) {
                queryParams = string.Concat(queryParams, "limit=", limit, "&");
            }
            if (authoritative != null) {
                queryParams = string.Concat(queryParams, "authoritative=", authoritative.ToString().ToLower(), "&");
            }
            if (label != null) {
                queryParams = string.Concat(queryParams, "label=", Uri.EscapeDataString(label), "&");
            }
            if (minSize != null) {
                queryParams = string.Concat(queryParams, "min_size=", minSize, "&");
            }
            if (maxSize != null) {
                queryParams = string.Concat(queryParams, "max_size=", maxSize, "&");
            }
            if (query != null) {
                queryParams = string.Concat(queryParams, "query=", Uri.EscapeDataString(query), "&");
            }

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
            return contents.FromJson<ApiMatchList>();
        }

        /// <summary>
        /// Delete one or more notifications for the current user.
        /// </summary>
        public async Task DeleteNotificationsAsync(
            string bearerToken,
            IEnumerable<string> ids)
        {

            var urlpath = "/v2/notification";

            var queryParams = "";
            foreach (var elem in ids ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "ids=", elem, "&");
            }

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "DELETE";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
        }

        /// <summary>
        /// Fetch list of notifications.
        /// </summary>
        public async Task<IApiNotificationList> ListNotificationsAsync(
            string bearerToken,
            int? limit,
            string cacheableCursor)
        {

            var urlpath = "/v2/notification";

            var queryParams = "";
            if (limit != null) {
                queryParams = string.Concat(queryParams, "limit=", limit, "&");
            }
            if (cacheableCursor != null) {
                queryParams = string.Concat(queryParams, "cacheable_cursor=", Uri.EscapeDataString(cacheableCursor), "&");
            }

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
            return contents.FromJson<ApiNotificationList>();
        }

        /// <summary>
        /// Execute a Lua function on the server.
        /// </summary>
        public async Task<IApiRpc> RpcFunc2Async(
            string bearerToken,
            string id,
            string payload,
            string httpKey)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v2/rpc/{id}";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";
            if (payload != null) {
                queryParams = string.Concat(queryParams, "payload=", Uri.EscapeDataString(payload), "&");
            }
            if (httpKey != null) {
                queryParams = string.Concat(queryParams, "http_key=", Uri.EscapeDataString(httpKey), "&");
            }

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            if (!string.IsNullOrEmpty(bearerToken))
            {
                var header = string.Concat("Bearer ", bearerToken);
                headers.Add("Authorization", header);
            }

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
            return contents.FromJson<ApiRpc>();
        }

        /// <summary>
        /// Execute a Lua function on the server.
        /// </summary>
        public async Task<IApiRpc> RpcFuncAsync(
            string bearerToken,
            string id,
            string body,
            string httpKey)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/rpc/{id}";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";
            if (httpKey != null) {
                queryParams = string.Concat(queryParams, "http_key=", Uri.EscapeDataString(httpKey), "&");
            }

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            if (!string.IsNullOrEmpty(bearerToken))
            {
                var header = string.Concat("Bearer ", bearerToken);
                headers.Add("Authorization", header);
            }

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
            return contents.FromJson<ApiRpc>();
        }

        /// <summary>
        /// Log out a session, invalidate a refresh token, or log out all sessions/refresh tokens for a user.
        /// </summary>
        public async Task SessionLogoutAsync(
            string bearerToken,
            ApiSessionLogoutRequest body)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/session/logout";

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
        }

        /// <summary>
        /// Get storage objects.
        /// </summary>
        public async Task<IApiStorageObjects> ReadStorageObjectsAsync(
            string bearerToken,
            ApiReadStorageObjectsRequest body)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/storage";

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
            return contents.FromJson<ApiStorageObjects>();
        }

        /// <summary>
        /// Write objects into the storage engine.
        /// </summary>
        public async Task<IApiStorageObjectAcks> WriteStorageObjectsAsync(
            string bearerToken,
            ApiWriteStorageObjectsRequest body)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/storage";

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "PUT";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
            return contents.FromJson<ApiStorageObjectAcks>();
        }

        /// <summary>
        /// Delete one or more objects by ID or username.
        /// </summary>
        public async Task DeleteStorageObjectsAsync(
            string bearerToken,
            ApiDeleteStorageObjectsRequest body)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/storage/delete";

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "PUT";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
        }

        /// <summary>
        /// List publicly readable storage objects in a given collection.
        /// </summary>
        public async Task<IApiStorageObjectList> ListStorageObjectsAsync(
            string bearerToken,
            string collection,
            string userId,
            int? limit,
            string cursor)
        {
            if (collection == null)
            {
                throw new ArgumentException("'collection' is required but was null.");
            }

            var urlpath = "/v2/storage/{collection}";
            urlpath = urlpath.Replace("{collection}", Uri.EscapeDataString(collection));

            var queryParams = "";
            if (userId != null) {
                queryParams = string.Concat(queryParams, "user_id=", Uri.EscapeDataString(userId), "&");
            }
            if (limit != null) {
                queryParams = string.Concat(queryParams, "limit=", limit, "&");
            }
            if (cursor != null) {
                queryParams = string.Concat(queryParams, "cursor=", Uri.EscapeDataString(cursor), "&");
            }

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
            return contents.FromJson<ApiStorageObjectList>();
        }

        /// <summary>
        /// List publicly readable storage objects in a given collection.
        /// </summary>
        public async Task<IApiStorageObjectList> ListStorageObjects2Async(
            string bearerToken,
            string collection,
            string userId,
            int? limit,
            string cursor)
        {
            if (collection == null)
            {
                throw new ArgumentException("'collection' is required but was null.");
            }
            if (userId == null)
            {
                throw new ArgumentException("'userId' is required but was null.");
            }

            var urlpath = "/v2/storage/{collection}/{userId}";
            urlpath = urlpath.Replace("{collection}", Uri.EscapeDataString(collection));
            urlpath = urlpath.Replace("{userId}", Uri.EscapeDataString(userId));

            var queryParams = "";
            if (limit != null) {
                queryParams = string.Concat(queryParams, "limit=", limit, "&");
            }
            if (cursor != null) {
                queryParams = string.Concat(queryParams, "cursor=", Uri.EscapeDataString(cursor), "&");
            }

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
            return contents.FromJson<ApiStorageObjectList>();
        }

        /// <summary>
        /// List current or upcoming tournaments.
        /// </summary>
        public async Task<IApiTournamentList> ListTournamentsAsync(
            string bearerToken,
            int? categoryStart,
            int? categoryEnd,
            int? startTime,
            int? endTime,
            int? limit,
            string cursor)
        {

            var urlpath = "/v2/tournament";

            var queryParams = "";
            if (categoryStart != null) {
                queryParams = string.Concat(queryParams, "category_start=", categoryStart, "&");
            }
            if (categoryEnd != null) {
                queryParams = string.Concat(queryParams, "category_end=", categoryEnd, "&");
            }
            if (startTime != null) {
                queryParams = string.Concat(queryParams, "start_time=", startTime, "&");
            }
            if (endTime != null) {
                queryParams = string.Concat(queryParams, "end_time=", endTime, "&");
            }
            if (limit != null) {
                queryParams = string.Concat(queryParams, "limit=", limit, "&");
            }
            if (cursor != null) {
                queryParams = string.Concat(queryParams, "cursor=", Uri.EscapeDataString(cursor), "&");
            }

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
            return contents.FromJson<ApiTournamentList>();
        }

        /// <summary>
        /// List tournament records.
        /// </summary>
        public async Task<IApiTournamentRecordList> ListTournamentRecordsAsync(
            string bearerToken,
            string tournamentId,
            IEnumerable<string> ownerIds,
            int? limit,
            string cursor,
            string expiry)
        {
            if (tournamentId == null)
            {
                throw new ArgumentException("'tournamentId' is required but was null.");
            }

            var urlpath = "/v2/tournament/{tournamentId}";
            urlpath = urlpath.Replace("{tournamentId}", Uri.EscapeDataString(tournamentId));

            var queryParams = "";
            foreach (var elem in ownerIds ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "owner_ids=", elem, "&");
            }
            if (limit != null) {
                queryParams = string.Concat(queryParams, "limit=", limit, "&");
            }
            if (cursor != null) {
                queryParams = string.Concat(queryParams, "cursor=", Uri.EscapeDataString(cursor), "&");
            }
            if (expiry != null) {
                queryParams = string.Concat(queryParams, "expiry=", Uri.EscapeDataString(expiry), "&");
            }

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
            return contents.FromJson<ApiTournamentRecordList>();
        }

        /// <summary>
        /// Write a record to a tournament.
        /// </summary>
        public async Task<IApiLeaderboardRecord> WriteTournamentRecordAsync(
            string bearerToken,
            string tournamentId,
            WriteTournamentRecordRequestTournamentRecordWrite body)
        {
            if (tournamentId == null)
            {
                throw new ArgumentException("'tournamentId' is required but was null.");
            }
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/tournament/{tournamentId}";
            urlpath = urlpath.Replace("{tournamentId}", Uri.EscapeDataString(tournamentId));

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "PUT";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
            return contents.FromJson<ApiLeaderboardRecord>();
        }

        /// <summary>
        /// Attempt to join an open and running tournament.
        /// </summary>
        public async Task JoinTournamentAsync(
            string bearerToken,
            string tournamentId)
        {
            if (tournamentId == null)
            {
                throw new ArgumentException("'tournamentId' is required but was null.");
            }

            var urlpath = "/v2/tournament/{tournamentId}/join";
            urlpath = urlpath.Replace("{tournamentId}", Uri.EscapeDataString(tournamentId));

            var queryParams = "";

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
        }

        /// <summary>
        /// List tournament records for a given owner.
        /// </summary>
        public async Task<IApiTournamentRecordList> ListTournamentRecordsAroundOwnerAsync(
            string bearerToken,
            string tournamentId,
            string ownerId,
            int? limit,
            string expiry)
        {
            if (tournamentId == null)
            {
                throw new ArgumentException("'tournamentId' is required but was null.");
            }
            if (ownerId == null)
            {
                throw new ArgumentException("'ownerId' is required but was null.");
            }

            var urlpath = "/v2/tournament/{tournamentId}/owner/{ownerId}";
            urlpath = urlpath.Replace("{tournamentId}", Uri.EscapeDataString(tournamentId));
            urlpath = urlpath.Replace("{ownerId}", Uri.EscapeDataString(ownerId));

            var queryParams = "";
            if (limit != null) {
                queryParams = string.Concat(queryParams, "limit=", limit, "&");
            }
            if (expiry != null) {
                queryParams = string.Concat(queryParams, "expiry=", Uri.EscapeDataString(expiry), "&");
            }

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
            return contents.FromJson<ApiTournamentRecordList>();
        }

        /// <summary>
        /// Fetch zero or more users by ID and/or username.
        /// </summary>
        public async Task<IApiUsers> GetUsersAsync(
            string bearerToken,
            IEnumerable<string> ids,
            IEnumerable<string> usernames,
            IEnumerable<string> facebookIds)
        {

            var urlpath = "/v2/user";

            var queryParams = "";
            foreach (var elem in ids ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "ids=", elem, "&");
            }
            foreach (var elem in usernames ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "usernames=", elem, "&");
            }
            foreach (var elem in facebookIds ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "facebook_ids=", elem, "&");
            }

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
            return contents.FromJson<ApiUsers>();
        }

        /// <summary>
        /// List groups the current user belongs to.
        /// </summary>
        public async Task<IApiUserGroupList> ListUserGroupsAsync(
            string bearerToken,
            string userId,
            int? limit,
            int? state,
            string cursor)
        {
            if (userId == null)
            {
                throw new ArgumentException("'userId' is required but was null.");
            }

            var urlpath = "/v2/user/{userId}/group";
            urlpath = urlpath.Replace("{userId}", Uri.EscapeDataString(userId));

            var queryParams = "";
            if (limit != null) {
                queryParams = string.Concat(queryParams, "limit=", limit, "&");
            }
            if (state != null) {
                queryParams = string.Concat(queryParams, "state=", state, "&");
            }
            if (cursor != null) {
                queryParams = string.Concat(queryParams, "cursor=", Uri.EscapeDataString(cursor), "&");
            }

            var uri = new UriBuilder(_baseUri)
            {
                Path = urlpath,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout);
            return contents.FromJson<ApiUserGroupList>();
        }
    }
}
