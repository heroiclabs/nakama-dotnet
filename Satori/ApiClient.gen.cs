/* Code generated by codegen/main.go. DO NOT EDIT. */
namespace Satori
{
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
    using System.Text;
    using System.Threading;
    using System.Threading.Tasks;
    using TinyJson;

    /// <summary>
    /// An exception generated for <c>HttpResponse</c> objects don't return a success status.
    /// </summary>
    public sealed class ApiResponseException : Exception
    {
        public long StatusCode { get; }

        public int GrpcStatusCode { get; }

        public ApiResponseException(long statusCode, string content, int grpcCode) : base(content)
        {
            StatusCode = statusCode;
            GrpcStatusCode = grpcCode;
        }

        public ApiResponseException(string message, Exception e) : base(message, e)
        {
            StatusCode = -1L;
            GrpcStatusCode = -1;
        }

        public ApiResponseException(string content) : this(-1L, content, -1)
        {
        }

        public override string ToString()
        {
            return $"ApiResponseException(StatusCode={StatusCode}, Message='{Message}', GrpcStatusCode={GrpcStatusCode})";
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IFlagValueChangeReason
    {

        /// <summary>
        /// The name of the configuration that overrides the flag value.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// The type of the configuration that declared the override.
        /// </summary>
        FlagValueChangeReasonType Type { get; }

        /// <summary>
        /// The variant name of the configuration that overrides the flag value.
        /// </summary>
        string VariantName { get; }
    }

    /// <inheritdoc />
    internal class FlagValueChangeReason : IFlagValueChangeReason
    {

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public FlagValueChangeReasonType Type => _type;
        [DataMember(Name="type"), Preserve]
        public FlagValueChangeReasonType _type { get; set; }

        /// <inheritdoc />
        [DataMember(Name="variant_name"), Preserve]
        public string VariantName { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Type: ", Type, ", ");
            output = string.Concat(output, "VariantName: ", VariantName, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public enum FlagValueChangeReasonType
    {
        /// <summary>
        /// 
        /// </summary>
        UNKNOWN = 0,
        /// <summary>
        /// 
        /// </summary>
        FLAG_VARIANT = 1,
        /// <summary>
        /// 
        /// </summary>
        LIVE_EVENT = 2,
        /// <summary>
        /// 
        /// </summary>
        EXPERIMENT = 3,
    }

    /// <summary>
    /// The request to update the status of a message.
    /// </summary>
    public interface ISatoriUpdateMessageBody
    {

        /// <summary>
        /// The time the message was consumed by the identity.
        /// </summary>
        string ConsumeTime { get; }

        /// <summary>
        /// The time the message was read at the client.
        /// </summary>
        string ReadTime { get; }
    }

    /// <inheritdoc />
    internal class SatoriUpdateMessageBody : ISatoriUpdateMessageBody
    {

        /// <inheritdoc />
        [DataMember(Name="consume_time"), Preserve]
        public string ConsumeTime { get; set; }

        /// <inheritdoc />
        [DataMember(Name="read_time"), Preserve]
        public string ReadTime { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "ConsumeTime: ", ConsumeTime, ", ");
            output = string.Concat(output, "ReadTime: ", ReadTime, ", ");
            return output;
        }
    }

    /// <summary>
    /// Log out a session, invalidate a refresh token, or log out all sessions/refresh tokens for a user.
    /// </summary>
    public interface IApiAuthenticateLogoutRequest
    {

        /// <summary>
        /// Refresh token to invalidate.
        /// </summary>
        string RefreshToken { get; }

        /// <summary>
        /// Session token to log out.
        /// </summary>
        string Token { get; }
    }

    /// <inheritdoc />
    internal class ApiAuthenticateLogoutRequest : IApiAuthenticateLogoutRequest
    {

        /// <inheritdoc />
        [DataMember(Name="refresh_token"), Preserve]
        public string RefreshToken { get; set; }

        /// <inheritdoc />
        [DataMember(Name="token"), Preserve]
        public string Token { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "RefreshToken: ", RefreshToken, ", ");
            output = string.Concat(output, "Token: ", Token, ", ");
            return output;
        }
    }

    /// <summary>
    /// Authenticate against the server with a refresh token.
    /// </summary>
    public interface IApiAuthenticateRefreshRequest
    {

        /// <summary>
        /// Refresh token.
        /// </summary>
        string RefreshToken { get; }
    }

    /// <inheritdoc />
    internal class ApiAuthenticateRefreshRequest : IApiAuthenticateRefreshRequest
    {

        /// <inheritdoc />
        [DataMember(Name="refresh_token"), Preserve]
        public string RefreshToken { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "RefreshToken: ", RefreshToken, ", ");
            return output;
        }
    }

    /// <summary>
    /// Authentication request
    /// </summary>
    public interface IApiAuthenticateRequest
    {

        /// <summary>
        /// Optional custom properties to update with this call. If not set, properties are left as they are on the server.
        /// </summary>
        IDictionary<string, string> Custom { get; }

        /// <summary>
        /// Optional default properties to update with this call. If not set, properties are left as they are on the server.
        /// </summary>
        IDictionary<string, string> Default { get; }

        /// <summary>
        /// Identity ID. Must be between eight and 128 characters (inclusive). Must be an alphanumeric string with only underscores and hyphens allowed.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// Optional no_session modifies the request to only create/update an identity without creating a new session. If set to 'true' the response won't include a token and a refresh token.
        /// </summary>
        bool NoSession { get; }
    }

    /// <inheritdoc />
    internal class ApiAuthenticateRequest : IApiAuthenticateRequest
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IDictionary<string, string> Custom => _custom ?? new Dictionary<string, string>();
        [DataMember(Name="custom"), Preserve]
        public Dictionary<string, string> _custom { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IDictionary<string, string> Default => _default ?? new Dictionary<string, string>();
        [DataMember(Name="default"), Preserve]
        public Dictionary<string, string> _default { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="no_session"), Preserve]
        public bool NoSession { get; set; }

        public override string ToString()
        {
            var output = "";

            var customString = "";
            foreach (var kvp in Custom)
            {
                customString = string.Concat(customString, "{" + kvp.Key + "=" + kvp.Value + "}");
            }
            output = string.Concat(output, "Custom: [" + customString + "]");

            var defaultString = "";
            foreach (var kvp in Default)
            {
                defaultString = string.Concat(defaultString, "{" + kvp.Key + "=" + kvp.Value + "}");
            }
            output = string.Concat(output, "Default: [" + defaultString + "]");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "NoSession: ", NoSession, ", ");
            return output;
        }
    }

    /// <summary>
    /// Publish an event to the server
    /// </summary>
    public interface IApiEventRequest
    {

        /// <summary>
        /// Some number of events produced by a client.
        /// </summary>
        IEnumerable<ISatoriapiEvent> Events { get; }
    }

    /// <inheritdoc />
    internal class ApiEventRequest : IApiEventRequest
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<ISatoriapiEvent> Events => _events ?? new List<SatoriapiEvent>(0);
        [DataMember(Name="events"), Preserve]
        public List<SatoriapiEvent> _events { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Events: [", string.Join(", ", Events), "], ");
            return output;
        }
    }

    /// <summary>
    /// An experiment that this user is partaking.
    /// </summary>
    public interface IApiExperiment
    {

        /// <summary>
        /// The labels associated with this experiment.
        /// </summary>
        List<string> Labels { get; }

        /// <summary>
        /// Experiment name
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Value associated with this Experiment.
        /// </summary>
        string Value { get; }
    }

    /// <inheritdoc />
    internal class ApiExperiment : IApiExperiment
    {

        /// <inheritdoc />
        [DataMember(Name="labels"), Preserve]
        public List<string> Labels { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Labels: [", string.Join(", ", Labels), "], ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            return output;
        }
    }

    /// <summary>
    /// All experiments that this identity is involved with.
    /// </summary>
    public interface IApiExperimentList
    {

        /// <summary>
        /// All experiments for this identity.
        /// </summary>
        IEnumerable<IApiExperiment> Experiments { get; }
    }

    /// <inheritdoc />
    internal class ApiExperimentList : IApiExperimentList
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IApiExperiment> Experiments => _experiments ?? new List<ApiExperiment>(0);
        [DataMember(Name="experiments"), Preserve]
        public List<ApiExperiment> _experiments { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Experiments: [", string.Join(", ", Experiments), "], ");
            return output;
        }
    }

    /// <summary>
    /// Feature flag available to the identity.
    /// </summary>
    public interface IApiFlag
    {

        /// <summary>
        /// The origin of change on the flag value returned.
        /// </summary>
        IFlagValueChangeReason ChangeReason { get; }

        /// <summary>
        /// Whether the value for this flag has conditionally changed from the default state.
        /// </summary>
        bool ConditionChanged { get; }

        /// <summary>
        /// The labels associated with this flag.
        /// </summary>
        List<string> Labels { get; }

        /// <summary>
        /// Flag name
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Value associated with this flag.
        /// </summary>
        string Value { get; }
    }

    /// <inheritdoc />
    internal class ApiFlag : IApiFlag
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IFlagValueChangeReason ChangeReason => _changeReason;
        [DataMember(Name="change_reason"), Preserve]
        public FlagValueChangeReason _changeReason { get; set; }

        /// <inheritdoc />
        [DataMember(Name="condition_changed"), Preserve]
        public bool ConditionChanged { get; set; }

        /// <inheritdoc />
        [DataMember(Name="labels"), Preserve]
        public List<string> Labels { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "ChangeReason: ", ChangeReason, ", ");
            output = string.Concat(output, "ConditionChanged: ", ConditionChanged, ", ");
            output = string.Concat(output, "Labels: [", string.Join(", ", Labels), "], ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            return output;
        }
    }

    /// <summary>
    /// All flags available to the identity
    /// </summary>
    public interface IApiFlagList
    {

        /// <summary>
        /// All flags
        /// </summary>
        IEnumerable<IApiFlag> Flags { get; }
    }

    /// <inheritdoc />
    internal class ApiFlagList : IApiFlagList
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IApiFlag> Flags => _flags ?? new List<ApiFlag>(0);
        [DataMember(Name="flags"), Preserve]
        public List<ApiFlag> _flags { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Flags: [", string.Join(", ", Flags), "], ");
            return output;
        }
    }

    /// <summary>
    /// Feature flag available to the identity.
    /// </summary>
    public interface IApiFlagOverride
    {

        /// <summary>
        /// Flag name
        /// </summary>
        string FlagName { get; }

        /// <summary>
        /// The labels associated with this flag.
        /// </summary>
        List<string> Labels { get; }

        /// <summary>
        /// The list of configuration that affect the value of the flag.
        /// </summary>
        IEnumerable<IApiFlagOverrideValue> Overrides { get; }
    }

    /// <inheritdoc />
    internal class ApiFlagOverride : IApiFlagOverride
    {

        /// <inheritdoc />
        [DataMember(Name="flag_name"), Preserve]
        public string FlagName { get; set; }

        /// <inheritdoc />
        [DataMember(Name="labels"), Preserve]
        public List<string> Labels { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IApiFlagOverrideValue> Overrides => _overrides ?? new List<ApiFlagOverrideValue>(0);
        [DataMember(Name="overrides"), Preserve]
        public List<ApiFlagOverrideValue> _overrides { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "FlagName: ", FlagName, ", ");
            output = string.Concat(output, "Labels: [", string.Join(", ", Labels), "], ");
            output = string.Concat(output, "Overrides: [", string.Join(", ", Overrides), "], ");
            return output;
        }
    }

    /// <summary>
    /// All flags available to the identity and their value overrides
    /// </summary>
    public interface IApiFlagOverrideList
    {

        /// <summary>
        /// All flags
        /// </summary>
        IEnumerable<IApiFlagOverride> Flags { get; }
    }

    /// <inheritdoc />
    internal class ApiFlagOverrideList : IApiFlagOverrideList
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IApiFlagOverride> Flags => _flags ?? new List<ApiFlagOverride>(0);
        [DataMember(Name="flags"), Preserve]
        public List<ApiFlagOverride> _flags { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Flags: [", string.Join(", ", Flags), "], ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public enum ApiFlagOverrideType
    {
        /// <summary>
        /// 
        /// </summary>
        FLAG = 0,
        /// <summary>
        /// 
        /// </summary>
        FLAG_VARIANT = 1,
        /// <summary>
        /// 
        /// </summary>
        LIVE_EVENT_FLAG = 2,
        /// <summary>
        /// 
        /// </summary>
        LIVE_EVENT_FLAG_VARIANT = 3,
        /// <summary>
        /// 
        /// </summary>
        EXPERIMENT_PHASE_VARIANT_FLAG = 4,
    }

    /// <summary>
    /// The details of a flag value override.
    /// </summary>
    public interface IApiFlagOverrideValue
    {

        /// <summary>
        /// The create time of the configuration that overrides the flag.
        /// </summary>
        string CreateTimeSec { get; }

        /// <summary>
        /// The name of the configuration that overrides the flag value.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// The type of the configuration that declared the override.
        /// </summary>
        ApiFlagOverrideType Type { get; }

        /// <summary>
        /// The value of the configuration that overrides the flag.
        /// </summary>
        string Value { get; }

        /// <summary>
        /// The variant name of the configuration that overrides the flag value.
        /// </summary>
        string VariantName { get; }
    }

    /// <inheritdoc />
    internal class ApiFlagOverrideValue : IApiFlagOverrideValue
    {

        /// <inheritdoc />
        [DataMember(Name="create_time_sec"), Preserve]
        public string CreateTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public ApiFlagOverrideType Type => _type;
        [DataMember(Name="type"), Preserve]
        public ApiFlagOverrideType _type { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        /// <inheritdoc />
        [DataMember(Name="variant_name"), Preserve]
        public string VariantName { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "CreateTimeSec: ", CreateTimeSec, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Type: ", Type, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            output = string.Concat(output, "VariantName: ", VariantName, ", ");
            return output;
        }
    }

    /// <summary>
    /// A response containing all the messages for an identity.
    /// </summary>
    public interface IApiGetMessageListResponse
    {

        /// <summary>
        /// Cacheable cursor to list newer messages. Durable and designed to be stored, unlike next/prev cursors.
        /// </summary>
        string CacheableCursor { get; }

        /// <summary>
        /// The list of messages.
        /// </summary>
        IEnumerable<IApiMessage> Messages { get; }

        /// <summary>
        /// The cursor to send when retrieving the next page, if any.
        /// </summary>
        string NextCursor { get; }

        /// <summary>
        /// The cursor to send when retrieving the previous page, if any.
        /// </summary>
        string PrevCursor { get; }
    }

    /// <inheritdoc />
    internal class ApiGetMessageListResponse : IApiGetMessageListResponse
    {

        /// <inheritdoc />
        [DataMember(Name="cacheable_cursor"), Preserve]
        public string CacheableCursor { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IApiMessage> Messages => _messages ?? new List<ApiMessage>(0);
        [DataMember(Name="messages"), Preserve]
        public List<ApiMessage> _messages { get; set; }

        /// <inheritdoc />
        [DataMember(Name="next_cursor"), Preserve]
        public string NextCursor { get; set; }

        /// <inheritdoc />
        [DataMember(Name="prev_cursor"), Preserve]
        public string PrevCursor { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "CacheableCursor: ", CacheableCursor, ", ");
            output = string.Concat(output, "Messages: [", string.Join(", ", Messages), "], ");
            output = string.Concat(output, "NextCursor: ", NextCursor, ", ");
            output = string.Concat(output, "PrevCursor: ", PrevCursor, ", ");
            return output;
        }
    }

    /// <summary>
    /// Enrich/replace the current session with a new ID.
    /// </summary>
    public interface IApiIdentifyRequest
    {

        /// <summary>
        /// Optional custom properties to update with this call. If not set, properties are left as they are on the server.
        /// </summary>
        IDictionary<string, string> Custom { get; }

        /// <summary>
        /// Optional default properties to update with this call. If not set, properties are left as they are on the server.
        /// </summary>
        IDictionary<string, string> Default { get; }

        /// <summary>
        /// Identity ID to enrich the current session and return a new session. Old session will no longer be usable.
        /// </summary>
        string Id { get; }
    }

    /// <inheritdoc />
    internal class ApiIdentifyRequest : IApiIdentifyRequest
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IDictionary<string, string> Custom => _custom ?? new Dictionary<string, string>();
        [DataMember(Name="custom"), Preserve]
        public Dictionary<string, string> _custom { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IDictionary<string, string> Default => _default ?? new Dictionary<string, string>();
        [DataMember(Name="default"), Preserve]
        public Dictionary<string, string> _default { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        public override string ToString()
        {
            var output = "";

            var customString = "";
            foreach (var kvp in Custom)
            {
                customString = string.Concat(customString, "{" + kvp.Key + "=" + kvp.Value + "}");
            }
            output = string.Concat(output, "Custom: [" + customString + "]");

            var defaultString = "";
            foreach (var kvp in Default)
            {
                defaultString = string.Concat(defaultString, "{" + kvp.Key + "=" + kvp.Value + "}");
            }
            output = string.Concat(output, "Default: [" + defaultString + "]");
            output = string.Concat(output, "Id: ", Id, ", ");
            return output;
        }
    }

    /// <summary>
    /// A single live event.
    /// </summary>
    public interface IApiLiveEvent
    {

        /// <summary>
        /// End time of current event run.
        /// </summary>
        string ActiveEndTimeSec { get; }

        /// <summary>
        /// Start time of current event run.
        /// </summary>
        string ActiveStartTimeSec { get; }

        /// <summary>
        /// Description.
        /// </summary>
        string Description { get; }

        /// <summary>
        /// Duration in seconds.
        /// </summary>
        string DurationSec { get; }

        /// <summary>
        /// End time, 0 if it repeats forever.
        /// </summary>
        string EndTimeSec { get; }

        /// <summary>
        /// The live event identifier.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// The labels associated with this live event.
        /// </summary>
        List<string> Labels { get; }

        /// <summary>
        /// Name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Reset CRON schedule, if configured.
        /// </summary>
        string ResetCron { get; }

        /// <summary>
        /// Start time.
        /// </summary>
        string StartTimeSec { get; }

        /// <summary>
        /// The status of this live event run.
        /// </summary>
        ApiLiveEventStatus Status { get; }

        /// <summary>
        /// Event value.
        /// </summary>
        string Value { get; }
    }

    /// <inheritdoc />
    internal class ApiLiveEvent : IApiLiveEvent
    {

        /// <inheritdoc />
        [DataMember(Name="active_end_time_sec"), Preserve]
        public string ActiveEndTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="active_start_time_sec"), Preserve]
        public string ActiveStartTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="description"), Preserve]
        public string Description { get; set; }

        /// <inheritdoc />
        [DataMember(Name="duration_sec"), Preserve]
        public string DurationSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="end_time_sec"), Preserve]
        public string EndTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="labels"), Preserve]
        public List<string> Labels { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="reset_cron"), Preserve]
        public string ResetCron { get; set; }

        /// <inheritdoc />
        [DataMember(Name="start_time_sec"), Preserve]
        public string StartTimeSec { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public ApiLiveEventStatus Status => _status;
        [DataMember(Name="status"), Preserve]
        public ApiLiveEventStatus _status { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "ActiveEndTimeSec: ", ActiveEndTimeSec, ", ");
            output = string.Concat(output, "ActiveStartTimeSec: ", ActiveStartTimeSec, ", ");
            output = string.Concat(output, "Description: ", Description, ", ");
            output = string.Concat(output, "DurationSec: ", DurationSec, ", ");
            output = string.Concat(output, "EndTimeSec: ", EndTimeSec, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Labels: [", string.Join(", ", Labels), "], ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "ResetCron: ", ResetCron, ", ");
            output = string.Concat(output, "StartTimeSec: ", StartTimeSec, ", ");
            output = string.Concat(output, "Status: ", Status, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            return output;
        }
    }

    /// <summary>
    /// List of Live events.
    /// </summary>
    public interface IApiLiveEventList
    {

        /// <summary>
        /// Live events that require explicit join.
        /// </summary>
        IEnumerable<IApiLiveEvent> ExplicitJoinLiveEvents { get; }

        /// <summary>
        /// Live events.
        /// </summary>
        IEnumerable<IApiLiveEvent> LiveEvents { get; }
    }

    /// <inheritdoc />
    internal class ApiLiveEventList : IApiLiveEventList
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IApiLiveEvent> ExplicitJoinLiveEvents => _explicitJoinLiveEvents ?? new List<ApiLiveEvent>(0);
        [DataMember(Name="explicit_join_live_events"), Preserve]
        public List<ApiLiveEvent> _explicitJoinLiveEvents { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IApiLiveEvent> LiveEvents => _liveEvents ?? new List<ApiLiveEvent>(0);
        [DataMember(Name="live_events"), Preserve]
        public List<ApiLiveEvent> _liveEvents { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "ExplicitJoinLiveEvents: [", string.Join(", ", ExplicitJoinLiveEvents), "], ");
            output = string.Concat(output, "LiveEvents: [", string.Join(", ", LiveEvents), "], ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public enum ApiLiveEventStatus
    {
        /// <summary>
        /// The status variants of a live event.
        /// </summary>
        UNKNOWN = 0,
        /// <summary>
        /// 