/* Code generated by codegen/main.go. DO NOT EDIT. */
namespace Satori
{
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
    using System.Text;
    using System.Threading;
    using System.Threading.Tasks;
    using TinyJson;

    /// <summary>
    /// An exception generated for <c>HttpResponse</c> objects don't return a success status.
    /// </summary>
    public sealed class ApiResponseException : Exception
    {
        public long StatusCode { get; }

        public int GrpcStatusCode { get; }

        public ApiResponseException(long statusCode, string content, int grpcCode) : base(content)
        {
            StatusCode = statusCode;
            GrpcStatusCode = grpcCode;
        }

        public ApiResponseException(string message, Exception e) : base(message, e)
        {
            StatusCode = -1L;
            GrpcStatusCode = -1;
        }

        public ApiResponseException(string content) : this(-1L, content, -1)
        {
        }

        public override string ToString()
        {
            return $"ApiResponseException(StatusCode={StatusCode}, Message='{Message}', GrpcStatusCode={GrpcStatusCode})";
        }
    }

    /// <summary>
    /// The request to update the status of a message.
    /// </summary>
    public interface IApiUpdateMessageRequest
    {

        /// <summary>
        /// The time the message was consumed by the identity.
        /// </summary>
        string ConsumeTime { get; }

        /// <summary>
        /// The time the message was read at the client.
        /// </summary>
        string ReadTime { get; }
    }

    /// <inheritdoc />
    internal class ApiUpdateMessageRequest : IApiUpdateMessageRequest
    {

        /// <inheritdoc />
        [DataMember(Name="consume_time"), Preserve]
        public string ConsumeTime { get; set; }

        /// <inheritdoc />
        [DataMember(Name="read_time"), Preserve]
        public string ReadTime { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "ConsumeTime: ", ConsumeTime, ", ");
            output = string.Concat(output, "ReadTime: ", ReadTime, ", ");
            return output;
        }
    }

    /// <summary>
    /// Log out a session, invalidate a refresh token, or log out all sessions/refresh tokens for a user.
    /// </summary>
    public interface IApiAuthenticateLogoutRequest
    {

        /// <summary>
        /// Refresh token to invalidate.
        /// </summary>
        string RefreshToken { get; }

        /// <summary>
        /// Session token to log out.
        /// </summary>
        string Token { get; }
    }

    /// <inheritdoc />
    internal class ApiAuthenticateLogoutRequest : IApiAuthenticateLogoutRequest
    {

        /// <inheritdoc />
        [DataMember(Name="refresh_token"), Preserve]
        public string RefreshToken { get; set; }

        /// <inheritdoc />
        [DataMember(Name="token"), Preserve]
        public string Token { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "RefreshToken: ", RefreshToken, ", ");
            output = string.Concat(output, "Token: ", Token, ", ");
            return output;
        }
    }

    /// <summary>
    /// Authenticate against the server with a refresh token.
    /// </summary>
    public interface IApiAuthenticateRefreshRequest
    {

        /// <summary>
        /// Refresh token.
        /// </summary>
        string RefreshToken { get; }
    }

    /// <inheritdoc />
    internal class ApiAuthenticateRefreshRequest : IApiAuthenticateRefreshRequest
    {

        /// <inheritdoc />
        [DataMember(Name="refresh_token"), Preserve]
        public string RefreshToken { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "RefreshToken: ", RefreshToken, ", ");
            return output;
        }
    }

    /// <summary>
    /// Authentication request
    /// </summary>
    public interface IApiAuthenticateRequest
    {

        /// <summary>
        /// Optional custom properties to update with this call. If not set, properties are left as they are on the server.
        /// </summary>
        IDictionary<string, string> Custom { get; }

        /// <summary>
        /// Optional default properties to update with this call. If not set, properties are left as they are on the server.
        /// </summary>
        IDictionary<string, string> Default { get; }

        /// <summary>
        /// Identity ID. Must be between eight and 128 characters (inclusive). Must be an alphanumeric string with only underscores and hyphens allowed.
        /// </summary>
        string Id { get; }
    }

    /// <inheritdoc />
    internal class ApiAuthenticateRequest : IApiAuthenticateRequest
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IDictionary<string, string> Custom => _custom ?? new Dictionary<string, string>();
        [DataMember(Name="custom"), Preserve]
        public Dictionary<string, string> _custom { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IDictionary<string, string> Default => _default ?? new Dictionary<string, string>();
        [DataMember(Name="default"), Preserve]
        public Dictionary<string, string> _default { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        public override string ToString()
        {
            var output = "";

            var customString = "";
            foreach (var kvp in Custom)
            {
                customString = string.Concat(customString, "{" + kvp.Key + "=" + kvp.Value + "}");
            }
            output = string.Concat(output, "Custom: [" + customString + "]");

            var defaultString = "";
            foreach (var kvp in Default)
            {
                defaultString = string.Concat(defaultString, "{" + kvp.Key + "=" + kvp.Value + "}");
            }
            output = string.Concat(output, "Default: [" + defaultString + "]");
            output = string.Concat(output, "Id: ", Id, ", ");
            return output;
        }
    }

    /// <summary>
    /// A single event. Usually, but not necessarily, part of a batch.
    /// </summary>
    public interface IApiEvent
    {

        /// <summary>
        /// Optional event ID assigned by the client, used to de-duplicate in retransmission scenarios. If not supplied the server will assign a randomly generated unique event identifier.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// Event metadata, if any.
        /// </summary>
        IDictionary<string, string> Metadata { get; }

        /// <summary>
        /// Event name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// The time when the event was triggered on the producer side.
        /// </summary>
        string Timestamp { get; }

        /// <summary>
        /// Optional value.
        /// </summary>
        string Value { get; }
    }

    /// <inheritdoc />
    internal class ApiEvent : IApiEvent
    {

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IDictionary<string, string> Metadata => _metadata ?? new Dictionary<string, string>();
        [DataMember(Name="metadata"), Preserve]
        public Dictionary<string, string> _metadata { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="timestamp"), Preserve]
        public string Timestamp { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Id: ", Id, ", ");

            var metadataString = "";
            foreach (var kvp in Metadata)
            {
                metadataString = string.Concat(metadataString, "{" + kvp.Key + "=" + kvp.Value + "}");
            }
            output = string.Concat(output, "Metadata: [" + metadataString + "]");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Timestamp: ", Timestamp, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            return output;
        }
    }

    /// <summary>
    /// Publish an event to the server
    /// </summary>
    public interface IApiEventRequest
    {

        /// <summary>
        /// Some number of events produced by a client.
        /// </summary>
        IEnumerable<IApiEvent> Events { get; }
    }

    /// <inheritdoc />
    internal class ApiEventRequest : IApiEventRequest
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IApiEvent> Events => _events ?? new List<ApiEvent>(0);
        [DataMember(Name="events"), Preserve]
        public List<ApiEvent> _events { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Events: [", string.Join(", ", Events), "], ");
            return output;
        }
    }

    /// <summary>
    /// An experiment that this user is partaking.
    /// </summary>
    public interface IApiExperiment
    {

        /// <summary>
        /// Experiment name
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Value associated with this Experiment.
        /// </summary>
        string Value { get; }
    }

    /// <inheritdoc />
    internal class ApiExperiment : IApiExperiment
    {

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            return output;
        }
    }

    /// <summary>
    /// All experiments that this identity is involved with.
    /// </summary>
    public interface IApiExperimentList
    {

        /// <summary>
        /// All experiments for this identity.
        /// </summary>
        IEnumerable<IApiExperiment> Experiments { get; }
    }

    /// <inheritdoc />
    internal class ApiExperimentList : IApiExperimentList
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IApiExperiment> Experiments => _experiments ?? new List<ApiExperiment>(0);
        [DataMember(Name="experiments"), Preserve]
        public List<ApiExperiment> _experiments { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Experiments: [", string.Join(", ", Experiments), "], ");
            return output;
        }
    }

    /// <summary>
    /// Feature flag available to the identity.
    /// </summary>
    public interface IApiFlag
    {

        /// <summary>
        /// Whether the value for this flag has conditionally changed from the default state.
        /// </summary>
        bool ConditionChanged { get; }

        /// <summary>
        /// Flag name
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Value associated with this flag.
        /// </summary>
        string Value { get; }
    }

    /// <inheritdoc />
    internal class ApiFlag : IApiFlag
    {

        /// <inheritdoc />
        [DataMember(Name="condition_changed"), Preserve]
        public bool ConditionChanged { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "ConditionChanged: ", ConditionChanged, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            return output;
        }
    }

    /// <summary>
    /// All flags available to the identity
    /// </summary>
    public interface IApiFlagList
    {

        /// <summary>
        /// All flags
        /// </summary>
        IEnumerable<IApiFlag> Flags { get; }
    }

    /// <inheritdoc />
    internal class ApiFlagList : IApiFlagList
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IApiFlag> Flags => _flags ?? new List<ApiFlag>(0);
        [DataMember(Name="flags"), Preserve]
        public List<ApiFlag> _flags { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Flags: [", string.Join(", ", Flags), "], ");
            return output;
        }
    }

    /// <summary>
    /// A response containing all the messages for an identity.
    /// </summary>
    public interface IApiGetMessageListResponse
    {

        /// <summary>
        /// Cacheable cursor to list newer messages. Durable and designed to be stored, unlike next/prev cursors.
        /// </summary>
        string CacheableCursor { get; }

        /// <summary>
        /// The list of messages.
        /// </summary>
        IEnumerable<IApiMessage> Messages { get; }

        /// <summary>
        /// The cursor to send when retrieving the next page, if any.
        /// </summary>
        string NextCursor { get; }

        /// <summary>
        /// The cursor to send when retrieving the previous page, if any.
        /// </summary>
        string PrevCursor { get; }
    }

    /// <inheritdoc />
    internal class ApiGetMessageListResponse : IApiGetMessageListResponse
    {

        /// <inheritdoc />
        [DataMember(Name="cacheable_cursor"), Preserve]
        public string CacheableCursor { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IApiMessage> Messages => _messages ?? new List<ApiMessage>(0);
        [DataMember(Name="messages"), Preserve]
        public List<ApiMessage> _messages { get; set; }

        /// <inheritdoc />
        [DataMember(Name="next_cursor"), Preserve]
        public string NextCursor { get; set; }

        /// <inheritdoc />
        [DataMember(Name="prev_cursor"), Preserve]
        public string PrevCursor { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "CacheableCursor: ", CacheableCursor, ", ");
            output = string.Concat(output, "Messages: [", string.Join(", ", Messages), "], ");
            output = string.Concat(output, "NextCursor: ", NextCursor, ", ");
            output = string.Concat(output, "PrevCursor: ", PrevCursor, ", ");
            return output;
        }
    }

    /// <summary>
    /// Enrich/replace the current session with a new ID.
    /// </summary>
    public interface IApiIdentifyRequest
    {

        /// <summary>
        /// Optional custom properties to update with this call. If not set, properties are left as they are on the server.
        /// </summary>
        IDictionary<string, string> Custom { get; }

        /// <summary>
        /// Optional default properties to update with this call. If not set, properties are left as they are on the server.
        /// </summary>
        IDictionary<string, string> Default { get; }

        /// <summary>
        /// Identity ID to enrich the current session and return a new session. Old session will no longer be usable.
        /// </summary>
        string Id { get; }
    }

    /// <inheritdoc />
    internal class ApiIdentifyRequest : IApiIdentifyRequest
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IDictionary<string, string> Custom => _custom ?? new Dictionary<string, string>();
        [DataMember(Name="custom"), Preserve]
        public Dictionary<string, string> _custom { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IDictionary<string, string> Default => _default ?? new Dictionary<string, string>();
        [DataMember(Name="default"), Preserve]
        public Dictionary<string, string> _default { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        public override string ToString()
        {
            var output = "";

            var customString = "";
            foreach (var kvp in Custom)
            {
                customString = string.Concat(customString, "{" + kvp.Key + "=" + kvp.Value + "}");
            }
            output = string.Concat(output, "Custom: [" + customString + "]");

            var defaultString = "";
            foreach (var kvp in Default)
            {
                defaultString = string.Concat(defaultString, "{" + kvp.Key + "=" + kvp.Value + "}");
            }
            output = string.Concat(output, "Default: [" + defaultString + "]");
            output = string.Concat(output, "Id: ", Id, ", ");
            return output;
        }
    }

    /// <summary>
    /// A single live event.
    /// </summary>
    public interface IApiLiveEvent
    {

        /// <summary>
        /// End time of current event run.
        /// </summary>
        string ActiveEndTimeSec { get; }

        /// <summary>
        /// Start time of current event run.
        /// </summary>
        string ActiveStartTimeSec { get; }

        /// <summary>
        /// Description.
        /// </summary>
        string Description { get; }

        /// <summary>
        /// The live event identifier.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// Name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Event value.
        /// </summary>
        string Value { get; }
    }

    /// <inheritdoc />
    internal class ApiLiveEvent : IApiLiveEvent
    {

        /// <inheritdoc />
        [DataMember(Name="active_end_time_sec"), Preserve]
        public string ActiveEndTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="active_start_time_sec"), Preserve]
        public string ActiveStartTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="description"), Preserve]
        public string Description { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "ActiveEndTimeSec: ", ActiveEndTimeSec, ", ");
            output = string.Concat(output, "ActiveStartTimeSec: ", ActiveStartTimeSec, ", ");
            output = string.Concat(output, "Description: ", Description, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            return output;
        }
    }

    /// <summary>
    /// List of Live events.
    /// </summary>
    public interface IApiLiveEventList
    {

        /// <summary>
        /// Live events.
        /// </summary>
        IEnumerable<IApiLiveEvent> LiveEvents { get; }
    }

    /// <inheritdoc />
    internal class ApiLiveEventList : IApiLiveEventList
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IApiLiveEvent> LiveEvents => _liveEvents ?? new List<ApiLiveEvent>(0);
        [DataMember(Name="live_events"), Preserve]
        public List<ApiLiveEvent> _liveEvents { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "LiveEvents: [", string.Join(", ", LiveEvents), "], ");
            return output;
        }
    }

    /// <summary>
    /// A scheduled message.
    /// </summary>
    public interface IApiMessage
    {

        /// <summary>
        /// The time the message was consumed by the identity.
        /// </summary>
        string ConsumeTime { get; }

        /// <summary>
        /// The time the message was created.
        /// </summary>
        string CreateTime { get; }

        /// <summary>
        /// The message's unique identifier.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// A key-value pairs of metadata.
        /// </summary>
        IDictionary<string, string> Metadata { get; }

        /// <summary>
        /// The time the message was read by the client.
        /// </summary>
        string ReadTime { get; }

        /// <summary>
        /// The identifier of the schedule.
        /// </summary>
        string ScheduleId { get; }

        /// <summary>
        /// The send time for the message.
        /// </summary>
        string SendTime { get; }

        /// <summary>
        /// The message's text.
        /// </summary>
        string Text { get; }

        /// <summary>
        /// The time the message was updated.
        /// </summary>
        string UpdateTime { get; }
    }

    /// <inheritdoc />
    internal class ApiMessage : IApiMessage
    {

        /// <inheritdoc />
        [DataMember(Name="consume_time"), Preserve]
        public string ConsumeTime { get; set; }

        /// <inheritdoc />
        [DataMember(Name="create_time"), Preserve]
        public string CreateTime { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IDictionary<string, string> Metadata => _metadata ?? new Dictionary<string, string>();
        [DataMember(Name="metadata"), Preserve]
        public Dictionary<string, string> _metadata { get; set; }

        /// <inheritdoc />
        [DataMember(Name="read_time"), Preserve]
        public string ReadTime { get; set; }

        /// <inheritdoc />
        [DataMember(Name="schedule_id"), Preserve]
        public string ScheduleId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="send_time"), Preserve]
        public string SendTime { get; set; }

        /// <inheritdoc />
        [DataMember(Name="text"), Preserve]
        public string Text { get; set; }

        /// <inheritdoc />
        [DataMember(Name="update_time"), Preserve]
        public string UpdateTime { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "ConsumeTime: ", ConsumeTime, ", ");
            output = string.Concat(output, "CreateTime: ", CreateTime, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");

            var metadataString = "";
            foreach (var kvp in Metadata)
            {
                metadataString = string.Concat(metadataString, "{" + kvp.Key + "=" + kvp.Value + "}");
            }
            output = string.Concat(output, "Metadata: [" + metadataString + "]");
            output = string.Concat(output, "ReadTime: ", ReadTime, ", ");
            output = string.Concat(output, "ScheduleId: ", ScheduleId, ", ");
            output = string.Concat(output, "SendTime: ", SendTime, ", ");
            output = string.Concat(output, "Text: ", Text, ", ");
            output = string.Concat(output, "UpdateTime: ", UpdateTime, ", ");
            return output;
        }
    }

    /// <summary>
    /// Properties associated with an identity.
    /// </summary>
    public interface IApiProperties
    {

        /// <summary>
        /// Event computed properties.
        /// </summary>
        IDictionary<string, string> Computed { get; }

        /// <summary>
        /// Event custom properties.
        /// </summary>
        IDictionary<string, string> Custom { get; }

        /// <summary>
        /// Event default properties.
        /// </summary>
        IDictionary<string, string> Default { get; }
    }

    /// <inheritdoc />
    internal class ApiProperties : IApiProperties
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IDictionary<string, string> Computed => _computed ?? new Dictionary<string, string>();
        [DataMember(Name="computed"), Preserve]
        public Dictionary<string, string> _computed { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IDictionary<string, string> Custom => _custom ?? new Dictionary<string, string>();
        [DataMember(Name="custom"), Preserve]
        public Dictionary<string, string> _custom { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IDictionary<string, string> Default => _default ?? new Dictionary<string, string>();
        [DataMember(Name="default"), Preserve]
        public Dictionary<string, string> _default { get; set; }

        public override string ToString()
        {
            var output = "";

            var computedString = "";
            foreach (var kvp in Computed)
            {
                computedString = string.Concat(computedString, "{" + kvp.Key + "=" + kvp.Value + "}");
            }
            output = string.Concat(output, "Computed: [" + computedString + "]");

            var customString = "";
            foreach (var kvp in Custom)
            {
                customString = string.Concat(customString, "{" + kvp.Key + "=" + kvp.Value + "}");
            }
            output = string.Concat(output, "Custom: [" + customString + "]");

            var defaultString = "";
            foreach (var kvp in Default)
            {
                defaultString = string.Concat(defaultString, "{" + kvp.Key + "=" + kvp.Value + "}");
            }
            output = string.Concat(output, "Default: [" + defaultString + "]");
            return output;
        }
    }

    /// <summary>
    /// A session.
    /// </summary>
    public interface IApiSession
    {

        /// <summary>
        /// Properties associated with this identity.
        /// </summary>
        IApiProperties Properties { get; }

        /// <summary>
        /// Refresh token.
        /// </summary>
        string RefreshToken { get; }

        /// <summary>
        /// Token credential.
        /// </summary>
        string Token { get; }
    }

    /// <inheritdoc />
    internal class ApiSession : IApiSession
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IApiProperties Properties => _properties;
        [DataMember(Name="properties"), Preserve]
        public ApiProperties _properties { get; set; }

        /// <inheritdoc />
        [DataMember(Name="refresh_token"), Preserve]
        public string RefreshToken { get; set; }

        /// <inheritdoc />
        [DataMember(Name="token"), Preserve]
        public string Token { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Properties: ", Properties, ", ");
            output = string.Concat(output, "RefreshToken: ", RefreshToken, ", ");
            output = string.Concat(output, "Token: ", Token, ", ");
            return output;
        }
    }

    /// <summary>
    /// Update Properties associated with this identity.
    /// </summary>
    public interface IApiUpdatePropertiesRequest
    {

        /// <summary>
        /// Event custom properties.
        /// </summary>
        IDictionary<string, string> Custom { get; }

        /// <summary>
        /// Event default properties.
        /// </summary>
        IDictionary<string, string> Default { get; }

        /// <summary>
        /// Informs the server to recompute the audience membership of the identity.
        /// </summary>
        bool Recompute { get; }
    }

    /// <inheritdoc />
    internal class ApiUpdatePropertiesRequest : IApiUpdatePropertiesRequest
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IDictionary<string, string> Custom => _custom ?? new Dictionary<string, string>();
        [DataMember(Name="custom"), Preserve]
        public Dictionary<string, string> _custom { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IDictionary<string, string> Default => _default ?? new Dictionary<string, string>();
        [DataMember(Name="default"), Preserve]
        public Dictionary<string, string> _default { get; set; }

        /// <inheritdoc />
        [DataMember(Name="recompute"), Preserve]
        public bool Recompute { get; set; }

        public override string ToString()
        {
            var output = "";

            var customString = "";
            foreach (var kvp in Custom)
            {
                customString = string.Concat(customString, "{" + kvp.Key + "=" + kvp.Value + "}");
            }
            output = string.Concat(output, "Custom: [" + customString + "]");

            var defaultString = "";
            foreach (var kvp in Default)
            {
                defaultString = string.Concat(defaultString, "{" + kvp.Key + "=" + kvp.Value + "}");
            }
            output = string.Concat(output, "Default: [" + defaultString + "]");
            output = string.Concat(output, "Recompute: ", Recompute, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IProtobufAny
    {

        /// <summary>
        /// 
        /// </summary>
        string @type { get; }
    }

    /// <inheritdoc />
    internal class ProtobufAny : IProtobufAny
    {

        /// <inheritdoc />
        [DataMember(Name="@type"), Preserve]
        public string @type { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "@type: ", @type, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IRpcStatus
    {

        /// <summary>
        /// 
        /// </summary>
        int Code { get; }

        /// <summary>
        /// 
        /// </summary>
        IEnumerable<IProtobufAny> Details { get; }

        /// <summary>
        /// 
        /// </summary>
        string Message { get; }
    }

    /// <inheritdoc />
    internal class RpcStatus : IRpcStatus
    {

        /// <inheritdoc />
        [DataMember(Name="code"), Preserve]
        public int Code { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IProtobufAny> Details => _details ?? new List<ProtobufAny>(0);
        [DataMember(Name="details"), Preserve]
        public List<ProtobufAny> _details { get; set; }

        /// <inheritdoc />
        [DataMember(Name="message"), Preserve]
        public string Message { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Code: ", Code, ", ");
            output = string.Concat(output, "Details: [", string.Join(", ", Details), "], ");
            output = string.Concat(output, "Message: ", Message, ", ");
            return output;
        }
    }

    /// <summary>
    /// The low level client for the Satori API.
    /// </summary>
    internal class ApiClient
    {
        public readonly IHttpAdapter HttpAdapter;
        public int Timeout { get; set; }

        private readonly Uri _baseUri;

        public ApiClient(Uri baseUri, IHttpAdapter httpAdapter, int timeout = 10)
        {
            _baseUri = baseUri;
            HttpAdapter = httpAdapter;
            Timeout = timeout;
        }

        /// <summary>
        /// A healthcheck which load balancers can use to check the service.
        /// </summary>
        public async Task SatoriHealthcheckAsync(
            string bearerToken,
            CancellationToken? cancellationToken)
        {

            var urlpath = "/healthcheck";

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
        }

        /// <summary>
        /// A readycheck which load balancers can use to check the service.
        /// </summary>
        public async Task SatoriReadycheckAsync(
            string bearerToken,
            CancellationToken? cancellationToken)
        {

            var urlpath = "/readycheck";

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
        }

        /// <summary>
        /// Authenticate against the server.
        /// </summary>
        public async Task<IApiSession> SatoriAuthenticateAsync(
            string basicAuthUsername,
            string basicAuthPassword,
            ApiAuthenticateRequest body,
            CancellationToken? cancellationToken)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/authenticate";

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            if (!string.IsNullOrEmpty(basicAuthUsername))
            {
                var credentials = Encoding.UTF8.GetBytes(basicAuthUsername + ":" + basicAuthPassword);
                var header = string.Concat("Basic ", Convert.ToBase64String(credentials));
                headers.Add("Authorization", header);
            }

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ApiSession>();
        }

        /// <summary>
        /// Log out a session, invalidate a refresh token, or log out all sessions/refresh tokens for a user.
        /// </summary>
        public async Task SatoriAuthenticateLogoutAsync(
            string bearerToken,
            ApiAuthenticateLogoutRequest body,
            CancellationToken? cancellationToken)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/authenticate/logout";

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
        }

        /// <summary>
        /// Refresh a user's session using a refresh token retrieved from a previous authentication request.
        /// </summary>
        public async Task<IApiSession> SatoriAuthenticateRefreshAsync(
            string basicAuthUsername,
            string basicAuthPassword,
            ApiAuthenticateRefreshRequest body,
            CancellationToken? cancellationToken)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/authenticate/refresh";

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            if (!string.IsNullOrEmpty(basicAuthUsername))
            {
                var credentials = Encoding.UTF8.GetBytes(basicAuthUsername + ":" + basicAuthPassword);
                var header = string.Concat("Basic ", Convert.ToBase64String(credentials));
                headers.Add("Authorization", header);
            }

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ApiSession>();
        }

        /// <summary>
        /// Publish an event for this session.
        /// </summary>
        public async Task SatoriEventAsync(
            string bearerToken,
            ApiEventRequest body,
            CancellationToken? cancellationToken)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/event";

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
        }

        /// <summary>
        /// Get or list all available experiments for this identity.
        /// </summary>
        public async Task<IApiExperimentList> SatoriGetExperimentsAsync(
            string bearerToken,
            IEnumerable<string> names,
            CancellationToken? cancellationToken)
        {

            var urlpath = "/v1/experiment";

            var queryParams = "";
            foreach (var elem in names ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "names=", Uri.EscapeDataString(elem), "&");
            }

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ApiExperimentList>();
        }

        /// <summary>
        /// List all available flags for this identity.
        /// </summary>
        public async Task<IApiFlagList> SatoriGetFlagsAsync(
            string bearerToken,
            string basicAuthUsername,
            string basicAuthPassword,
            IEnumerable<string> names,
            CancellationToken? cancellationToken)
        {

            var urlpath = "/v1/flag";

            var queryParams = "";
            foreach (var elem in names ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "names=", Uri.EscapeDataString(elem), "&");
            }

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            if (!string.IsNullOrEmpty(bearerToken))
            {
                var header = string.Concat("Bearer ", bearerToken);
                headers.Add("Authorization", header);
            }
            if (!string.IsNullOrEmpty(basicAuthUsername))
            {
                var credentials = Encoding.UTF8.GetBytes(basicAuthUsername + ":" + basicAuthPassword);
                var header = string.Concat("Basic ", Convert.ToBase64String(credentials));
                headers.Add("Authorization", header);
            }

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ApiFlagList>();
        }

        /// <summary>
        /// Enrich/replace the current session with new identifier.
        /// </summary>
        public async Task<IApiSession> SatoriIdentifyAsync(
            string bearerToken,
            ApiIdentifyRequest body,
            CancellationToken? cancellationToken)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/identify";

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "PUT";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ApiSession>();
        }

        /// <summary>
        /// Delete the caller's identity and associated data.
        /// </summary>
        public async Task SatoriDeleteIdentityAsync(
            string bearerToken,
            CancellationToken? cancellationToken)
        {

            var urlpath = "/v1/identity";

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "DELETE";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
        }

        /// <summary>
        /// List available live events.
        /// </summary>
        public async Task<IApiLiveEventList> SatoriGetLiveEventsAsync(
            string bearerToken,
            IEnumerable<string> names,
            CancellationToken? cancellationToken)
        {

            var urlpath = "/v1/live-event";

            var queryParams = "";
            foreach (var elem in names ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "names=", Uri.EscapeDataString(elem), "&");
            }

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ApiLiveEventList>();
        }

        /// <summary>
        /// Get the list of messages for the identity.
        /// </summary>
        public async Task<IApiGetMessageListResponse> SatoriGetMessageListAsync(
            string bearerToken,
            int? limit,
            bool? forward,
            string cursor,
            CancellationToken? cancellationToken)
        {

            var urlpath = "/v1/message";

            var queryParams = "";
            if (limit != null) {
                queryParams = string.Concat(queryParams, "limit=", limit, "&");
            }
            if (forward != null) {
                queryParams = string.Concat(queryParams, "forward=", forward.ToString().ToLower(), "&");
            }
            if (cursor != null) {
                queryParams = string.Concat(queryParams, "cursor=", Uri.EscapeDataString(cursor), "&");
            }

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ApiGetMessageListResponse>();
        }

        /// <summary>
        /// Deletes a message for an identity.
        /// </summary>
        public async Task SatoriDeleteMessageAsync(
            string bearerToken,
            string id,
            CancellationToken? cancellationToken)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v1/message/{id}";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "DELETE";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
        }

        /// <summary>
        /// Updates a message for an identity.
        /// </summary>
        public async Task SatoriUpdateMessageAsync(
            string bearerToken,
            string id,
            ApiUpdateMessageRequest body,
            CancellationToken? cancellationToken)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/message/{id}";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "PUT";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
        }

        /// <summary>
        /// List properties associated with this identity.
        /// </summary>
        public async Task<IApiProperties> SatoriListPropertiesAsync(
            string bearerToken,
            CancellationToken? cancellationToken)
        {

            var urlpath = "/v1/properties";

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ApiProperties>();
        }

        /// <summary>
        /// Update identity properties.
        /// </summary>
        public async Task SatoriUpdatePropertiesAsync(
            string bearerToken,
            ApiUpdatePropertiesRequest body,
            CancellationToken? cancellationToken)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/properties";

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "PUT";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
        }
    }
}
