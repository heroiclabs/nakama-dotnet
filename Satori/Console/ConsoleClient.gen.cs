/* Code generated by codegen/main.go. DO NOT EDIT. */
namespace Satori
{
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
    using System.Text;
    using System.Threading;
    using System.Threading.Tasks;
    using TinyJson;

    /// <summary>
    /// An exception generated for <c>HttpResponse</c> objects don't return a success status.
    /// </summary>
    public sealed class ApiResponseException : Exception
    {
        public long StatusCode { get; }

        public int GrpcStatusCode { get; }

        public ApiResponseException(long statusCode, string content, int grpcCode) : base(content)
        {
            StatusCode = statusCode;
            GrpcStatusCode = grpcCode;
        }

        public ApiResponseException(string message, Exception e) : base(message, e)
        {
            StatusCode = -1L;
            GrpcStatusCode = -1;
        }

        public ApiResponseException(string content) : this(-1L, content, -1)
        {
        }

        public override string ToString()
        {
            return $"ApiResponseException(StatusCode={StatusCode}, Message='{Message}', GrpcStatusCode={GrpcStatusCode})";
        }
    }

    /// <summary>
    /// The Adjust configuration.
    /// </summary>
    public interface IAdvertisementMeasurementPartnerAdjustConfiguration
    {

        /// <summary>
        /// The API token to interact with Adjust's Report API.
        /// </summary>
        string ApiToken { get; }

        /// <summary>
        /// The list of Application tokens to gather report data from.
        /// </summary>
        List<string> ApplicationTokens { get; }

        /// <summary>
        /// The amount of days to gather data of.
        /// </summary>
        string ReportIntervalDays { get; }
    }

    /// <inheritdoc />
    internal class AdvertisementMeasurementPartnerAdjustConfiguration : IAdvertisementMeasurementPartnerAdjustConfiguration
    {

        /// <inheritdoc />
        [DataMember(Name="api_token"), Preserve]
        public string ApiToken { get; set; }

        /// <inheritdoc />
        [DataMember(Name="application_tokens"), Preserve]
        public List<string> ApplicationTokens { get; set; }

        /// <inheritdoc />
        [DataMember(Name="report_interval_days"), Preserve]
        public string ReportIntervalDays { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "ApiToken: ", ApiToken, ", ");
            output = string.Concat(output, "ApplicationTokens: [", string.Join(", ", ApplicationTokens), "], ");
            output = string.Concat(output, "ReportIntervalDays: ", ReportIntervalDays, ", ");
            return output;
        }
    }

    /// <summary>
    /// The AppsFlyer configuration
    /// </summary>
    public interface IAdvertisementMeasurementPartnerAppsFlyerConfiguration
    {
    }

    /// <inheritdoc />
    internal class AdvertisementMeasurementPartnerAppsFlyerConfiguration : IAdvertisementMeasurementPartnerAppsFlyerConfiguration
    {

        public override string ToString()
        {
            var output = "";
            return output;
        }
    }

    /// <summary>
    /// The ConfigurationList is an list of all integrations configured.
    /// </summary>
    public interface IAdvertisementMeasurementPartnerConfigurationListResponse
    {

        /// <summary>
        /// 
        /// </summary>
        IEnumerable<IConsoleAdvertisementMeasurementPartnerStatus> Configurations { get; }
    }

    /// <inheritdoc />
    internal class AdvertisementMeasurementPartnerConfigurationListResponse : IAdvertisementMeasurementPartnerConfigurationListResponse
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleAdvertisementMeasurementPartnerStatus> Configurations => _configurations ?? new List<ConsoleAdvertisementMeasurementPartnerStatus>(0);
        [DataMember(Name="configurations"), Preserve]
        public List<ConsoleAdvertisementMeasurementPartnerStatus> _configurations { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Configurations: [", string.Join(", ", Configurations), "], ");
            return output;
        }
    }

    /// <summary>
    /// The ConfigurationUpdateRequest updates an ROAS integration.
    /// </summary>
    public interface IAdvertisementMeasurementPartnerConfigurationUpdateRequest
    {

        /// <summary>
        /// The new configuration for BigQuery.
        /// </summary>
        IAdvertisementMeasurementPartnerAdjustConfiguration Adjust { get; }

        /// <summary>
        /// The new configuration for Snowflake.
        /// </summary>
        IAdvertisementMeasurementPartnerAppsFlyerConfiguration Appsflyer { get; }
    }

    /// <inheritdoc />
    internal class AdvertisementMeasurementPartnerConfigurationUpdateRequest : IAdvertisementMeasurementPartnerConfigurationUpdateRequest
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IAdvertisementMeasurementPartnerAdjustConfiguration Adjust => _adjust;
        [DataMember(Name="adjust"), Preserve]
        public AdvertisementMeasurementPartnerAdjustConfiguration _adjust { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IAdvertisementMeasurementPartnerAppsFlyerConfiguration Appsflyer => _appsflyer;
        [DataMember(Name="appsflyer"), Preserve]
        public AdvertisementMeasurementPartnerAppsFlyerConfiguration _appsflyer { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Adjust: ", Adjust, ", ");
            output = string.Concat(output, "Appsflyer: ", Appsflyer, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IApiConsole_ExperimentPhaseIdentityUpdateRequest
    {

        /// <summary>
        /// The variant for the identity.
        /// </summary>
        string VariantId { get; }
    }

    /// <inheritdoc />
    internal class ApiConsole_ExperimentPhaseIdentityUpdateRequest : IApiConsole_ExperimentPhaseIdentityUpdateRequest
    {

        /// <inheritdoc />
        [DataMember(Name="variant_id"), Preserve]
        public string VariantId { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "VariantId: ", VariantId, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IApiConsole_ExperimentPhaseUpdateRequest
    {

        /// <summary>
        /// The unix time when the experiment stops accepting new participants.
        /// </summary>
        string AdmissionDeadlineSec { get; }

        /// <summary>
        /// Allow the experiment phase to have overlapping feature flags with another experiment phase.
        /// </summary>
        bool AllowFlagOverlap { get; }

        /// <summary>
        /// Experiment phase's audience list.
        /// </summary>
        IEnumerable<I> Audiences { get; }

        /// <summary>
        /// Experiment phase's description.
        /// </summary>
        string Description { get; }

        /// <summary>
        /// Scheduled end time, 0 if undefined.
        /// </summary>
        string EndTimeSec { get; }

        /// <summary>
        /// Experiment phase's goal metrics.
        /// </summary>
        IEnumerable<I> GoalMetrics { get; }

        /// <summary>
        /// Experiment phase's audience list of exclusions.
        /// </summary>
        IEnumerable<I> Holdouts { get; }

        /// <summary>
        /// Max number of participants.
        /// </summary>
        int MaxParticipants { get; }

        /// <summary>
        /// Experiment phase's monitor metrics.
        /// </summary>
        IEnumerable<I> MonitorMetrics { get; }

        /// <summary>
        /// Experiment phase's name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Experiment phase's schema identifier.
        /// </summary>
        string SchemaId { get; }

        /// <summary>
        /// Experiment phase's split key.
        /// </summary>no definition found: 
        I SplitKey { get; }

        /// <summary>
        /// Scheduled start time, 0 if immediate.
        /// </summary>
        string StartTimeSec { get; }

        /// <summary>
        /// Experiment phase's variants.
        /// </summary>
        IEnumerable<I> Variants { get; }
    }

    /// <inheritdoc />
    internal class ApiConsole_ExperimentPhaseUpdateRequest : IApiConsole_ExperimentPhaseUpdateRequest
    {

        /// <inheritdoc />
        [DataMember(Name="admission_deadline_sec"), Preserve]
        public string AdmissionDeadlineSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="allow_flag_overlap"), Preserve]
        public bool AllowFlagOverlap { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<I> Audiences => _audiences ?? new List<>(0);
        [DataMember(Name="audiences"), Preserve]
        public List<> _audiences { get; set; }

        /// <inheritdoc />
        [DataMember(Name="description"), Preserve]
        public string Description { get; set; }

        /// <inheritdoc />
        [DataMember(Name="end_time_sec"), Preserve]
        public string EndTimeSec { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<I> GoalMetrics => _goalMetrics ?? new List<>(0);
        [DataMember(Name="goal_metrics"), Preserve]
        public List<> _goalMetrics { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<I> Holdouts => _holdouts ?? new List<>(0);
        [DataMember(Name="holdouts"), Preserve]
        public List<> _holdouts { get; set; }

        /// <inheritdoc />
        [DataMember(Name="max_participants"), Preserve]
        public int MaxParticipants { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<I> MonitorMetrics => _monitorMetrics ?? new List<>(0);
        [DataMember(Name="monitor_metrics"), Preserve]
        public List<> _monitorMetrics { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="schema_id"), Preserve]
        public string SchemaId { get; set; }

        /// <inheritdoc />no definition found: 
        [IgnoreDataMember]
        public I SplitKey => _splitKey;
        [DataMember(Name="split_key"), Preserve]
        public  _splitKey { get; set; }

        /// <inheritdoc />
        [DataMember(Name="start_time_sec"), Preserve]
        public string StartTimeSec { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<I> Variants => _variants ?? new List<>(0);
        [DataMember(Name="variants"), Preserve]
        public List<> _variants { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "AdmissionDeadlineSec: ", AdmissionDeadlineSec, ", ");
            output = string.Concat(output, "AllowFlagOverlap: ", AllowFlagOverlap, ", ");
            output = string.Concat(output, "Audiences: [", string.Join(", ", Audiences), "], ");
            output = string.Concat(output, "Description: ", Description, ", ");
            output = string.Concat(output, "EndTimeSec: ", EndTimeSec, ", ");
            output = string.Concat(output, "GoalMetrics: [", string.Join(", ", GoalMetrics), "], ");
            output = string.Concat(output, "Holdouts: [", string.Join(", ", Holdouts), "], ");
            output = string.Concat(output, "MaxParticipants: ", MaxParticipants, ", ");
            output = string.Concat(output, "MonitorMetrics: [", string.Join(", ", MonitorMetrics), "], ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "SchemaId: ", SchemaId, ", ");
            output = string.Concat(output, "SplitKey: ", SplitKey, ", ");
            output = string.Concat(output, "StartTimeSec: ", StartTimeSec, ", ");
            output = string.Concat(output, "Variants: [", string.Join(", ", Variants), "], ");
            return output;
        }
    }

    /// <summary>
    /// Request to update an experiment.
    /// </summary>
    public interface IApiConsole_ExperimentUpdateRequest
    {

        /// <summary>
        /// Audience list.
        /// </summary>
        IEnumerable<I> Audiences { get; }

        /// <summary>
        /// Category label identifiers.
        /// </summary>
        IEnumerable<I> CategoryIds { get; }

        /// <summary>
        /// Color hex, for the calendar view.
        /// </summary>
        string Color { get; }

        /// <summary>
        /// Description.
        /// </summary>
        string Description { get; }

        /// <summary>
        /// Goal metrics.
        /// </summary>
        IEnumerable<I> GoalMetrics { get; }

        /// <summary>
        /// Audience list of exclusions.
        /// </summary>
        IEnumerable<I> Holdouts { get; }

        /// <summary>
        /// Monitor metrics.
        /// </summary>
        IEnumerable<I> MonitorMetrics { get; }

        /// <summary>
        /// Name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Schema identifier.
        /// </summary>
        string SchemaId { get; }

        /// <summary>
        /// Split key.
        /// </summary>no definition found: 
        I SplitKey { get; }

        /// <summary>
        /// Variants, if null the server will keep the current stored list.
        /// </summary>
        IEnumerable<I> Variants { get; }
    }

    /// <inheritdoc />
    internal class ApiConsole_ExperimentUpdateRequest : IApiConsole_ExperimentUpdateRequest
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<I> Audiences => _audiences ?? new List<>(0);
        [DataMember(Name="audiences"), Preserve]
        public List<> _audiences { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<I> CategoryIds => _categoryIds ?? new List<>(0);
        [DataMember(Name="category_ids"), Preserve]
        public List<> _categoryIds { get; set; }

        /// <inheritdoc />
        [DataMember(Name="color"), Preserve]
        public string Color { get; set; }

        /// <inheritdoc />
        [DataMember(Name="description"), Preserve]
        public string Description { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<I> GoalMetrics => _goalMetrics ?? new List<>(0);
        [DataMember(Name="goal_metrics"), Preserve]
        public List<> _goalMetrics { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<I> Holdouts => _holdouts ?? new List<>(0);
        [DataMember(Name="holdouts"), Preserve]
        public List<> _holdouts { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<I> MonitorMetrics => _monitorMetrics ?? new List<>(0);
        [DataMember(Name="monitor_metrics"), Preserve]
        public List<> _monitorMetrics { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="schema_id"), Preserve]
        public string SchemaId { get; set; }

        /// <inheritdoc />no definition found: 
        [IgnoreDataMember]
        public I SplitKey => _splitKey;
        [DataMember(Name="split_key"), Preserve]
        public  _splitKey { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<I> Variants => _variants ?? new List<>(0);
        [DataMember(Name="variants"), Preserve]
        public List<> _variants { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Audiences: [", string.Join(", ", Audiences), "], ");
            output = string.Concat(output, "CategoryIds: [", string.Join(", ", CategoryIds), "], ");
            output = string.Concat(output, "Color: ", Color, ", ");
            output = string.Concat(output, "Description: ", Description, ", ");
            output = string.Concat(output, "GoalMetrics: [", string.Join(", ", GoalMetrics), "], ");
            output = string.Concat(output, "Holdouts: [", string.Join(", ", Holdouts), "], ");
            output = string.Concat(output, "MonitorMetrics: [", string.Join(", ", MonitorMetrics), "], ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "SchemaId: ", SchemaId, ", ");
            output = string.Concat(output, "SplitKey: ", SplitKey, ", ");
            output = string.Concat(output, "Variants: [", string.Join(", ", Variants), "], ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IApiConsole_ExternalDataImportServerUpdateRequest
    {

        /// <summary>
        /// The server name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// The target Satori instance server key.
        /// </summary>
        string ServerKey { get; }

        /// <summary>
        /// The Satori url.
        /// </summary>
        string Url { get; }
    }

    /// <inheritdoc />
    internal class ApiConsole_ExternalDataImportServerUpdateRequest : IApiConsole_ExternalDataImportServerUpdateRequest
    {

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="server_key"), Preserve]
        public string ServerKey { get; set; }

        /// <inheritdoc />
        [DataMember(Name="url"), Preserve]
        public string Url { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "ServerKey: ", ServerKey, ", ");
            output = string.Concat(output, "Url: ", Url, ", ");
            return output;
        }
    }

    /// <summary>
    /// A live event flag update request.
    /// </summary>
    public interface IApiConsole_LiveEventFlagUpdateRequest
    {

        /// <summary>
        /// Value.
        /// </summary>
        string Value { get; }
    }

    /// <inheritdoc />
    internal class ApiConsole_LiveEventFlagUpdateRequest : IApiConsole_LiveEventFlagUpdateRequest
    {

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Value: ", Value, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IApiConsole_LiveEventFlagVariantUpdateRequest
    {

        /// <summary>
        /// Audience identifiers.
        /// </summary>
        IEnumerable<I> AudienceIds { get; }

        /// <summary>
        /// Name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Position.
        /// </summary>
        int Position { get; }

        /// <summary>
        /// The variant value.
        /// </summary>
        string Value { get; }
    }

    /// <inheritdoc />
    internal class ApiConsole_LiveEventFlagVariantUpdateRequest : IApiConsole_LiveEventFlagVariantUpdateRequest
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<I> AudienceIds => _audienceIds ?? new List<>(0);
        [DataMember(Name="audience_ids"), Preserve]
        public List<> _audienceIds { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="position"), Preserve]
        public int Position { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "AudienceIds: [", string.Join(", ", AudienceIds), "], ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Position: ", Position, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IApiConsole_LiveEventMessageScheduleUpdateRequest
    {

        /// <summary>
        /// Category label identifiers.
        /// </summary>
        IEnumerable<I> CategoryIds { get; }

        /// <summary>
        /// If applicable, channels to send this message through, per integration.
        /// </summary>
        IDictionary<string, I> Channels { get; }

        /// <summary>
        /// The integrations to send this message through.
        /// </summary>
        IEnumerable<I> Integrations { get; }

        /// <summary>
        /// 
        /// </summary>
        string Name { get; }

        /// <summary>
        /// The offset relative to the start of the Live Event run.
        /// </summary>
        string OffsetSec { get; }

        /// <summary>
        /// Reference point.
        /// </summary>no definition found: 
        I ReferencePoint { get; }

        /// <summary>
        /// The identifier of the template used to render the message's content.
        /// </summary>
        string TemplateId { get; }
    }

    /// <inheritdoc />
    internal class ApiConsole_LiveEventMessageScheduleUpdateRequest : IApiConsole_LiveEventMessageScheduleUpdateRequest
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<I> CategoryIds => _categoryIds ?? new List<>(0);
        [DataMember(Name="category_ids"), Preserve]
        public List<> _categoryIds { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IDictionary<string, I> Channels  => _channels ?? new Dictionary<string, I>();
        [DataMember(Name="channels"), Preserve]
        public Dictionary<string, I> _channels { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<I> Integrations => _integrations ?? new List<>(0);
        [DataMember(Name="integrations"), Preserve]
        public List<> _integrations { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="offset_sec"), Preserve]
        public string OffsetSec { get; set; }

        /// <inheritdoc />no definition found: 
        [IgnoreDataMember]
        public I ReferencePoint => _referencePoint;
        [DataMember(Name="reference_point"), Preserve]
        public  _referencePoint { get; set; }

        /// <inheritdoc />
        [DataMember(Name="template_id"), Preserve]
        public string TemplateId { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "CategoryIds: [", string.Join(", ", CategoryIds), "], ");

            var channelsString = "";
            foreach (var kvp in Channels)
            {
                channelsString = string.Concat(channelsString, "{" + kvp.Key + "=" + kvp.Value + "}");
            }
            output = string.Concat(output, "Channels: [" + channelsString + "]");
            output = string.Concat(output, "Integrations: [", string.Join(", ", Integrations), "], ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "OffsetSec: ", OffsetSec, ", ");
            output = string.Concat(output, "ReferencePoint: ", ReferencePoint, ", ");
            output = string.Concat(output, "TemplateId: ", TemplateId, ", ");
            return output;
        }
    }

    /// <summary>
    /// Request to update an existing live event.
    /// </summary>
    public interface IApiConsole_LiveEventUpdateRequest
    {

        /// <summary>
        /// Allow the live event to have overlapping feature flags with another live event.
        /// </summary>
        bool AllowFlagOverlap { get; }

        /// <summary>
        /// Audience list.
        /// </summary>
        IEnumerable<I> Audiences { get; }

        /// <summary>
        /// Category label identifiers.
        /// </summary>
        IEnumerable<I> CategoryIds { get; }

        /// <summary>
        /// Color hex, for the calendar view.
        /// </summary>
        string Color { get; }

        /// <summary>
        /// Description.
        /// </summary>
        string Description { get; }

        /// <summary>
        /// Duration in seconds.
        /// </summary>
        string DurationSec { get; }

        /// <summary>
        /// End time, 0 if it repeats forever.
        /// </summary>
        string EndTimeSec { get; }

        /// <summary>
        /// Requires explicit join. Membership will be sticky if true.
        /// </summary>
        bool ExplicitJoin { get; }

        /// <summary>
        /// Flag overrides, if any.
        /// </summary>
        IEnumerable<I> Flags { get; }

        /// <summary>
        /// Audience list of exclusions.
        /// </summary>
        IEnumerable<I> Holdouts { get; }

        /// <summary>
        /// Sticky membership.
        /// </summary>
        bool Membership { get; }

        /// <summary>
        /// Monitor metric list.
        /// </summary>
        IEnumerable<I> MonitorMetrics { get; }

        /// <summary>
        /// Name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Reset CRON schedule, if configured.
        /// </summary>
        string ResetCron { get; }

        /// <summary>
        /// 
        /// </summary>
        string SchemaId { get; }

        /// <summary>
        /// Start time, 0 if current time.
        /// </summary>
        string StartTimeSec { get; }

        /// <summary>
        /// Event value.
        /// </summary>
        string Value { get; }

        /// <summary>
        /// Optional webhook.
        /// </summary>
        string Webhook { get; }
    }

    /// <inheritdoc />
    internal class ApiConsole_LiveEventUpdateRequest : IApiConsole_LiveEventUpdateRequest
    {

        /// <inheritdoc />
        [DataMember(Name="allow_flag_overlap"), Preserve]
        public bool AllowFlagOverlap { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<I> Audiences => _audiences ?? new List<>(0);
        [DataMember(Name="audiences"), Preserve]
        public List<> _audiences { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<I> CategoryIds => _categoryIds ?? new List<>(0);
        [DataMember(Name="category_ids"), Preserve]
        public List<> _categoryIds { get; set; }

        /// <inheritdoc />
        [DataMember(Name="color"), Preserve]
        public string Color { get; set; }

        /// <inheritdoc />
        [DataMember(Name="description"), Preserve]
        public string Description { get; set; }

        /// <inheritdoc />
        [DataMember(Name="duration_sec"), Preserve]
        public string DurationSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="end_time_sec"), Preserve]
        public string EndTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="explicit_join"), Preserve]
        public bool ExplicitJoin { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<I> Flags => _flags ?? new List<>(0);
        [DataMember(Name="flags"), Preserve]
        public List<> _flags { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<I> Holdouts => _holdouts ?? new List<>(0);
        [DataMember(Name="holdouts"), Preserve]
        public List<> _holdouts { get; set; }

        /// <inheritdoc />
        [DataMember(Name="membership"), Preserve]
        public bool Membership { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<I> MonitorMetrics => _monitorMetrics ?? new List<>(0);
        [DataMember(Name="monitor_metrics"), Preserve]
        public List<> _monitorMetrics { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="reset_cron"), Preserve]
        public string ResetCron { get; set; }

        /// <inheritdoc />
        [DataMember(Name="schema_id"), Preserve]
        public string SchemaId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="start_time_sec"), Preserve]
        public string StartTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        /// <inheritdoc />
        [DataMember(Name="webhook"), Preserve]
        public string Webhook { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "AllowFlagOverlap: ", AllowFlagOverlap, ", ");
            output = string.Concat(output, "Audiences: [", string.Join(", ", Audiences), "], ");
            output = string.Concat(output, "CategoryIds: [", string.Join(", ", CategoryIds), "], ");
            output = string.Concat(output, "Color: ", Color, ", ");
            output = string.Concat(output, "Description: ", Description, ", ");
            output = string.Concat(output, "DurationSec: ", DurationSec, ", ");
            output = string.Concat(output, "EndTimeSec: ", EndTimeSec, ", ");
            output = string.Concat(output, "ExplicitJoin: ", ExplicitJoin, ", ");
            output = string.Concat(output, "Flags: [", string.Join(", ", Flags), "], ");
            output = string.Concat(output, "Holdouts: [", string.Join(", ", Holdouts), "], ");
            output = string.Concat(output, "Membership: ", Membership, ", ");
            output = string.Concat(output, "MonitorMetrics: [", string.Join(", ", MonitorMetrics), "], ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "ResetCron: ", ResetCron, ", ");
            output = string.Concat(output, "SchemaId: ", SchemaId, ", ");
            output = string.Concat(output, "StartTimeSec: ", StartTimeSec, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            output = string.Concat(output, "Webhook: ", Webhook, ", ");
            return output;
        }
    }

    /// <summary>
    /// The request to update a Message Schedule.
    /// </summary>
    public interface IApiConsole_MessageScheduleUpdateRequest
    {

        /// <summary>
        /// Audience list.
        /// </summary>
        IEnumerable<I> Audiences { get; }

        /// <summary>
        /// Category label identifiers.
        /// </summary>
        IEnumerable<I> CategoryIds { get; }

        /// <summary>
        /// If applicable, channels to send this message through, per integration.
        /// </summary>
        IDictionary<string, I> Channels { get; }

        /// <summary>
        /// The Cron expression for schedules.
        /// </summary>
        string CronExpr { get; }

        /// <summary>
        /// The time the schedule terminates in the case of recurring schecules.
        /// </summary>
        string EndTimeSec { get; }

        /// <summary>
        /// Audience list of exclusions.
        /// </summary>
        IEnumerable<I> Holdouts { get; }

        /// <summary>
        /// The integrations to send this message through.
        /// </summary>
        IEnumerable<I> Integrations { get; }

        /// <summary>
        /// 
        /// </summary>
        string Name { get; }

        /// <summary>
        /// The time the schedule becomes in effect.
        /// </summary>
        string StartTimeSec { get; }

        /// <summary>
        /// The identifier of the template used to render the message's content.
        /// </summary>
        string TemplateId { get; }
    }

    /// <inheritdoc />
    internal class ApiConsole_MessageScheduleUpdateRequest : IApiConsole_MessageScheduleUpdateRequest
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<I> Audiences => _audiences ?? new List<>(0);
        [DataMember(Name="audiences"), Preserve]
        public List<> _audiences { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<I> CategoryIds => _categoryIds ?? new List<>(0);
        [DataMember(Name="category_ids"), Preserve]
        public List<> _categoryIds { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IDictionary<string, I> Channels  => _channels ?? new Dictionary<string, I>();
        [DataMember(Name="channels"), Preserve]
        public Dictionary<string, I> _channels { get; set; }

        /// <inheritdoc />
        [DataMember(Name="cron_expr"), Preserve]
        public string CronExpr { get; set; }

        /// <inheritdoc />
        [DataMember(Name="end_time_sec"), Preserve]
        public string EndTimeSec { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<I> Holdouts => _holdouts ?? new List<>(0);
        [DataMember(Name="holdouts"), Preserve]
        public List<> _holdouts { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<I> Integrations => _integrations ?? new List<>(0);
        [DataMember(Name="integrations"), Preserve]
        public List<> _integrations { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="start_time_sec"), Preserve]
        public string StartTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="template_id"), Preserve]
        public string TemplateId { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Audiences: [", string.Join(", ", Audiences), "], ");
            output = string.Concat(output, "CategoryIds: [", string.Join(", ", CategoryIds), "], ");

            var channelsString = "";
            foreach (var kvp in Channels)
            {
                channelsString = string.Concat(channelsString, "{" + kvp.Key + "=" + kvp.Value + "}");
            }
            output = string.Concat(output, "Channels: [" + channelsString + "]");
            output = string.Concat(output, "CronExpr: ", CronExpr, ", ");
            output = string.Concat(output, "EndTimeSec: ", EndTimeSec, ", ");
            output = string.Concat(output, "Holdouts: [", string.Join(", ", Holdouts), "], ");
            output = string.Concat(output, "Integrations: [", string.Join(", ", Integrations), "], ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "StartTimeSec: ", StartTimeSec, ", ");
            output = string.Concat(output, "TemplateId: ", TemplateId, ", ");
            return output;
        }
    }

    /// <summary>
    /// Request to update a new metric definition.
    /// </summary>
    public interface IApiConsole_MetricUpdateRequest
    {

        /// <summary>
        /// Denominator metric, mandatory if the type is hybrid.
        /// </summary>
        string DenominatorMetricId { get; }

        /// <summary>
        /// Description.
        /// </summary>
        string Description { get; }

        /// <summary>
        /// Event name.
        /// </summary>
        string EventName { get; }

        /// <summary>
        /// Metric type.
        /// </summary>no definition found: 
        I MetricType { get; }

        /// <summary>
        /// Name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Numerator metric, mandatory if the type is hybrid.
        /// </summary>
        string NumeratorMetricId { get; }

        /// <summary>
        /// Ordering.
        /// </summary>no definition found: 
        I Order { get; }
    }

    /// <inheritdoc />
    internal class ApiConsole_MetricUpdateRequest : IApiConsole_MetricUpdateRequest
    {

        /// <inheritdoc />
        [DataMember(Name="denominator_metric_id"), Preserve]
        public string DenominatorMetricId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="description"), Preserve]
        public string Description { get; set; }

        /// <inheritdoc />
        [DataMember(Name="event_name"), Preserve]
        public string EventName { get; set; }

        /// <inheritdoc />no definition found: 
        [IgnoreDataMember]
        public I MetricType => _metricType;
        [DataMember(Name="metric_type"), Preserve]
        public  _metricType { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="numerator_metric_id"), Preserve]
        public string NumeratorMetricId { get; set; }

        /// <inheritdoc />no definition found: 
        [IgnoreDataMember]
        public I Order => _order;
        [DataMember(Name="order"), Preserve]
        public  _order { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "DenominatorMetricId: ", DenominatorMetricId, ", ");
            output = string.Concat(output, "Description: ", Description, ", ");
            output = string.Concat(output, "EventName: ", EventName, ", ");
            output = string.Concat(output, "MetricType: ", MetricType, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "NumeratorMetricId: ", NumeratorMetricId, ", ");
            output = string.Concat(output, "Order: ", Order, ", ");
            return output;
        }
    }

    /// <summary>
    /// The request to update a template.
    /// </summary>
    public interface IApiConsole_TemplateUpdateRequest
    {

        /// <summary>
        /// Category label identifiers.
        /// </summary>
        IEnumerable<I> CategoryIds { get; }

        /// <summary>
        /// The image_url for the message.
        /// </summary>
        string ImageUrl { get; }

        /// <summary>
        /// 
        /// </summary>
        string JsonMetadata { get; }

        /// <summary>
        /// The new name for the template.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// The title to generate the message's title.
        /// </summary>
        string Title { get; }

        /// <summary>
        /// The template value to generate the message's content.
        /// </summary>
        string Value { get; }

        /// <summary>
        /// 
        /// </summary>
        string ValueType { get; }
    }

    /// <inheritdoc />
    internal class ApiConsole_TemplateUpdateRequest : IApiConsole_TemplateUpdateRequest
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<I> CategoryIds => _categoryIds ?? new List<>(0);
        [DataMember(Name="category_ids"), Preserve]
        public List<> _categoryIds { get; set; }

        /// <inheritdoc />
        [DataMember(Name="image_url"), Preserve]
        public string ImageUrl { get; set; }

        /// <inheritdoc />
        [DataMember(Name="json_metadata"), Preserve]
        public string JsonMetadata { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="title"), Preserve]
        public string Title { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value_type"), Preserve]
        public string ValueType { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "CategoryIds: [", string.Join(", ", CategoryIds), "], ");
            output = string.Concat(output, "ImageUrl: ", ImageUrl, ", ");
            output = string.Concat(output, "JsonMetadata: ", JsonMetadata, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Title: ", Title, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            output = string.Concat(output, "ValueType: ", ValueType, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IApiConsole_TemplateVariantUpdateRequest
    {

        /// <summary>
        /// The image_url for the message.
        /// </summary>
        string ImageUrl { get; }

        /// <summary>
        /// The title to generate the message's title.
        /// </summary>
        string Title { get; }

        /// <summary>
        /// The template value to generate the message's content.
        /// </summary>
        string Value { get; }
    }

    /// <inheritdoc />
    internal class ApiConsole_TemplateVariantUpdateRequest : IApiConsole_TemplateVariantUpdateRequest
    {

        /// <inheritdoc />
        [DataMember(Name="image_url"), Preserve]
        public string ImageUrl { get; set; }

        /// <inheritdoc />
        [DataMember(Name="title"), Preserve]
        public string Title { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "ImageUrl: ", ImageUrl, ", ");
            output = string.Concat(output, "Title: ", Title, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            return output;
        }
    }

    /// <summary>
    /// The request to update a webhook.
    /// </summary>
    public interface IApiConsole_WebhookUpdateRequest
    {

        /// <summary>
        /// The description of the webhook.
        /// </summary>
        string Description { get; }

        /// <summary>
        /// If the webhook is enabled.
        /// </summary>
        bool Enabled { get; }

        /// <summary>
        /// 
        /// </summary>
        IEnumerable<I> Events { get; }

        /// <summary>
        /// The webhook request custom HTTP header name.
        /// </summary>
        string HeaderName { get; }

        /// <summary>
        /// The webhook request custom HTTP header value.
        /// </summary>
        string HeaderValue { get; }

        /// <summary>
        /// The URL of the webhook.
        /// </summary>
        string Url { get; }
    }

    /// <inheritdoc />
    internal class ApiConsole_WebhookUpdateRequest : IApiConsole_WebhookUpdateRequest
    {

        /// <inheritdoc />
        [DataMember(Name="description"), Preserve]
        public string Description { get; set; }

        /// <inheritdoc />
        [DataMember(Name="enabled"), Preserve]
        public bool Enabled { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<I> Events => _events ?? new List<>(0);
        [DataMember(Name="events"), Preserve]
        public List<> _events { get; set; }

        /// <inheritdoc />
        [DataMember(Name="header_name"), Preserve]
        public string HeaderName { get; set; }

        /// <inheritdoc />
        [DataMember(Name="header_value"), Preserve]
        public string HeaderValue { get; set; }

        /// <inheritdoc />
        [DataMember(Name="url"), Preserve]
        public string Url { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Description: ", Description, ", ");
            output = string.Concat(output, "Enabled: ", Enabled, ", ");
            output = string.Concat(output, "Events: [", string.Join(", ", Events), "], ");
            output = string.Concat(output, "HeaderName: ", HeaderName, ", ");
            output = string.Concat(output, "HeaderValue: ", HeaderValue, ", ");
            output = string.Concat(output, "Url: ", Url, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public enum AppleMessageConfigurationEnvType
    {
        /// <summary>
        /// The APNs environment type.
        /// </summary>
        PRODUCTION = 0,
        /// <summary>
        /// 
        /// </summary>
        DEVELOPMENT = 1,
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IAttributionUpdateRequestStringArray
    {

        /// <summary>
        /// 
        /// </summary>
        List<string> Values { get; }
    }

    /// <inheritdoc />
    internal class AttributionUpdateRequestStringArray : IAttributionUpdateRequestStringArray
    {

        /// <inheritdoc />
        [DataMember(Name="values"), Preserve]
        public List<string> Values { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Values: [", string.Join(", ", Values), "], ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public enum AuditLogAction
    {
        /// <summary>
        /// 
        /// </summary>
        CREATE = 0,
        /// <summary>
        /// 
        /// </summary>
        UPDATE = 1,
        /// <summary>
        /// 
        /// </summary>
        DELETE = 2,
        /// <summary>
        /// 
        /// </summary>
        EXPORT = 3,
        /// <summary>
        /// 
        /// </summary>
        IMPORT = 4,
        /// <summary>
        /// 
        /// </summary>
        UNDO_DELETE = 5,
        /// <summary>
        /// 
        /// </summary>
        UNDO_UPDATE = 6,
        /// <summary>
        /// 
        /// </summary>
        UNDO_IMPORT = 7,
    }

    /// <summary>
    /// The response to GetCurrentRequest.
    /// </summary>
    public interface IAuditLogGetCurrentResponse
    {

        /// <summary>
        /// The current state of the audited item.
        /// </summary>
        string Item { get; }
    }

    /// <inheritdoc />
    internal class AuditLogGetCurrentResponse : IAuditLogGetCurrentResponse
    {

        /// <inheritdoc />
        [DataMember(Name="item"), Preserve]
        public string Item { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Item: ", Item, ", ");
            return output;
        }
    }

    /// <summary>
    /// A warning for a configuration field.
    /// </summary>
    public interface IConfigurationWarning
    {

        /// <summary>
        /// The config field this warning is for in a JSON pointer format.
        /// </summary>
        string Field { get; }

        /// <summary>
        /// Warning message text.
        /// </summary>
        string Message { get; }
    }

    /// <inheritdoc />
    internal class ConfigurationWarning : IConfigurationWarning
    {

        /// <inheritdoc />
        [DataMember(Name="field"), Preserve]
        public string Field { get; set; }

        /// <inheritdoc />
        [DataMember(Name="message"), Preserve]
        public string Message { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Field: ", Field, ", ");
            output = string.Concat(output, "Message: ", Message, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public enum DataLakeConfigurationS3ExportFormat
    {
        /// <summary>
        /// 
        /// </summary>
        UNKNOWN = 0,
        /// <summary>
        /// 
        /// </summary>
        JSON = 1,
        /// <summary>
        /// 
        /// </summary>
        PARQUET = 2,
    }

    /// <summary>
    /// The outcome of using a specific integration.
    /// </summary>
    public interface IDeliveryResultIntegrationResult
    {

        /// <summary>
        /// The channel type used for the message delivery.
        /// </summary>
        ConsoleMessageChannelType ChannelType { get; }

        /// <summary>
        /// An error message, if the delivery failed.
        /// </summary>
        string ErrorMessage { get; }

        /// <summary>
        /// The integration type used for the message delivery.
        /// </summary>
        ConsoleMessageIntegrationType IntegrationType { get; }

        /// <summary>
        /// Whether the message was successfully delivered using this integration.
        /// </summary>
        bool Success { get; }
    }

    /// <inheritdoc />
    internal class DeliveryResultIntegrationResult : IDeliveryResultIntegrationResult
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public ConsoleMessageChannelType ChannelType => _channelType;
        [DataMember(Name="channel_type"), Preserve]
        public ConsoleMessageChannelType _channelType { get; set; }

        /// <inheritdoc />
        [DataMember(Name="error_message"), Preserve]
        public string ErrorMessage { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public ConsoleMessageIntegrationType IntegrationType => _integrationType;
        [DataMember(Name="integration_type"), Preserve]
        public ConsoleMessageIntegrationType _integrationType { get; set; }

        /// <inheritdoc />
        [DataMember(Name="success"), Preserve]
        public bool Success { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "ChannelType: ", ChannelType, ", ");
            output = string.Concat(output, "ErrorMessage: ", ErrorMessage, ", ");
            output = string.Concat(output, "IntegrationType: ", IntegrationType, ", ");
            output = string.Concat(output, "Success: ", Success, ", ");
            return output;
        }
    }

    /// <summary>
    /// A calendar view of an experiment phase.
    /// </summary>
    public interface IExperimentPhaseCalendarView
    {

        /// <summary>
        /// The description.
        /// </summary>
        string Description { get; }

        /// <summary>
        /// Scheduled end time.
        /// </summary>
        string EndTimeSec { get; }

        /// <summary>
        /// The experiment id.
        /// </summary>
        string ExperimentId { get; }

        /// <summary>
        /// Identifier.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// Name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Scheduled start time.
        /// </summary>
        string StartTimeSec { get; }

        /// <summary>
        /// Stop time, if stopped early.
        /// </summary>
        string StopTimeSec { get; }
    }

    /// <inheritdoc />
    internal class ExperimentPhaseCalendarView : IExperimentPhaseCalendarView
    {

        /// <inheritdoc />
        [DataMember(Name="description"), Preserve]
        public string Description { get; set; }

        /// <inheritdoc />
        [DataMember(Name="end_time_sec"), Preserve]
        public string EndTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="experiment_id"), Preserve]
        public string ExperimentId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="start_time_sec"), Preserve]
        public string StartTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="stop_time_sec"), Preserve]
        public string StopTimeSec { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Description: ", Description, ", ");
            output = string.Concat(output, "EndTimeSec: ", EndTimeSec, ", ");
            output = string.Concat(output, "ExperimentId: ", ExperimentId, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "StartTimeSec: ", StartTimeSec, ", ");
            output = string.Concat(output, "StopTimeSec: ", StopTimeSec, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IExperimentPhaseExportVariant
    {

        /// <summary>
        /// Overridden flags.
        /// </summary>
        IEnumerable<IExportVariantFlag> Flags { get; }

        /// <summary>
        /// Variant id.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// Variant Name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Split percentage as a number 0-100.
        /// </summary>
        int Split { get; }

        /// <summary>
        /// Variant value.
        /// </summary>
        string Value { get; }
    }

    /// <inheritdoc />
    internal class ExperimentPhaseExportVariant : IExperimentPhaseExportVariant
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IExportVariantFlag> Flags => _flags ?? new List<ExportVariantFlag>(0);
        [DataMember(Name="flags"), Preserve]
        public List<ExportVariantFlag> _flags { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="split"), Preserve]
        public int Split { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Flags: [", string.Join(", ", Flags), "], ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Split: ", Split, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IExperimentPhasePhaseResults
    {

        /// <summary>
        /// 
        /// </summary>
        IEnumerable<IPhaseResultsMetricResultSet> Results { get; }
    }

    /// <inheritdoc />
    internal class ExperimentPhasePhaseResults : IExperimentPhasePhaseResults
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IPhaseResultsMetricResultSet> Results => _results ?? new List<PhaseResultsMetricResultSet>(0);
        [DataMember(Name="results"), Preserve]
        public List<PhaseResultsMetricResultSet> _results { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Results: [", string.Join(", ", Results), "], ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IExportVariantFlag
    {

        /// <summary>
        /// Flag id.
        /// </summary>
        string FlagId { get; }

        /// <summary>
        /// Flag name.
        /// </summary>
        string FlagName { get; }

        /// <summary>
        /// Identifier.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// Flag value.
        /// </summary>
        string Value { get; }
    }

    /// <inheritdoc />
    internal class ExportVariantFlag : IExportVariantFlag
    {

        /// <inheritdoc />
        [DataMember(Name="flag_id"), Preserve]
        public string FlagId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="flag_name"), Preserve]
        public string FlagName { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "FlagId: ", FlagId, ", ");
            output = string.Concat(output, "FlagName: ", FlagName, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IIdentityMessageChannelStatus
    {

        /// <summary>
        /// Delivery time, if successful.
        /// </summary>
        string DeliveryTimeSec { get; }

        /// <summary>
        /// Delivery error, if failed.
        /// </summary>
        string ErrorMessage { get; }
    }

    /// <inheritdoc />
    internal class IdentityMessageChannelStatus : IIdentityMessageChannelStatus
    {

        /// <inheritdoc />
        [DataMember(Name="delivery_time_sec"), Preserve]
        public string DeliveryTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="error_message"), Preserve]
        public string ErrorMessage { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "DeliveryTimeSec: ", DeliveryTimeSec, ", ");
            output = string.Concat(output, "ErrorMessage: ", ErrorMessage, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IIdentityMessageIntegrationStatus
    {

        /// <summary>
        /// Status by channel, if applicable.
        /// </summary>
        IDictionary<string, IIdentityMessageChannelStatus> ChannelStatus { get; }

        /// <summary>
        /// Delivery time, if successful.
        /// </summary>
        string DeliveryTimeSec { get; }

        /// <summary>
        /// Delivery error, if failed.
        /// </summary>
        string ErrorMessage { get; }
    }

    /// <inheritdoc />
    internal class IdentityMessageIntegrationStatus : IIdentityMessageIntegrationStatus
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IDictionary<string, IIdentityMessageChannelStatus> ChannelStatus  => _channelStatus ?? new Dictionary<string, IIdentityMessageChannelStatus>();
        [DataMember(Name="channel_status"), Preserve]
        public Dictionary<string, IIdentityMessageChannelStatus> _channelStatus { get; set; }

        /// <inheritdoc />
        [DataMember(Name="delivery_time_sec"), Preserve]
        public string DeliveryTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="error_message"), Preserve]
        public string ErrorMessage { get; set; }

        public override string ToString()
        {
            var output = "";

            var channelStatusString = "";
            foreach (var kvp in ChannelStatus)
            {
                channelStatusString = string.Concat(channelStatusString, "{" + kvp.Key + "=" + kvp.Value + "}");
            }
            output = string.Concat(output, "ChannelStatus: [" + channelStatusString + "]");
            output = string.Concat(output, "DeliveryTimeSec: ", DeliveryTimeSec, ", ");
            output = string.Concat(output, "ErrorMessage: ", ErrorMessage, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IInsightMetricsFiltersAdAttributionCampaign
    {

        /// <summary>
        /// The creative filters available.
        /// </summary>
        IEnumerable<IConsoleInsightMetricsFiltersBasicFilter> Creatives { get; }

        /// <summary>
        /// The id to filter by.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// The name to filter by.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// The number of identities that match the filter.
        /// </summary>
        string Size { get; }
    }

    /// <inheritdoc />
    internal class InsightMetricsFiltersAdAttributionCampaign : IInsightMetricsFiltersAdAttributionCampaign
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleInsightMetricsFiltersBasicFilter> Creatives => _creatives ?? new List<ConsoleInsightMetricsFiltersBasicFilter>(0);
        [DataMember(Name="creatives"), Preserve]
        public List<ConsoleInsightMetricsFiltersBasicFilter> _creatives { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="size"), Preserve]
        public string Size { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Creatives: [", string.Join(", ", Creatives), "], ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Size: ", Size, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IInsightMetricsFiltersAdAttributionChannel
    {

        /// <summary>
        /// The campaign filters available.
        /// </summary>
        IEnumerable<IInsightMetricsFiltersAdAttributionCampaign> Campaigns { get; }

        /// <summary>
        /// The id to filter by.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// The name to filter by.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// The number of identities that match the filter.
        /// </summary>
        string Size { get; }
    }

    /// <inheritdoc />
    internal class InsightMetricsFiltersAdAttributionChannel : IInsightMetricsFiltersAdAttributionChannel
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IInsightMetricsFiltersAdAttributionCampaign> Campaigns => _campaigns ?? new List<InsightMetricsFiltersAdAttributionCampaign>(0);
        [DataMember(Name="campaigns"), Preserve]
        public List<InsightMetricsFiltersAdAttributionCampaign> _campaigns { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="size"), Preserve]
        public string Size { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Campaigns: [", string.Join(", ", Campaigns), "], ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Size: ", Size, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IInsightMetricsFiltersAdAttributionPlatform
    {

        /// <summary>
        /// The campaign filters available.
        /// </summary>
        IEnumerable<IInsightMetricsFiltersAdAttributionChannel> Channels { get; }

        /// <summary>
        /// The id to filter by.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// The name to filter by.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// The number of identities that match the filter.
        /// </summary>
        string Size { get; }
    }

    /// <inheritdoc />
    internal class InsightMetricsFiltersAdAttributionPlatform : IInsightMetricsFiltersAdAttributionPlatform
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IInsightMetricsFiltersAdAttributionChannel> Channels => _channels ?? new List<InsightMetricsFiltersAdAttributionChannel>(0);
        [DataMember(Name="channels"), Preserve]
        public List<InsightMetricsFiltersAdAttributionChannel> _channels { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="size"), Preserve]
        public string Size { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Channels: [", string.Join(", ", Channels), "], ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Size: ", Size, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface ILiveEventCalendarItem
    {

        /// <summary>
        /// Audience list.
        /// </summary>
        IEnumerable<IConsoleAudienceView> Audiences { get; }

        /// <summary>
        /// Category labels.
        /// </summary>
        IEnumerable<IConsoleCategoryView> Categories { get; }

        /// <summary>
        /// Color hex, for the calendar view.
        /// </summary>
        string Color { get; }

        /// <summary>
        /// Create time.
        /// </summary>
        string CreateTimeSec { get; }

        /// <summary>
        /// Description.
        /// </summary>
        string Description { get; }

        /// <summary>
        /// Duration in seconds.
        /// </summary>
        string DurationSec { get; }

        /// <summary>
        /// End time, 0 if it repeats forever.
        /// </summary>
        string EndTimeSec { get; }

        /// <summary>
        /// Flag overrides, if any.
        /// </summary>
        IEnumerable<ILiveEventCalendarItemFlagView> Flags { get; }

        /// <summary>
        /// Audience holdout list.
        /// </summary>
        IEnumerable<IConsoleAudienceView> Holdouts { get; }

        /// <summary>
        /// Identifier.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// Sticky membership.
        /// </summary>
        bool Membership { get; }

        /// <summary>
        /// Monitor metric list.
        /// </summary>
        IEnumerable<IConsoleMetricView> MonitorMetrics { get; }

        /// <summary>
        /// Name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Reset CRON schedule, if configured.
        /// </summary>
        string ResetCron { get; }

        /// <summary>
        /// Value's schema.
        /// </summary>
        IConsoleSchemaView Schema { get; }

        /// <summary>
        /// Start time.
        /// </summary>
        string StartTimeSec { get; }

        /// <summary>
        /// The status of an live event.
        /// </summary>
        ConsoleLiveEventStatus Status { get; }

        /// <summary>
        /// Update time.
        /// </summary>
        string UpdateTimeSec { get; }

        /// <summary>
        /// Optional webhook.
        /// </summary>
        string Webhook { get; }
    }

    /// <inheritdoc />
    internal class LiveEventCalendarItem : ILiveEventCalendarItem
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleAudienceView> Audiences => _audiences ?? new List<ConsoleAudienceView>(0);
        [DataMember(Name="audiences"), Preserve]
        public List<ConsoleAudienceView> _audiences { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleCategoryView> Categories => _categories ?? new List<ConsoleCategoryView>(0);
        [DataMember(Name="categories"), Preserve]
        public List<ConsoleCategoryView> _categories { get; set; }

        /// <inheritdoc />
        [DataMember(Name="color"), Preserve]
        public string Color { get; set; }

        /// <inheritdoc />
        [DataMember(Name="create_time_sec"), Preserve]
        public string CreateTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="description"), Preserve]
        public string Description { get; set; }

        /// <inheritdoc />
        [DataMember(Name="duration_sec"), Preserve]
        public string DurationSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="end_time_sec"), Preserve]
        public string EndTimeSec { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<ILiveEventCalendarItemFlagView> Flags => _flags ?? new List<LiveEventCalendarItemFlagView>(0);
        [DataMember(Name="flags"), Preserve]
        public List<LiveEventCalendarItemFlagView> _flags { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleAudienceView> Holdouts => _holdouts ?? new List<ConsoleAudienceView>(0);
        [DataMember(Name="holdouts"), Preserve]
        public List<ConsoleAudienceView> _holdouts { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="membership"), Preserve]
        public bool Membership { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleMetricView> MonitorMetrics => _monitorMetrics ?? new List<ConsoleMetricView>(0);
        [DataMember(Name="monitor_metrics"), Preserve]
        public List<ConsoleMetricView> _monitorMetrics { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="reset_cron"), Preserve]
        public string ResetCron { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleSchemaView Schema => _schema;
        [DataMember(Name="schema"), Preserve]
        public ConsoleSchemaView _schema { get; set; }

        /// <inheritdoc />
        [DataMember(Name="start_time_sec"), Preserve]
        public string StartTimeSec { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public ConsoleLiveEventStatus Status => _status;
        [DataMember(Name="status"), Preserve]
        public ConsoleLiveEventStatus _status { get; set; }

        /// <inheritdoc />
        [DataMember(Name="update_time_sec"), Preserve]
        public string UpdateTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="webhook"), Preserve]
        public string Webhook { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Audiences: [", string.Join(", ", Audiences), "], ");
            output = string.Concat(output, "Categories: [", string.Join(", ", Categories), "], ");
            output = string.Concat(output, "Color: ", Color, ", ");
            output = string.Concat(output, "CreateTimeSec: ", CreateTimeSec, ", ");
            output = string.Concat(output, "Description: ", Description, ", ");
            output = string.Concat(output, "DurationSec: ", DurationSec, ", ");
            output = string.Concat(output, "EndTimeSec: ", EndTimeSec, ", ");
            output = string.Concat(output, "Flags: [", string.Join(", ", Flags), "], ");
            output = string.Concat(output, "Holdouts: [", string.Join(", ", Holdouts), "], ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Membership: ", Membership, ", ");
            output = string.Concat(output, "MonitorMetrics: [", string.Join(", ", MonitorMetrics), "], ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "ResetCron: ", ResetCron, ", ");
            output = string.Concat(output, "Schema: ", Schema, ", ");
            output = string.Concat(output, "StartTimeSec: ", StartTimeSec, ", ");
            output = string.Concat(output, "Status: ", Status, ", ");
            output = string.Concat(output, "UpdateTimeSec: ", UpdateTimeSec, ", ");
            output = string.Concat(output, "Webhook: ", Webhook, ", ");
            return output;
        }
    }

    /// <summary>
    /// A flag view.
    /// </summary>
    public interface ILiveEventCalendarItemFlagView
    {

        /// <summary>
        /// Flag id.
        /// </summary>
        string FlagId { get; }

        /// <summary>
        /// Flag name.
        /// </summary>
        string FlagName { get; }

        /// <summary>
        /// Identifier.
        /// </summary>
        string Id { get; }
    }

    /// <inheritdoc />
    internal class LiveEventCalendarItemFlagView : ILiveEventCalendarItemFlagView
    {

        /// <inheritdoc />
        [DataMember(Name="flag_id"), Preserve]
        public string FlagId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="flag_name"), Preserve]
        public string FlagName { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "FlagId: ", FlagId, ", ");
            output = string.Concat(output, "FlagName: ", FlagName, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");
            return output;
        }
    }

    /// <summary>
    /// A live event flag create request.
    /// </summary>
    public interface ILiveEventFlagUpsertRequest
    {

        /// <summary>
        /// The flag identifier.
        /// </summary>
        string FlagId { get; }

        /// <summary>
        /// The live event flag identifier.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// Value.
        /// </summary>
        string Value { get; }

        /// <summary>
        /// The value variants.
        /// </summary>
        IEnumerable<ILiveEventFlagVariantUpsertRequest> Variants { get; }
    }

    /// <inheritdoc />
    internal class LiveEventFlagUpsertRequest : ILiveEventFlagUpsertRequest
    {

        /// <inheritdoc />
        [DataMember(Name="flag_id"), Preserve]
        public string FlagId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<ILiveEventFlagVariantUpsertRequest> Variants => _variants ?? new List<LiveEventFlagVariantUpsertRequest>(0);
        [DataMember(Name="variants"), Preserve]
        public List<LiveEventFlagVariantUpsertRequest> _variants { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "FlagId: ", FlagId, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            output = string.Concat(output, "Variants: [", string.Join(", ", Variants), "], ");
            return output;
        }
    }

    /// <summary>
    /// A live event flag create request.
    /// </summary>
    public interface ILiveEventFlagVariantUpsertRequest
    {

        /// <summary>
        /// Audience identifiers.
        /// </summary>
        List<string> AudienceIds { get; }

        /// <summary>
        /// The live event flag identifier.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// The variant name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// The position.
        /// </summary>
        int Position { get; }

        /// <summary>
        /// The variant value.
        /// </summary>
        string Value { get; }
    }

    /// <inheritdoc />
    internal class LiveEventFlagVariantUpsertRequest : ILiveEventFlagVariantUpsertRequest
    {

        /// <inheritdoc />
        [DataMember(Name="audience_ids"), Preserve]
        public List<string> AudienceIds { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="position"), Preserve]
        public int Position { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "AudienceIds: [", string.Join(", ", AudienceIds), "], ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Position: ", Position, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            return output;
        }
    }

    /// <summary>
    /// A flag variant view.
    /// </summary>
    public interface ILiveEventFlagViewVariantView
    {

        /// <summary>
        /// Audience identifiers.
        /// </summary>
        List<string> AudienceIds { get; }

        /// <summary>
        /// Identifier.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// Name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Position.
        /// </summary>
        int Position { get; }

        /// <summary>
        /// Value.
        /// </summary>
        string Value { get; }
    }

    /// <inheritdoc />
    internal class LiveEventFlagViewVariantView : ILiveEventFlagViewVariantView
    {

        /// <inheritdoc />
        [DataMember(Name="audience_ids"), Preserve]
        public List<string> AudienceIds { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="position"), Preserve]
        public int Position { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "AudienceIds: [", string.Join(", ", AudienceIds), "], ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Position: ", Position, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface ILiveEventListItem
    {

        /// <summary>
        /// End time of current or upcoming event run, if it is not terminated.
        /// </summary>
        string ActiveEndTimeSec { get; }

        /// <summary>
        /// Start time of current or upcoming event run, if it is not terminated.
        /// </summary>
        string ActiveStartTimeSec { get; }

        /// <summary>
        /// Audience list.
        /// </summary>
        IEnumerable<IConsoleAudienceView> Audiences { get; }

        /// <summary>
        /// Category labels.
        /// </summary>
        IEnumerable<IConsoleCategoryView> Categories { get; }

        /// <summary>
        /// Color hex, for the calendar view.
        /// </summary>
        string Color { get; }

        /// <summary>
        /// Create time.
        /// </summary>
        string CreateTimeSec { get; }

        /// <summary>
        /// Description.
        /// </summary>
        string Description { get; }

        /// <summary>
        /// Duration in seconds.
        /// </summary>
        string DurationSec { get; }

        /// <summary>
        /// End time, 0 if it repeats forever.
        /// </summary>
        string EndTimeSec { get; }

        /// <summary>
        /// Requires explicit join. Membership will be sticky if true.
        /// </summary>
        bool ExplicitJoin { get; }

        /// <summary>
        /// Flag overrides, if any.
        /// </summary>
        IEnumerable<ILiveEventListItemFlagView> Flags { get; }

        /// <summary>
        /// Audience holdout list.
        /// </summary>
        IEnumerable<IConsoleAudienceView> Holdouts { get; }

        /// <summary>
        /// Identifier.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// Sticky membership.
        /// </summary>
        bool Membership { get; }

        /// <summary>
        /// Monitor metric list.
        /// </summary>
        IEnumerable<IConsoleMetricView> MonitorMetrics { get; }

        /// <summary>
        /// Name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Reset CRON schedule, if configured.
        /// </summary>
        string ResetCron { get; }

        /// <summary>
        /// Value's schema.
        /// </summary>
        IConsoleSchemaView Schema { get; }

        /// <summary>
        /// Start time.
        /// </summary>
        string StartTimeSec { get; }

        /// <summary>
        /// The status of an live event.
        /// </summary>
        ConsoleLiveEventStatus Status { get; }

        /// <summary>
        /// Update time.
        /// </summary>
        string UpdateTimeSec { get; }

        /// <summary>
        /// Optional webhook.
        /// </summary>
        string Webhook { get; }
    }

    /// <inheritdoc />
    internal class LiveEventListItem : ILiveEventListItem
    {

        /// <inheritdoc />
        [DataMember(Name="active_end_time_sec"), Preserve]
        public string ActiveEndTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="active_start_time_sec"), Preserve]
        public string ActiveStartTimeSec { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleAudienceView> Audiences => _audiences ?? new List<ConsoleAudienceView>(0);
        [DataMember(Name="audiences"), Preserve]
        public List<ConsoleAudienceView> _audiences { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleCategoryView> Categories => _categories ?? new List<ConsoleCategoryView>(0);
        [DataMember(Name="categories"), Preserve]
        public List<ConsoleCategoryView> _categories { get; set; }

        /// <inheritdoc />
        [DataMember(Name="color"), Preserve]
        public string Color { get; set; }

        /// <inheritdoc />
        [DataMember(Name="create_time_sec"), Preserve]
        public string CreateTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="description"), Preserve]
        public string Description { get; set; }

        /// <inheritdoc />
        [DataMember(Name="duration_sec"), Preserve]
        public string DurationSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="end_time_sec"), Preserve]
        public string EndTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="explicit_join"), Preserve]
        public bool ExplicitJoin { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<ILiveEventListItemFlagView> Flags => _flags ?? new List<LiveEventListItemFlagView>(0);
        [DataMember(Name="flags"), Preserve]
        public List<LiveEventListItemFlagView> _flags { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleAudienceView> Holdouts => _holdouts ?? new List<ConsoleAudienceView>(0);
        [DataMember(Name="holdouts"), Preserve]
        public List<ConsoleAudienceView> _holdouts { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="membership"), Preserve]
        public bool Membership { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleMetricView> MonitorMetrics => _monitorMetrics ?? new List<ConsoleMetricView>(0);
        [DataMember(Name="monitor_metrics"), Preserve]
        public List<ConsoleMetricView> _monitorMetrics { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="reset_cron"), Preserve]
        public string ResetCron { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleSchemaView Schema => _schema;
        [DataMember(Name="schema"), Preserve]
        public ConsoleSchemaView _schema { get; set; }

        /// <inheritdoc />
        [DataMember(Name="start_time_sec"), Preserve]
        public string StartTimeSec { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public ConsoleLiveEventStatus Status => _status;
        [DataMember(Name="status"), Preserve]
        public ConsoleLiveEventStatus _status { get; set; }

        /// <inheritdoc />
        [DataMember(Name="update_time_sec"), Preserve]
        public string UpdateTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="webhook"), Preserve]
        public string Webhook { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "ActiveEndTimeSec: ", ActiveEndTimeSec, ", ");
            output = string.Concat(output, "ActiveStartTimeSec: ", ActiveStartTimeSec, ", ");
            output = string.Concat(output, "Audiences: [", string.Join(", ", Audiences), "], ");
            output = string.Concat(output, "Categories: [", string.Join(", ", Categories), "], ");
            output = string.Concat(output, "Color: ", Color, ", ");
            output = string.Concat(output, "CreateTimeSec: ", CreateTimeSec, ", ");
            output = string.Concat(output, "Description: ", Description, ", ");
            output = string.Concat(output, "DurationSec: ", DurationSec, ", ");
            output = string.Concat(output, "EndTimeSec: ", EndTimeSec, ", ");
            output = string.Concat(output, "ExplicitJoin: ", ExplicitJoin, ", ");
            output = string.Concat(output, "Flags: [", string.Join(", ", Flags), "], ");
            output = string.Concat(output, "Holdouts: [", string.Join(", ", Holdouts), "], ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Membership: ", Membership, ", ");
            output = string.Concat(output, "MonitorMetrics: [", string.Join(", ", MonitorMetrics), "], ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "ResetCron: ", ResetCron, ", ");
            output = string.Concat(output, "Schema: ", Schema, ", ");
            output = string.Concat(output, "StartTimeSec: ", StartTimeSec, ", ");
            output = string.Concat(output, "Status: ", Status, ", ");
            output = string.Concat(output, "UpdateTimeSec: ", UpdateTimeSec, ", ");
            output = string.Concat(output, "Webhook: ", Webhook, ", ");
            return output;
        }
    }

    /// <summary>
    /// A flag view.
    /// </summary>
    public interface ILiveEventListItemFlagView
    {

        /// <summary>
        /// Flag id.
        /// </summary>
        string FlagId { get; }

        /// <summary>
        /// Flag name.
        /// </summary>
        string FlagName { get; }

        /// <summary>
        /// Identifier.
        /// </summary>
        string Id { get; }
    }

    /// <inheritdoc />
    internal class LiveEventListItemFlagView : ILiveEventListItemFlagView
    {

        /// <inheritdoc />
        [DataMember(Name="flag_id"), Preserve]
        public string FlagId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="flag_name"), Preserve]
        public string FlagName { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "FlagId: ", FlagId, ", ");
            output = string.Concat(output, "FlagName: ", FlagName, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface ILiveEventLiveEventExportFlag
    {

        /// <summary>
        /// Flag id.
        /// </summary>
        string FlagId { get; }

        /// <summary>
        /// Flag name.
        /// </summary>
        string FlagName { get; }

        /// <summary>
        /// Identifier.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// Value.
        /// </summary>
        string Value { get; }

        /// <summary>
        /// Variants.
        /// </summary>
        IEnumerable<ILiveEventLiveEventExportFlagVariantExport> Variants { get; }
    }

    /// <inheritdoc />
    internal class LiveEventLiveEventExportFlag : ILiveEventLiveEventExportFlag
    {

        /// <inheritdoc />
        [DataMember(Name="flag_id"), Preserve]
        public string FlagId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="flag_name"), Preserve]
        public string FlagName { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<ILiveEventLiveEventExportFlagVariantExport> Variants => _variants ?? new List<LiveEventLiveEventExportFlagVariantExport>(0);
        [DataMember(Name="variants"), Preserve]
        public List<LiveEventLiveEventExportFlagVariantExport> _variants { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "FlagId: ", FlagId, ", ");
            output = string.Concat(output, "FlagName: ", FlagName, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            output = string.Concat(output, "Variants: [", string.Join(", ", Variants), "], ");
            return output;
        }
    }

    /// <summary>
    /// A flag variant view.
    /// </summary>
    public interface ILiveEventLiveEventExportFlagVariantExport
    {

        /// <summary>
        /// Audience identifiers.
        /// </summary>
        List<string> AudienceIds { get; }

        /// <summary>
        /// Identifier.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// Name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Position.
        /// </summary>
        int Position { get; }

        /// <summary>
        /// Value.
        /// </summary>
        string Value { get; }
    }

    /// <inheritdoc />
    internal class LiveEventLiveEventExportFlagVariantExport : ILiveEventLiveEventExportFlagVariantExport
    {

        /// <inheritdoc />
        [DataMember(Name="audience_ids"), Preserve]
        public List<string> AudienceIds { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="position"), Preserve]
        public int Position { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "AudienceIds: [", string.Join(", ", AudienceIds), "], ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Position: ", Position, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            return output;
        }
    }

    /// <summary>
    /// A live event runs.
    /// </summary>
    public interface ILiveEventRunView
    {

        /// <summary>
        /// End time of period.
        /// </summary>
        string EndTimeSec { get; }

        /// <summary>
        /// Identifier.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// Start time of period.
        /// </summary>
        string StartTimeSec { get; }
    }

    /// <inheritdoc />
    internal class LiveEventRunView : ILiveEventRunView
    {

        /// <inheritdoc />
        [DataMember(Name="end_time_sec"), Preserve]
        public string EndTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="start_time_sec"), Preserve]
        public string StartTimeSec { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "EndTimeSec: ", EndTimeSec, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "StartTimeSec: ", StartTimeSec, ", ");
            return output;
        }
    }

    /// <summary>
    /// Details of each delivery attempt.
    /// </summary>
    public interface IMessageDirectSendResponseDeliveryResult
    {

        /// <summary>
        /// Results for each valid integration used in the delivery.
        /// </summary>
        IEnumerable<IDeliveryResultIntegrationResult> IntegrationResults { get; }

        /// <summary>
        /// The identity ID of the recipient.
        /// </summary>
        string RecipientId { get; }
    }

    /// <inheritdoc />
    internal class MessageDirectSendResponseDeliveryResult : IMessageDirectSendResponseDeliveryResult
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IDeliveryResultIntegrationResult> IntegrationResults => _integrationResults ?? new List<DeliveryResultIntegrationResult>(0);
        [DataMember(Name="integration_results"), Preserve]
        public List<DeliveryResultIntegrationResult> _integrationResults { get; set; }

        /// <inheritdoc />
        [DataMember(Name="recipient_id"), Preserve]
        public string RecipientId { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "IntegrationResults: [", string.Join(", ", IntegrationResults), "], ");
            output = string.Concat(output, "RecipientId: ", RecipientId, ", ");
            return output;
        }
    }

    /// <summary>
    /// A metric data set.
    /// </summary>
    public interface IPhaseResultsMetricResultSet
    {

        /// <summary>
        /// Phase total number of existing players
        /// </summary>
        int ExistingPlayers { get; }

        /// <summary>
        /// Metric type.
        /// </summary>
        ConsoleMetricType MetricType { get; }

        /// <summary>
        /// Metric name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Phase total number of new players
        /// </summary>
        int NewPlayers { get; }

        /// <summary>
        /// Ordering.
        /// </summary>
        ConsoleMetricOrder Order { get; }

        /// <summary>
        /// Metric value
        /// </summary>
        int Result { get; }

        /// <summary>
        /// Phase total number of players
        /// </summary>
        int TotalPlayers { get; }

        /// <summary>
        /// Phase variant name.
        /// </summary>
        string VariantName { get; }

        /// <summary>
        /// Variant split
        /// </summary>
        int VariantSplit { get; }
    }

    /// <inheritdoc />
    internal class PhaseResultsMetricResultSet : IPhaseResultsMetricResultSet
    {

        /// <inheritdoc />
        [DataMember(Name="existing_players"), Preserve]
        public int ExistingPlayers { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public ConsoleMetricType MetricType => _metricType;
        [DataMember(Name="metric_type"), Preserve]
        public ConsoleMetricType _metricType { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="new_players"), Preserve]
        public int NewPlayers { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public ConsoleMetricOrder Order => _order;
        [DataMember(Name="order"), Preserve]
        public ConsoleMetricOrder _order { get; set; }

        /// <inheritdoc />
        [DataMember(Name="result"), Preserve]
        public int Result { get; set; }

        /// <inheritdoc />
        [DataMember(Name="total_players"), Preserve]
        public int TotalPlayers { get; set; }

        /// <inheritdoc />
        [DataMember(Name="variant_name"), Preserve]
        public string VariantName { get; set; }

        /// <inheritdoc />
        [DataMember(Name="variant_split"), Preserve]
        public int VariantSplit { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "ExistingPlayers: ", ExistingPlayers, ", ");
            output = string.Concat(output, "MetricType: ", MetricType, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "NewPlayers: ", NewPlayers, ", ");
            output = string.Concat(output, "Order: ", Order, ", ");
            output = string.Concat(output, "Result: ", Result, ", ");
            output = string.Concat(output, "TotalPlayers: ", TotalPlayers, ", ");
            output = string.Concat(output, "VariantName: ", VariantName, ", ");
            output = string.Concat(output, "VariantSplit: ", VariantSplit, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public enum RejectedEventReason
    {
        /// <summary>
        /// 
        /// </summary>
        INVALID_VALUE = 0,
        /// <summary>
        /// 
        /// </summary>
        INVALID_METADATA = 1,
        /// <summary>
        /// 
        /// </summary>
        VALUE_LENGTH_EXCEEDED = 2,
        /// <summary>
        /// 
        /// </summary>
        METADATA_SIZE_EXCEEDED = 3,
        /// <summary>
        /// 
        /// </summary>
        INVALID_NAME = 4,
        /// <summary>
        /// 
        /// </summary>
        INVALID_ID = 5,
        /// <summary>
        /// 
        /// </summary>
        INVALID_SCHEMA = 6,
    }

    /// <summary>
    /// ISO 3166-2 country data.
    /// </summary>
    public interface IRetentionStatsFiltersCountry
    {

        /// <summary>
        /// The country code.
        /// </summary>
        string Code { get; }

        /// <summary>
        /// The county name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// The number of identities of the country.
        /// </summary>
        string Size { get; }
    }

    /// <inheritdoc />
    internal class RetentionStatsFiltersCountry : IRetentionStatsFiltersCountry
    {

        /// <inheritdoc />
        [DataMember(Name="code"), Preserve]
        public string Code { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="size"), Preserve]
        public string Size { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Code: ", Code, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Size: ", Size, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface ISchemaSchemaGraph
    {

        /// <summary>
        /// Outward immediate references.
        /// </summary>
        List<string> Children { get; }

        /// <summary>
        /// Schema ids for navigation.
        /// </summary>
        IDictionary<string, string> NameToId { get; }

        /// <summary>
        /// Unique schema paths.
        /// </summary>
        IEnumerable<ISchemaSchemaPath> Paths { get; }
    }

    /// <inheritdoc />
    internal class SchemaSchemaGraph : ISchemaSchemaGraph
    {

        /// <inheritdoc />
        [DataMember(Name="children"), Preserve]
        public List<string> Children { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IDictionary<string, string> NameToId => _nameToId ?? new Dictionary<string, string>();
        [DataMember(Name="name_to_id"), Preserve]
        public Dictionary<string, string> _nameToId { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<ISchemaSchemaPath> Paths => _paths ?? new List<SchemaSchemaPath>(0);
        [DataMember(Name="paths"), Preserve]
        public List<SchemaSchemaPath> _paths { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Children: [", string.Join(", ", Children), "], ");

            var nameToIdString = "";
            foreach (var kvp in NameToId)
            {
                nameToIdString = string.Concat(nameToIdString, "{" + kvp.Key + "=" + kvp.Value + "}");
            }
            output = string.Concat(output, "NameToId: [" + nameToIdString + "]");
            output = string.Concat(output, "Paths: [", string.Join(", ", Paths), "], ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface ISchemaSchemaPath
    {

        /// <summary>
        /// Whether the path has a circular reference.
        /// </summary>
        bool IsCycle { get; }

        /// <summary>
        /// Path with schema names.
        /// </summary>
        List<string> Path { get; }
    }

    /// <inheritdoc />
    internal class SchemaSchemaPath : ISchemaSchemaPath
    {

        /// <inheritdoc />
        [DataMember(Name="is_cycle"), Preserve]
        public bool IsCycle { get; set; }

        /// <inheritdoc />
        [DataMember(Name="path"), Preserve]
        public List<string> Path { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "IsCycle: ", IsCycle, ", ");
            output = string.Concat(output, "Path: [", string.Join(", ", Path), "], ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface ISchemaSchemaReference
    {

        /// <summary>
        /// 
        /// </summary>
        string Id { get; }

        /// <summary>
        /// 
        /// </summary>
        string Name { get; }
    }

    /// <inheritdoc />
    internal class SchemaSchemaReference : ISchemaSchemaReference
    {

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface ISchemaSchemaReferences
    {

        /// <summary>
        /// 
        /// </summary>
        IEnumerable<ISchemaSchemaReference> References { get; }
    }

    /// <inheritdoc />
    internal class SchemaSchemaReferences : ISchemaSchemaReferences
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<ISchemaSchemaReference> References => _references ?? new List<SchemaSchemaReference>(0);
        [DataMember(Name="references"), Preserve]
        public List<SchemaSchemaReference> _references { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "References: [", string.Join(", ", References), "], ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IWebhookTestPayloads
    {

        /// <summary>
        /// The list of payloads.
        /// </summary>
        List<string> Payloads { get; }
    }

    /// <inheritdoc />
    internal class WebhookTestPayloads : IWebhookTestPayloads
    {

        /// <inheritdoc />
        [DataMember(Name="payloads"), Preserve]
        public List<string> Payloads { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Payloads: [", string.Join(", ", Payloads), "], ");
            return output;
        }
    }

    /// <summary>
    /// The export data of an Advertisement Measurement Partner.
    /// </summary>
    public interface IConsoleAdvertisementMeasurementPartnerExport
    {

        /// <summary>
        /// The configuration of the integration.
        /// </summary>
        string Configuration { get; }

        /// <summary>
        /// The type of the integration.
        /// </summary>
        ConsoleAdvertisementMeasurementPartnerType Type { get; }

        /// <summary>
        /// The last time it was updated.
        /// </summary>
        string UpdateTime { get; }
    }

    /// <inheritdoc />
    internal class ConsoleAdvertisementMeasurementPartnerExport : IConsoleAdvertisementMeasurementPartnerExport
    {

        /// <inheritdoc />
        [DataMember(Name="configuration"), Preserve]
        public string Configuration { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public ConsoleAdvertisementMeasurementPartnerType Type => _type;
        [DataMember(Name="type"), Preserve]
        public ConsoleAdvertisementMeasurementPartnerType _type { get; set; }

        /// <inheritdoc />
        [DataMember(Name="update_time"), Preserve]
        public string UpdateTime { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Configuration: ", Configuration, ", ");
            output = string.Concat(output, "Type: ", Type, ", ");
            output = string.Concat(output, "UpdateTime: ", UpdateTime, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IConsoleAdvertisementMeasurementPartnerStatus
    {

        /// <summary>
        /// The Adjust configuration.
        /// </summary>
        IAdvertisementMeasurementPartnerAdjustConfiguration Adjust { get; }

        /// <summary>
        /// The status of the integration.
        /// </summary>
        bool Enabled { get; }

        /// <summary>
        /// The name of the integration.
        /// </summary>
        ConsoleAdvertisementMeasurementPartnerType Type { get; }

        /// <summary>
        /// The update time of the integration.
        /// </summary>
        string UpdateTimeSec { get; }
    }

    /// <inheritdoc />
    internal class ConsoleAdvertisementMeasurementPartnerStatus : IConsoleAdvertisementMeasurementPartnerStatus
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IAdvertisementMeasurementPartnerAdjustConfiguration Adjust => _adjust;
        [DataMember(Name="adjust"), Preserve]
        public AdvertisementMeasurementPartnerAdjustConfiguration _adjust { get; set; }

        /// <inheritdoc />
        [DataMember(Name="enabled"), Preserve]
        public bool Enabled { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public ConsoleAdvertisementMeasurementPartnerType Type => _type;
        [DataMember(Name="type"), Preserve]
        public ConsoleAdvertisementMeasurementPartnerType _type { get; set; }

        /// <inheritdoc />
        [DataMember(Name="update_time_sec"), Preserve]
        public string UpdateTimeSec { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Adjust: ", Adjust, ", ");
            output = string.Concat(output, "Enabled: ", Enabled, ", ");
            output = string.Concat(output, "Type: ", Type, ", ");
            output = string.Concat(output, "UpdateTimeSec: ", UpdateTimeSec, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public enum ConsoleAdvertisementMeasurementPartnerType
    {
        /// <summary>
        /// Integration types.
        /// </summary>
        UNKNOWN = 0,
        /// <summary>
        /// 
        /// </summary>
        ADJUST = 1,
    }

    /// <summary>
    /// An individual API key.
    /// </summary>
    public interface IConsoleApiKey
    {

        /// <summary>
        /// Create time.
        /// </summary>
        string CreateTimeSec { get; }

        /// <summary>
        /// Key name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Update time.
        /// </summary>
        string UpdateTimeSec { get; }

        /// <summary>
        /// Value.
        /// </summary>
        string Value { get; }
    }

    /// <inheritdoc />
    internal class ConsoleApiKey : IConsoleApiKey
    {

        /// <inheritdoc />
        [DataMember(Name="create_time_sec"), Preserve]
        public string CreateTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="update_time_sec"), Preserve]
        public string UpdateTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "CreateTimeSec: ", CreateTimeSec, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "UpdateTimeSec: ", UpdateTimeSec, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            return output;
        }
    }

    /// <summary>
    /// Request to create a new API key.
    /// </summary>
    public interface IConsoleApiKeyCreateRequest
    {

        /// <summary>
        /// Key name.
        /// </summary>
        string Name { get; }
    }

    /// <inheritdoc />
    internal class ConsoleApiKeyCreateRequest : IConsoleApiKeyCreateRequest
    {

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Name: ", Name, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IConsoleApiKeyExport
    {

        /// <summary>
        /// Key name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Value.
        /// </summary>
        string Value { get; }
    }

    /// <inheritdoc />
    internal class ConsoleApiKeyExport : IConsoleApiKeyExport
    {

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            return output;
        }
    }

    /// <summary>
    /// A list of API keys.
    /// </summary>
    public interface IConsoleApiKeys
    {

        /// <summary>
        /// Keys.
        /// </summary>
        IEnumerable<IConsoleApiKey> Keys { get; }
    }

    /// <inheritdoc />
    internal class ConsoleApiKeys : IConsoleApiKeys
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleApiKey> Keys => _keys ?? new List<ConsoleApiKey>(0);
        [DataMember(Name="keys"), Preserve]
        public List<ConsoleApiKey> _keys { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Keys: [", string.Join(", ", Keys), "], ");
            return output;
        }
    }

    /// <summary>
    /// The configuration necessary to integrate with APNs.
    /// </summary>
    public interface IConsoleAppleMessageConfiguration
    {

        /// <summary>
        /// 
        /// </summary>
        AppleMessageConfigurationEnvType Env { get; }

        /// <summary>
        /// 
        /// </summary>
        string P8AuthKeyId { get; }

        /// <summary>
        /// 
        /// </summary>
        string P8AuthKeyValue { get; }

        /// <summary>
        /// 
        /// </summary>
        string TeamId { get; }

        /// <summary>
        /// 
        /// </summary>
        string Topic { get; }
    }

    /// <inheritdoc />
    internal class ConsoleAppleMessageConfiguration : IConsoleAppleMessageConfiguration
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public AppleMessageConfigurationEnvType Env => _env;
        [DataMember(Name="env"), Preserve]
        public AppleMessageConfigurationEnvType _env { get; set; }

        /// <inheritdoc />
        [DataMember(Name="p8_auth_key_id"), Preserve]
        public string P8AuthKeyId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="p8_auth_key_value"), Preserve]
        public string P8AuthKeyValue { get; set; }

        /// <inheritdoc />
        [DataMember(Name="team_id"), Preserve]
        public string TeamId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="topic"), Preserve]
        public string Topic { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Env: ", Env, ", ");
            output = string.Concat(output, "P8AuthKeyId: ", P8AuthKeyId, ", ");
            output = string.Concat(output, "P8AuthKeyValue: ", P8AuthKeyValue, ", ");
            output = string.Concat(output, "TeamId: ", TeamId, ", ");
            output = string.Concat(output, "Topic: ", Topic, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IConsoleAssociateAudienceRequest
    {

        /// <summary>
        /// Identifier.
        /// </summary>
        string Id { get; }
    }

    /// <inheritdoc />
    internal class ConsoleAssociateAudienceRequest : IConsoleAssociateAudienceRequest
    {

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Id: ", Id, ", ");
            return output;
        }
    }

    /// <summary>
    /// Request to create a new flag override.
    /// </summary>
    public interface IConsoleAssociateFlagRequest
    {

        /// <summary>
        /// Flag id.
        /// </summary>
        string FlagId { get; }

        /// <summary>
        /// Flag value.
        /// </summary>
        string Value { get; }
    }

    /// <inheritdoc />
    internal class ConsoleAssociateFlagRequest : IConsoleAssociateFlagRequest
    {

        /// <inheritdoc />
        [DataMember(Name="flag_id"), Preserve]
        public string FlagId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "FlagId: ", FlagId, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IConsoleAssociateMetricRequest
    {

        /// <summary>
        /// Identifier.
        /// </summary>
        string Id { get; }
    }

    /// <inheritdoc />
    internal class ConsoleAssociateMetricRequest : IConsoleAssociateMetricRequest
    {

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Id: ", Id, ", ");
            return output;
        }
    }

    /// <summary>
    /// An audience.
    /// </summary>
    public interface IConsoleAudience
    {

        /// <summary>
        /// Category label identifiers.
        /// </summary>
        IEnumerable<IConsoleCategoryView> Categories { get; }

        /// <summary>
        /// Create time.
        /// </summary>
        string CreateTimeSec { get; }

        /// <summary>
        /// Description.
        /// </summary>
        string Description { get; }

        /// <summary>
        /// Exclude list.
        /// </summary>
        List<string> Excludes { get; }

        /// <summary>
        /// Filter.
        /// </summary>
        string Filter { get; }

        /// <summary>
        /// Identifier.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// Number of identities.
        /// </summary>
        string IdentityCount { get; }

        /// <summary>
        /// Imported flag.
        /// </summary>
        bool Imported { get; }

        /// <summary>
        /// Last processing end time.
        /// </summary>
        string LastRefreshEndTimeSec { get; }

        /// <summary>
        /// Last processing start time.
        /// </summary>
        string LastRefreshStartTimeSec { get; }

        /// <summary>
        /// Name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Override list.
        /// </summary>
        List<string> Overrides { get; }

        /// <summary>
        /// Update time.
        /// </summary>
        string UpdateTimeSec { get; }

        /// <summary>
        /// Webhook, if configured.
        /// </summary>
        string Webhook { get; }
    }

    /// <inheritdoc />
    internal class ConsoleAudience : IConsoleAudience
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleCategoryView> Categories => _categories ?? new List<ConsoleCategoryView>(0);
        [DataMember(Name="categories"), Preserve]
        public List<ConsoleCategoryView> _categories { get; set; }

        /// <inheritdoc />
        [DataMember(Name="create_time_sec"), Preserve]
        public string CreateTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="description"), Preserve]
        public string Description { get; set; }

        /// <inheritdoc />
        [DataMember(Name="excludes"), Preserve]
        public List<string> Excludes { get; set; }

        /// <inheritdoc />
        [DataMember(Name="filter"), Preserve]
        public string Filter { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="identity_count"), Preserve]
        public string IdentityCount { get; set; }

        /// <inheritdoc />
        [DataMember(Name="imported"), Preserve]
        public bool Imported { get; set; }

        /// <inheritdoc />
        [DataMember(Name="last_refresh_end_time_sec"), Preserve]
        public string LastRefreshEndTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="last_refresh_start_time_sec"), Preserve]
        public string LastRefreshStartTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="overrides"), Preserve]
        public List<string> Overrides { get; set; }

        /// <inheritdoc />
        [DataMember(Name="update_time_sec"), Preserve]
        public string UpdateTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="webhook"), Preserve]
        public string Webhook { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Categories: [", string.Join(", ", Categories), "], ");
            output = string.Concat(output, "CreateTimeSec: ", CreateTimeSec, ", ");
            output = string.Concat(output, "Description: ", Description, ", ");
            output = string.Concat(output, "Excludes: [", string.Join(", ", Excludes), "], ");
            output = string.Concat(output, "Filter: ", Filter, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "IdentityCount: ", IdentityCount, ", ");
            output = string.Concat(output, "Imported: ", Imported, ", ");
            output = string.Concat(output, "LastRefreshEndTimeSec: ", LastRefreshEndTimeSec, ", ");
            output = string.Concat(output, "LastRefreshStartTimeSec: ", LastRefreshStartTimeSec, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Overrides: [", string.Join(", ", Overrides), "], ");
            output = string.Concat(output, "UpdateTimeSec: ", UpdateTimeSec, ", ");
            output = string.Concat(output, "Webhook: ", Webhook, ", ");
            return output;
        }
    }

    /// <summary>
    /// Request to create an audience.
    /// </summary>
    public interface IConsoleAudienceCreateRequest
    {

        /// <summary>
        /// Category label identifiers.
        /// </summary>
        List<string> CategoryIds { get; }

        /// <summary>
        /// Description.
        /// </summary>
        string Description { get; }

        /// <summary>
        /// Exclude list.
        /// </summary>
        List<string> Excludes { get; }

        /// <summary>
        /// Filter.
        /// </summary>
        string Filter { get; }

        /// <summary>
        /// Name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Override list.
        /// </summary>
        List<string> Overrides { get; }

        /// <summary>
        /// Webhook, if configured.
        /// </summary>
        string Webhook { get; }
    }

    /// <inheritdoc />
    internal class ConsoleAudienceCreateRequest : IConsoleAudienceCreateRequest
    {

        /// <inheritdoc />
        [DataMember(Name="category_ids"), Preserve]
        public List<string> CategoryIds { get; set; }

        /// <inheritdoc />
        [DataMember(Name="description"), Preserve]
        public string Description { get; set; }

        /// <inheritdoc />
        [DataMember(Name="excludes"), Preserve]
        public List<string> Excludes { get; set; }

        /// <inheritdoc />
        [DataMember(Name="filter"), Preserve]
        public string Filter { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="overrides"), Preserve]
        public List<string> Overrides { get; set; }

        /// <inheritdoc />
        [DataMember(Name="webhook"), Preserve]
        public string Webhook { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "CategoryIds: [", string.Join(", ", CategoryIds), "], ");
            output = string.Concat(output, "Description: ", Description, ", ");
            output = string.Concat(output, "Excludes: [", string.Join(", ", Excludes), "], ");
            output = string.Concat(output, "Filter: ", Filter, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Overrides: [", string.Join(", ", Overrides), "], ");
            output = string.Concat(output, "Webhook: ", Webhook, ", ");
            return output;
        }
    }

    /// <summary>
    /// An audience export.
    /// </summary>
    public interface IConsoleAudienceExport
    {

        /// <summary>
        /// Category label identifiers.
        /// </summary>
        List<string> CategoryIds { get; }

        /// <summary>
        /// Description.
        /// </summary>
        string Description { get; }

        /// <summary>
        /// Exclude list.
        /// </summary>
        List<string> Excludes { get; }

        /// <summary>
        /// Filter.
        /// </summary>
        string Filter { get; }

        /// <summary>
        /// Identifier.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// Name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Override list.
        /// </summary>
        List<string> Overrides { get; }

        /// <summary>
        /// Webhook, if configured.
        /// </summary>
        string Webhook { get; }
    }

    /// <inheritdoc />
    internal class ConsoleAudienceExport : IConsoleAudienceExport
    {

        /// <inheritdoc />
        [DataMember(Name="category_ids"), Preserve]
        public List<string> CategoryIds { get; set; }

        /// <inheritdoc />
        [DataMember(Name="description"), Preserve]
        public string Description { get; set; }

        /// <inheritdoc />
        [DataMember(Name="excludes"), Preserve]
        public List<string> Excludes { get; set; }

        /// <inheritdoc />
        [DataMember(Name="filter"), Preserve]
        public string Filter { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="overrides"), Preserve]
        public List<string> Overrides { get; set; }

        /// <inheritdoc />
        [DataMember(Name="webhook"), Preserve]
        public string Webhook { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "CategoryIds: [", string.Join(", ", CategoryIds), "], ");
            output = string.Concat(output, "Description: ", Description, ", ");
            output = string.Concat(output, "Excludes: [", string.Join(", ", Excludes), "], ");
            output = string.Concat(output, "Filter: ", Filter, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Overrides: [", string.Join(", ", Overrides), "], ");
            output = string.Concat(output, "Webhook: ", Webhook, ", ");
            return output;
        }
    }

    /// <summary>
    /// A list of identities that are part of an audience.
    /// </summary>
    public interface IConsoleAudienceIdentities
    {

        /// <summary>
        /// Cursor for the next page, if any.
        /// </summary>
        string Cursor { get; }

        /// <summary>
        /// Identities.
        /// </summary>
        IEnumerable<IConsoleAudienceIdentity> Identities { get; }
    }

    /// <inheritdoc />
    internal class ConsoleAudienceIdentities : IConsoleAudienceIdentities
    {

        /// <inheritdoc />
        [DataMember(Name="cursor"), Preserve]
        public string Cursor { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleAudienceIdentity> Identities => _identities ?? new List<ConsoleAudienceIdentity>(0);
        [DataMember(Name="identities"), Preserve]
        public List<ConsoleAudienceIdentity> _identities { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Cursor: ", Cursor, ", ");
            output = string.Concat(output, "Identities: [", string.Join(", ", Identities), "], ");
            return output;
        }
    }

    /// <summary>
    /// A single audience identity short record.
    /// </summary>
    public interface IConsoleAudienceIdentity
    {

        /// <summary>
        /// Time when the identity was added to this audience.
        /// </summary>
        string CreateTimeSec { get; }

        /// <summary>
        /// Identifier.
        /// </summary>
        string Id { get; }
    }

    /// <inheritdoc />
    internal class ConsoleAudienceIdentity : IConsoleAudienceIdentity
    {

        /// <inheritdoc />
        [DataMember(Name="create_time_sec"), Preserve]
        public string CreateTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "CreateTimeSec: ", CreateTimeSec, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");
            return output;
        }
    }

    /// <summary>
    /// The search options available for the ExperimentList endpoint.
    /// </summary>
    public interface IConsoleAudienceListRequestSearchOptions
    {

        /// <summary>
        /// Filter by Label name.
        /// </summary>
        IConsoleMultiTextValueFilterOption LabelName { get; }

        /// <summary>
        /// Filter by Name name.
        /// </summary>
        IConsoleSingleTextValueFilterOption Name { get; }

        /// <summary>
        /// Filter by Status.
        /// </summary>
        IConsoleSingleEnumValueFilterOption Status { get; }
    }

    /// <inheritdoc />
    internal class ConsoleAudienceListRequestSearchOptions : IConsoleAudienceListRequestSearchOptions
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleMultiTextValueFilterOption LabelName => _labelName;
        [DataMember(Name="label_name"), Preserve]
        public ConsoleMultiTextValueFilterOption _labelName { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleSingleTextValueFilterOption Name => _name;
        [DataMember(Name="name"), Preserve]
        public ConsoleSingleTextValueFilterOption _name { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleSingleEnumValueFilterOption Status => _status;
        [DataMember(Name="status"), Preserve]
        public ConsoleSingleEnumValueFilterOption _status { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "LabelName: ", LabelName, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Status: ", Status, ", ");
            return output;
        }
    }

    /// <summary>
    /// A list of audiences.
    /// </summary>
    public interface IConsoleAudienceListResponse
    {

        /// <summary>
        /// Audiences.
        /// </summary>
        IEnumerable<IConsoleAudience> Audiences { get; }

        /// <summary>
        /// The pagination options, if there are more pages.
        /// </summary>
        IConsolePageOptions PageOptions { get; }
    }

    /// <inheritdoc />
    internal class ConsoleAudienceListResponse : IConsoleAudienceListResponse
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleAudience> Audiences => _audiences ?? new List<ConsoleAudience>(0);
        [DataMember(Name="audiences"), Preserve]
        public List<ConsoleAudience> _audiences { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsolePageOptions PageOptions => _pageOptions;
        [DataMember(Name="page_options"), Preserve]
        public ConsolePageOptions _pageOptions { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Audiences: [", string.Join(", ", Audiences), "], ");
            output = string.Concat(output, "PageOptions: ", PageOptions, ", ");
            return output;
        }
    }

    /// <summary>
    /// An audience view.
    /// </summary>
    public interface IConsoleAudienceView
    {

        /// <summary>
        /// Identifier.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// Name.
        /// </summary>
        string Name { get; }
    }

    /// <inheritdoc />
    internal class ConsoleAudienceView : IConsoleAudienceView
    {

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            return output;
        }
    }

    /// <summary>
    /// A audit log.
    /// </summary>
    public interface IConsoleAuditLog
    {

        /// <summary>
        /// The action executed.
        /// </summary>
        AuditLogAction Action { get; }

        /// <summary>
        /// The category modified.
        /// </summary>
        ConsoleAuditLogCategory Category { get; }

        /// <summary>
        /// The time the audit log was created.
        /// </summary>
        string CreateTimeSec { get; }

        /// <summary>
        /// The identifier of the audit log.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// The server key used to modify the category, if any.
        /// </summary>
        IConsoleServerKeyView Key { get; }

        /// <summary>
        /// Additional message with information about the operation.
        /// </summary>
        string Message { get; }

        /// <summary>
        /// Additional metadata with information about the operation.
        /// </summary>
        string Metadata { get; }

        /// <summary>
        /// Data for the newly created or updated item.
        /// </summary>
        string NewValue { get; }

        /// <summary>
        /// Previous data to roll back the item to, if applicable.
        /// </summary>
        string PreviousValue { get; }

        /// <summary>
        /// The identifier of the user that modified the category.
        /// </summary>
        IConsoleUserView User { get; }

        /// <summary>
        /// The ACL of the user that modified the category.
        /// </summary>
        string UserRole { get; }
    }

    /// <inheritdoc />
    internal class ConsoleAuditLog : IConsoleAuditLog
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public AuditLogAction Action => _action;
        [DataMember(Name="action"), Preserve]
        public AuditLogAction _action { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public ConsoleAuditLogCategory Category => _category;
        [DataMember(Name="category"), Preserve]
        public ConsoleAuditLogCategory _category { get; set; }

        /// <inheritdoc />
        [DataMember(Name="create_time_sec"), Preserve]
        public string CreateTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleServerKeyView Key => _key;
        [DataMember(Name="key"), Preserve]
        public ConsoleServerKeyView _key { get; set; }

        /// <inheritdoc />
        [DataMember(Name="message"), Preserve]
        public string Message { get; set; }

        /// <inheritdoc />
        [DataMember(Name="metadata"), Preserve]
        public string Metadata { get; set; }

        /// <inheritdoc />
        [DataMember(Name="new_value"), Preserve]
        public string NewValue { get; set; }

        /// <inheritdoc />
        [DataMember(Name="previous_value"), Preserve]
        public string PreviousValue { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleUserView User => _user;
        [DataMember(Name="user"), Preserve]
        public ConsoleUserView _user { get; set; }

        /// <inheritdoc />
        [DataMember(Name="user_role"), Preserve]
        public string UserRole { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Action: ", Action, ", ");
            output = string.Concat(output, "Category: ", Category, ", ");
            output = string.Concat(output, "CreateTimeSec: ", CreateTimeSec, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Key: ", Key, ", ");
            output = string.Concat(output, "Message: ", Message, ", ");
            output = string.Concat(output, "Metadata: ", Metadata, ", ");
            output = string.Concat(output, "NewValue: ", NewValue, ", ");
            output = string.Concat(output, "PreviousValue: ", PreviousValue, ", ");
            output = string.Concat(output, "User: ", User, ", ");
            output = string.Concat(output, "UserRole: ", UserRole, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public enum ConsoleAuditLogCategory
    {
        /// <summary>
        /// 
        /// </summary>
        API_KEY = 0,
        /// <summary>
        /// 
        /// </summary>
        AUDIENCE = 1,
        /// <summary>
        /// 
        /// </summary>
        DATALAKE = 2,
        /// <summary>
        /// 
        /// </summary>
        DATA_MANAGEMENT = 3,
        /// <summary>
        /// 
        /// </summary>
        EVENT_CONFIGURATION = 4,
        /// <summary>
        /// 
        /// </summary>
        EXPERIMENT = 5,
        /// <summary>
        /// 
        /// </summary>
        FLAG = 6,
        /// <summary>
        /// 
        /// </summary>
        IDENTITY = 7,
        /// <summary>
        /// 
        /// </summary>
        LIVE_EVENT = 8,
        /// <summary>
        /// 
        /// </summary>
        MESSAGE_SCHEDULE = 9,
        /// <summary>
        /// 
        /// </summary>
        MESSAGE_INTEGRATION = 10,
        /// <summary>
        /// 
        /// </summary>
        METRIC = 11,
        /// <summary>
        /// 
        /// </summary>
        PROPERTY_CONFIGURATION = 12,
        /// <summary>
        /// 
        /// </summary>
        SCHEMA = 13,
        /// <summary>
        /// 
        /// </summary>
        SERVER_KEY = 14,
        /// <summary>
        /// 
        /// </summary>
        TEMPLATE = 15,
        /// <summary>
        /// 
        /// </summary>
        USER = 16,
        /// <summary>
        /// 
        /// </summary>
        SETTING = 17,
        /// <summary>
        /// 
        /// </summary>
        CATEGORY = 18,
        /// <summary>
        /// 
        /// </summary>
        WEBHOOK = 19,
        /// <summary>
        /// 
        /// </summary>
        FLAG_VARIANT = 20,
        /// <summary>
        /// 
        /// </summary>
        LIVE_EVENT_FLAG = 21,
        /// <summary>
        /// 
        /// </summary>
        LIVE_EVENT_FLAG_VARIANT = 22,
        /// <summary>
        /// 
        /// </summary>
        EXPERIMENT_PHASE = 23,
        /// <summary>
        /// 
        /// </summary>
        LIVE_EVENT_MESSAGE_SCHEDULE = 24,
        /// <summary>
        /// 
        /// </summary>
        ADVERTISEMENT_MEASUREMENT_PARTNER_INTEGRATION = 25,
    }

    /// <summary>
    /// The response to the AuditLogList.
    /// </summary>
    public interface IConsoleAuditLogListResponse
    {

        /// <summary>
        /// The list of audit logs.
        /// </summary>
        IEnumerable<IConsoleAuditLog> AuditLogs { get; }

        /// <summary>
        /// Cursor, if there are next pages.
        /// </summary>
        string NextCursor { get; }

        /// <summary>
        /// Cursor, if there are prev pages.
        /// </summary>
        string PrevCursor { get; }
    }

    /// <inheritdoc />
    internal class ConsoleAuditLogListResponse : IConsoleAuditLogListResponse
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleAuditLog> AuditLogs => _auditLogs ?? new List<ConsoleAuditLog>(0);
        [DataMember(Name="audit_logs"), Preserve]
        public List<ConsoleAuditLog> _auditLogs { get; set; }

        /// <inheritdoc />
        [DataMember(Name="next_cursor"), Preserve]
        public string NextCursor { get; set; }

        /// <inheritdoc />
        [DataMember(Name="prev_cursor"), Preserve]
        public string PrevCursor { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "AuditLogs: [", string.Join(", ", AuditLogs), "], ");
            output = string.Concat(output, "NextCursor: ", NextCursor, ", ");
            output = string.Concat(output, "PrevCursor: ", PrevCursor, ", ");
            return output;
        }
    }

    /// <summary>
    /// Log out a session, invalidate a refresh token, or log out all sessions/refresh tokens for a user.
    /// </summary>
    public interface IConsoleAuthenticateLogoutRequest
    {

        /// <summary>
        /// Refresh token to invalidate.
        /// </summary>
        string RefreshToken { get; }

        /// <summary>
        /// Session token to log out.
        /// </summary>
        string Token { get; }
    }

    /// <inheritdoc />
    internal class ConsoleAuthenticateLogoutRequest : IConsoleAuthenticateLogoutRequest
    {

        /// <inheritdoc />
        [DataMember(Name="refresh_token"), Preserve]
        public string RefreshToken { get; set; }

        /// <inheritdoc />
        [DataMember(Name="token"), Preserve]
        public string Token { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "RefreshToken: ", RefreshToken, ", ");
            output = string.Concat(output, "Token: ", Token, ", ");
            return output;
        }
    }

    /// <summary>
    /// Request to change MFA.
    /// </summary>
    public interface IConsoleAuthenticateMFAChangeRequest
    {

        /// <summary>
        /// Code.
        /// </summary>
        string Code { get; }

        /// <summary>
        /// MFA code.
        /// </summary>
        string Mfa { get; }
    }

    /// <inheritdoc />
    internal class ConsoleAuthenticateMFAChangeRequest : IConsoleAuthenticateMFAChangeRequest
    {

        /// <inheritdoc />
        [DataMember(Name="code"), Preserve]
        public string Code { get; set; }

        /// <inheritdoc />
        [DataMember(Name="mfa"), Preserve]
        public string Mfa { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Code: ", Code, ", ");
            output = string.Concat(output, "Mfa: ", Mfa, ", ");
            return output;
        }
    }

    /// <summary>
    /// Response to change MFA.
    /// </summary>
    public interface IConsoleAuthenticateMFAChangeResponse
    {

        /// <summary>
        /// An one-time code to configure the MFA mechanism
        /// </summary>
        List<string> RecoveryCodes { get; }
    }

    /// <inheritdoc />
    internal class ConsoleAuthenticateMFAChangeResponse : IConsoleAuthenticateMFAChangeResponse
    {

        /// <inheritdoc />
        [DataMember(Name="recovery_codes"), Preserve]
        public List<string> RecoveryCodes { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "RecoveryCodes: [", string.Join(", ", RecoveryCodes), "], ");
            return output;
        }
    }

    /// <summary>
    /// Request to change a password.
    /// </summary>
    public interface IConsoleAuthenticatePasswordChangeRequest
    {

        /// <summary>
        /// Code.
        /// </summary>
        string Code { get; }

        /// <summary>
        /// New password.
        /// </summary>
        string Password { get; }
    }

    /// <inheritdoc />
    internal class ConsoleAuthenticatePasswordChangeRequest : IConsoleAuthenticatePasswordChangeRequest
    {

        /// <inheritdoc />
        [DataMember(Name="code"), Preserve]
        public string Code { get; set; }

        /// <inheritdoc />
        [DataMember(Name="password"), Preserve]
        public string Password { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Code: ", Code, ", ");
            output = string.Concat(output, "Password: ", Password, ", ");
            return output;
        }
    }

    /// <summary>
    /// Authenticate against the server with a refresh token.
    /// </summary>
    public interface IConsoleAuthenticateRefreshRequest
    {

        /// <summary>
        /// Refresh token.
        /// </summary>
        string RefreshToken { get; }
    }

    /// <inheritdoc />
    internal class ConsoleAuthenticateRefreshRequest : IConsoleAuthenticateRefreshRequest
    {

        /// <inheritdoc />
        [DataMember(Name="refresh_token"), Preserve]
        public string RefreshToken { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "RefreshToken: ", RefreshToken, ", ");
            return output;
        }
    }

    /// <summary>
    /// Authentication request.
    /// </summary>
    public interface IConsoleAuthenticateRequest
    {

        /// <summary>
        /// Email address.
        /// </summary>
        string Email { get; }

        /// <summary>
        /// Multi-factor authentication code.
        /// </summary>
        string Mfa { get; }

        /// <summary>
        /// Password.
        /// </summary>
        string Password { get; }
    }

    /// <inheritdoc />
    internal class ConsoleAuthenticateRequest : IConsoleAuthenticateRequest
    {

        /// <inheritdoc />
        [DataMember(Name="email"), Preserve]
        public string Email { get; set; }

        /// <inheritdoc />
        [DataMember(Name="mfa"), Preserve]
        public string Mfa { get; set; }

        /// <inheritdoc />
        [DataMember(Name="password"), Preserve]
        public string Password { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Email: ", Email, ", ");
            output = string.Concat(output, "Mfa: ", Mfa, ", ");
            output = string.Concat(output, "Password: ", Password, ", ");
            return output;
        }
    }

    /// <summary>
    /// The search options available for the List endpoint.
    /// </summary>
    public interface IConsoleCalendarRequestSearchOptions
    {

        /// <summary>
        /// Filter by Label name.
        /// </summary>
        IConsoleMultiTextValueFilterOption LabelName { get; }

        /// <summary>
        /// Filter by Name name.
        /// </summary>
        IConsoleSingleTextValueFilterOption Name { get; }
    }

    /// <inheritdoc />
    internal class ConsoleCalendarRequestSearchOptions : IConsoleCalendarRequestSearchOptions
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleMultiTextValueFilterOption LabelName => _labelName;
        [DataMember(Name="label_name"), Preserve]
        public ConsoleMultiTextValueFilterOption _labelName { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleSingleTextValueFilterOption Name => _name;
        [DataMember(Name="name"), Preserve]
        public ConsoleSingleTextValueFilterOption _name { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "LabelName: ", LabelName, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            return output;
        }
    }

    /// <summary>
    /// A list of categories.
    /// </summary>
    public interface IConsoleCategories
    {

        /// <summary>
        /// 
        /// </summary>
        IEnumerable<ISatoriconsoleCategory> Categories { get; }
    }

    /// <inheritdoc />
    internal class ConsoleCategories : IConsoleCategories
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<ISatoriconsoleCategory> Categories => _categories ?? new List<SatoriconsoleCategory>(0);
        [DataMember(Name="categories"), Preserve]
        public List<SatoriconsoleCategory> _categories { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Categories: [", string.Join(", ", Categories), "], ");
            return output;
        }
    }

    /// <summary>
    /// A export of a Category
    /// </summary>
    public interface IConsoleCategoryExport
    {

        /// <summary>
        /// Color hex for the label.
        /// </summary>
        string Color { get; }

        /// <summary>
        /// Description.
        /// </summary>
        string Description { get; }

        /// <summary>
        /// Identifier.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// Name.
        /// </summary>
        string Name { get; }
    }

    /// <inheritdoc />
    internal class ConsoleCategoryExport : IConsoleCategoryExport
    {

        /// <inheritdoc />
        [DataMember(Name="color"), Preserve]
        public string Color { get; set; }

        /// <inheritdoc />
        [DataMember(Name="description"), Preserve]
        public string Description { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Color: ", Color, ", ");
            output = string.Concat(output, "Description: ", Description, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            return output;
        }
    }

    /// <summary>
    /// A summary of a Category.
    /// </summary>
    public interface IConsoleCategoryView
    {

        /// <summary>
        /// Color hex for the label.
        /// </summary>
        string Color { get; }

        /// <summary>
        /// Identifier.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// Name.
        /// </summary>
        string Name { get; }
    }

    /// <inheritdoc />
    internal class ConsoleCategoryView : IConsoleCategoryView
    {

        /// <inheritdoc />
        [DataMember(Name="color"), Preserve]
        public string Color { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Color: ", Color, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            return output;
        }
    }

    /// <summary>
    /// The retention values for given starting point.
    /// </summary>
    public interface IConsoleCohortRetentionStats
    {

        /// <summary>
        /// The average playtime duration. Indexes 0..7 are for day 0..7 while 8 and 9 indexes are for day 14 and 30.
        /// </summary>
        List<double> PlaytimeDurationPerDay { get; }

        /// <summary>
        /// The installation counts. Indexes 0..7 are for day 0..7 while 8 and 9 indexes are for day 14 and 30.
        /// </summary>
        List<string> RetainedInstallationCountPerDay { get; }

        /// <summary>
        /// The retention percentages. Indexes 0..7 are for day 0..7 while 8 and 9 indexes are for day 14 and 30.
        /// </summary>
        List<double> RetentionPercentagesPerDay { get; }

        /// <summary>
        /// The session counts. Indexes 0..7 are for day 0..7 while 8 and 9 indexes are for day 14 and 30.
        /// </summary>
        List<double> SessionCountPerDay { get; }

        /// <summary>
        /// The average session duration. Indexes 0..7 are for day 0..7 while 8 and 9 indexes are for day 14 and 30.
        /// </summary>
        List<double> SessionDurationPerDay { get; }

        /// <summary>
        /// The starting day.
        /// </summary>
        string StartTimeSec { get; }
    }

    /// <inheritdoc />
    internal class ConsoleCohortRetentionStats : IConsoleCohortRetentionStats
    {

        /// <inheritdoc />
        [DataMember(Name="playtime_duration_per_day"), Preserve]
        public List<double> PlaytimeDurationPerDay { get; set; }

        /// <inheritdoc />
        [DataMember(Name="retained_installation_count_per_day"), Preserve]
        public List<string> RetainedInstallationCountPerDay { get; set; }

        /// <inheritdoc />
        [DataMember(Name="retention_percentages_per_day"), Preserve]
        public List<double> RetentionPercentagesPerDay { get; set; }

        /// <inheritdoc />
        [DataMember(Name="session_count_per_day"), Preserve]
        public List<double> SessionCountPerDay { get; set; }

        /// <inheritdoc />
        [DataMember(Name="session_duration_per_day"), Preserve]
        public List<double> SessionDurationPerDay { get; set; }

        /// <inheritdoc />
        [DataMember(Name="start_time_sec"), Preserve]
        public string StartTimeSec { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "PlaytimeDurationPerDay: [", string.Join(", ", PlaytimeDurationPerDay), "], ");
            output = string.Concat(output, "RetainedInstallationCountPerDay: [", string.Join(", ", RetainedInstallationCountPerDay), "], ");
            output = string.Concat(output, "RetentionPercentagesPerDay: [", string.Join(", ", RetentionPercentagesPerDay), "], ");
            output = string.Concat(output, "SessionCountPerDay: [", string.Join(", ", SessionCountPerDay), "], ");
            output = string.Concat(output, "SessionDurationPerDay: [", string.Join(", ", SessionDurationPerDay), "], ");
            output = string.Concat(output, "StartTimeSec: ", StartTimeSec, ", ");
            return output;
        }
    }

    /// <summary>
    /// The current server configuration and any associated warnings.
    /// </summary>
    public interface IConsoleConfiguration
    {

        /// <summary>
        /// JSON-encoded active server configuration.
        /// </summary>
        string Config { get; }

        /// <summary>
        /// Server version
        /// </summary>
        string ServerVersion { get; }

        /// <summary>
        /// Any warnings about the current config.
        /// </summary>
        IEnumerable<IConfigurationWarning> Warnings { get; }
    }

    /// <inheritdoc />
    internal class ConsoleConfiguration : IConsoleConfiguration
    {

        /// <inheritdoc />
        [DataMember(Name="config"), Preserve]
        public string Config { get; set; }

        /// <inheritdoc />
        [DataMember(Name="server_version"), Preserve]
        public string ServerVersion { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConfigurationWarning> Warnings => _warnings ?? new List<ConfigurationWarning>(0);
        [DataMember(Name="warnings"), Preserve]
        public List<ConfigurationWarning> _warnings { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Config: ", Config, ", ");
            output = string.Concat(output, "ServerVersion: ", ServerVersion, ", ");
            output = string.Concat(output, "Warnings: [", string.Join(", ", Warnings), "], ");
            return output;
        }
    }

    /// <summary>
    /// The DataExportRequest contains which configuration should be exported.
    /// </summary>
    public interface IConsoleDataExportRequest
    {

        /// <summary>
        /// Export all AdMeasurement Partner Configurations.
        /// </summary>
        bool AdMeasurementPartnerConfigurations { get; }

        /// <summary>
        /// Export all the configuration of api keys.
        /// </summary>
        bool ApiKeys { get; }

        /// <summary>
        /// Export all the configurations of audiences.
        /// </summary>
        bool Audiences { get; }

        /// <summary>
        /// Generates an audit log.
        /// </summary>
        bool AuditLogging { get; }

        /// <summary>
        /// Export all the configuration of data lake configurations.
        /// </summary>
        bool DatalakeConfigurations { get; }

        /// <summary>
        /// Export all the configuration of experiments.
        /// </summary>
        bool Experiments { get; }

        /// <summary>
        /// Export all the configurations of flags.
        /// </summary>
        bool FeatureFlags { get; }

        /// <summary>
        /// Export all the configuration of live events.
        /// </summary>
        bool LiveEvents { get; }

        /// <summary>
        /// Export all the configuration of message integration configurations.
        /// </summary>
        bool MessageIntegrations { get; }

        /// <summary>
        /// Export all the configuration of message schedules.
        /// </summary>
        bool MessageSchedules { get; }

        /// <summary>
        /// Export all the configurations of metrics.
        /// </summary>
        bool Metrics { get; }

        /// <summary>
        /// Export all the configuration of server keys.
        /// </summary>
        bool ServerKeys { get; }

        /// <summary>
        /// Export all settings.
        /// </summary>
        bool Settings { get; }

        /// <summary>
        /// Export all the configuration of taxonomy configuration (events, properties, validators, categories).
        /// </summary>
        bool Taxonomy { get; }

        /// <summary>
        /// Export all the configuration of templates.
        /// </summary>
        bool Templates { get; }

        /// <summary>
        /// Export all webhooks
        /// </summary>
        bool Webhooks { get; }
    }

    /// <inheritdoc />
    internal class ConsoleDataExportRequest : IConsoleDataExportRequest
    {

        /// <inheritdoc />
        [DataMember(Name="ad_measurement_partner_configurations"), Preserve]
        public bool AdMeasurementPartnerConfigurations { get; set; }

        /// <inheritdoc />
        [DataMember(Name="api_keys"), Preserve]
        public bool ApiKeys { get; set; }

        /// <inheritdoc />
        [DataMember(Name="audiences"), Preserve]
        public bool Audiences { get; set; }

        /// <inheritdoc />
        [DataMember(Name="audit_logging"), Preserve]
        public bool AuditLogging { get; set; }

        /// <inheritdoc />
        [DataMember(Name="datalake_configurations"), Preserve]
        public bool DatalakeConfigurations { get; set; }

        /// <inheritdoc />
        [DataMember(Name="experiments"), Preserve]
        public bool Experiments { get; set; }

        /// <inheritdoc />
        [DataMember(Name="feature_flags"), Preserve]
        public bool FeatureFlags { get; set; }

        /// <inheritdoc />
        [DataMember(Name="live_events"), Preserve]
        public bool LiveEvents { get; set; }

        /// <inheritdoc />
        [DataMember(Name="message_integrations"), Preserve]
        public bool MessageIntegrations { get; set; }

        /// <inheritdoc />
        [DataMember(Name="message_schedules"), Preserve]
        public bool MessageSchedules { get; set; }

        /// <inheritdoc />
        [DataMember(Name="metrics"), Preserve]
        public bool Metrics { get; set; }

        /// <inheritdoc />
        [DataMember(Name="server_keys"), Preserve]
        public bool ServerKeys { get; set; }

        /// <inheritdoc />
        [DataMember(Name="settings"), Preserve]
        public bool Settings { get; set; }

        /// <inheritdoc />
        [DataMember(Name="taxonomy"), Preserve]
        public bool Taxonomy { get; set; }

        /// <inheritdoc />
        [DataMember(Name="templates"), Preserve]
        public bool Templates { get; set; }

        /// <inheritdoc />
        [DataMember(Name="webhooks"), Preserve]
        public bool Webhooks { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "AdMeasurementPartnerConfigurations: ", AdMeasurementPartnerConfigurations, ", ");
            output = string.Concat(output, "ApiKeys: ", ApiKeys, ", ");
            output = string.Concat(output, "Audiences: ", Audiences, ", ");
            output = string.Concat(output, "AuditLogging: ", AuditLogging, ", ");
            output = string.Concat(output, "DatalakeConfigurations: ", DatalakeConfigurations, ", ");
            output = string.Concat(output, "Experiments: ", Experiments, ", ");
            output = string.Concat(output, "FeatureFlags: ", FeatureFlags, ", ");
            output = string.Concat(output, "LiveEvents: ", LiveEvents, ", ");
            output = string.Concat(output, "MessageIntegrations: ", MessageIntegrations, ", ");
            output = string.Concat(output, "MessageSchedules: ", MessageSchedules, ", ");
            output = string.Concat(output, "Metrics: ", Metrics, ", ");
            output = string.Concat(output, "ServerKeys: ", ServerKeys, ", ");
            output = string.Concat(output, "Settings: ", Settings, ", ");
            output = string.Concat(output, "Taxonomy: ", Taxonomy, ", ");
            output = string.Concat(output, "Templates: ", Templates, ", ");
            output = string.Concat(output, "Webhooks: ", Webhooks, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IConsoleDataExportResponse
    {

        /// <summary>
        /// The configuration of the existing Ad Measurement Partners.
        /// </summary>
        IEnumerable<IConsoleAdvertisementMeasurementPartnerExport> AdMeasurementPartnerConfigurations { get; }

        /// <summary>
        /// The configuration of the existing api keys.
        /// </summary>
        IEnumerable<IConsoleApiKeyExport> ApiKeys { get; }

        /// <summary>
        /// The configuration of the existing audiences.
        /// </summary>
        IEnumerable<IConsoleAudienceExport> Audiences { get; }

        /// <summary>
        /// The configuration of the existing categories.
        /// </summary>
        IEnumerable<IConsoleCategoryExport> Categories { get; }

        /// <summary>
        /// The configuration of the existing data lakes.
        /// </summary>
        IEnumerable<IConsoleDataLakeExport> DatalakeConfigurations { get; }

        /// <summary>
        /// The configuration of the existing event taxonomy.
        /// </summary>
        IEnumerable<IConsoleEventConfigurationExport> Events { get; }

        /// <summary>
        /// The configuration of the existing experiment phases.
        /// </summary>
        IEnumerable<IConsoleExperimentPhaseExport> ExperimentPhases { get; }

        /// <summary>
        /// The configuration of the existing experiments.
        /// </summary>
        IEnumerable<IConsoleExperimentExport> Experiments { get; }

        /// <summary>
        /// The configuration of the existing flags.
        /// </summary>
        IEnumerable<IConsoleFlagExport> FeatureFlags { get; }

        /// <summary>
        /// The configuration of the existing live events.
        /// </summary>
        IEnumerable<IConsoleLiveEventExport> LiveEvents { get; }

        /// <summary>
        /// The configuration of the existing message integrations.
        /// </summary>
        IEnumerable<IConsoleMessageIntegrationExport> MessageIntegrations { get; }

        /// <summary>
        /// The configuration of the existing message schedules.
        /// </summary>
        IEnumerable<IConsoleMessageScheduleExport> MessageSchedules { get; }

        /// <summary>
        /// The configuration of the existing live events.
        /// </summary>
        IEnumerable<IConsoleMetricExport> Metrics { get; }

        /// <summary>
        /// The configuration of the existing property taxonomy.
        /// </summary>
        IConsolePropertyConfigurationsExport Properties { get; }

        /// <summary>
        /// The configuration of the existing validators taxonomy.
        /// </summary>
        IEnumerable<IConsoleSchemaExport> Schemas { get; }

        /// <summary>
        /// The configuration of the existing server keys.
        /// </summary>
        IEnumerable<IConsoleServerKeyExport> ServerKeys { get; }

        /// <summary>
        /// The configuration of the existing settings.
        /// </summary>
        IEnumerable<IConsoleSettingExport> Settings { get; }

        /// <summary>
        /// The configuration of the existing templates.
        /// </summary>
        IEnumerable<IConsoleTemplateExport> Templates { get; }

        /// <summary>
        /// The configuration of the existing webhooks.
        /// </summary>
        IEnumerable<IConsoleWebhookExport> Webhooks { get; }
    }

    /// <inheritdoc />
    internal class ConsoleDataExportResponse : IConsoleDataExportResponse
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleAdvertisementMeasurementPartnerExport> AdMeasurementPartnerConfigurations => _adMeasurementPartnerConfigurations ?? new List<ConsoleAdvertisementMeasurementPartnerExport>(0);
        [DataMember(Name="ad_measurement_partner_configurations"), Preserve]
        public List<ConsoleAdvertisementMeasurementPartnerExport> _adMeasurementPartnerConfigurations { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleApiKeyExport> ApiKeys => _apiKeys ?? new List<ConsoleApiKeyExport>(0);
        [DataMember(Name="api_keys"), Preserve]
        public List<ConsoleApiKeyExport> _apiKeys { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleAudienceExport> Audiences => _audiences ?? new List<ConsoleAudienceExport>(0);
        [DataMember(Name="audiences"), Preserve]
        public List<ConsoleAudienceExport> _audiences { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleCategoryExport> Categories => _categories ?? new List<ConsoleCategoryExport>(0);
        [DataMember(Name="categories"), Preserve]
        public List<ConsoleCategoryExport> _categories { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleDataLakeExport> DatalakeConfigurations => _datalakeConfigurations ?? new List<ConsoleDataLakeExport>(0);
        [DataMember(Name="datalake_configurations"), Preserve]
        public List<ConsoleDataLakeExport> _datalakeConfigurations { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleEventConfigurationExport> Events => _events ?? new List<ConsoleEventConfigurationExport>(0);
        [DataMember(Name="events"), Preserve]
        public List<ConsoleEventConfigurationExport> _events { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleExperimentPhaseExport> ExperimentPhases => _experimentPhases ?? new List<ConsoleExperimentPhaseExport>(0);
        [DataMember(Name="experiment_phases"), Preserve]
        public List<ConsoleExperimentPhaseExport> _experimentPhases { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleExperimentExport> Experiments => _experiments ?? new List<ConsoleExperimentExport>(0);
        [DataMember(Name="experiments"), Preserve]
        public List<ConsoleExperimentExport> _experiments { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleFlagExport> FeatureFlags => _featureFlags ?? new List<ConsoleFlagExport>(0);
        [DataMember(Name="feature_flags"), Preserve]
        public List<ConsoleFlagExport> _featureFlags { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleLiveEventExport> LiveEvents => _liveEvents ?? new List<ConsoleLiveEventExport>(0);
        [DataMember(Name="live_events"), Preserve]
        public List<ConsoleLiveEventExport> _liveEvents { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleMessageIntegrationExport> MessageIntegrations => _messageIntegrations ?? new List<ConsoleMessageIntegrationExport>(0);
        [DataMember(Name="message_integrations"), Preserve]
        public List<ConsoleMessageIntegrationExport> _messageIntegrations { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleMessageScheduleExport> MessageSchedules => _messageSchedules ?? new List<ConsoleMessageScheduleExport>(0);
        [DataMember(Name="message_schedules"), Preserve]
        public List<ConsoleMessageScheduleExport> _messageSchedules { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleMetricExport> Metrics => _metrics ?? new List<ConsoleMetricExport>(0);
        [DataMember(Name="metrics"), Preserve]
        public List<ConsoleMetricExport> _metrics { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsolePropertyConfigurationsExport Properties => _properties;
        [DataMember(Name="properties"), Preserve]
        public ConsolePropertyConfigurationsExport _properties { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleSchemaExport> Schemas => _schemas ?? new List<ConsoleSchemaExport>(0);
        [DataMember(Name="schemas"), Preserve]
        public List<ConsoleSchemaExport> _schemas { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleServerKeyExport> ServerKeys => _serverKeys ?? new List<ConsoleServerKeyExport>(0);
        [DataMember(Name="server_keys"), Preserve]
        public List<ConsoleServerKeyExport> _serverKeys { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleSettingExport> Settings => _settings ?? new List<ConsoleSettingExport>(0);
        [DataMember(Name="settings"), Preserve]
        public List<ConsoleSettingExport> _settings { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleTemplateExport> Templates => _templates ?? new List<ConsoleTemplateExport>(0);
        [DataMember(Name="templates"), Preserve]
        public List<ConsoleTemplateExport> _templates { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleWebhookExport> Webhooks => _webhooks ?? new List<ConsoleWebhookExport>(0);
        [DataMember(Name="webhooks"), Preserve]
        public List<ConsoleWebhookExport> _webhooks { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "AdMeasurementPartnerConfigurations: [", string.Join(", ", AdMeasurementPartnerConfigurations), "], ");
            output = string.Concat(output, "ApiKeys: [", string.Join(", ", ApiKeys), "], ");
            output = string.Concat(output, "Audiences: [", string.Join(", ", Audiences), "], ");
            output = string.Concat(output, "Categories: [", string.Join(", ", Categories), "], ");
            output = string.Concat(output, "DatalakeConfigurations: [", string.Join(", ", DatalakeConfigurations), "], ");
            output = string.Concat(output, "Events: [", string.Join(", ", Events), "], ");
            output = string.Concat(output, "ExperimentPhases: [", string.Join(", ", ExperimentPhases), "], ");
            output = string.Concat(output, "Experiments: [", string.Join(", ", Experiments), "], ");
            output = string.Concat(output, "FeatureFlags: [", string.Join(", ", FeatureFlags), "], ");
            output = string.Concat(output, "LiveEvents: [", string.Join(", ", LiveEvents), "], ");
            output = string.Concat(output, "MessageIntegrations: [", string.Join(", ", MessageIntegrations), "], ");
            output = string.Concat(output, "MessageSchedules: [", string.Join(", ", MessageSchedules), "], ");
            output = string.Concat(output, "Metrics: [", string.Join(", ", Metrics), "], ");
            output = string.Concat(output, "Properties: ", Properties, ", ");
            output = string.Concat(output, "Schemas: [", string.Join(", ", Schemas), "], ");
            output = string.Concat(output, "ServerKeys: [", string.Join(", ", ServerKeys), "], ");
            output = string.Concat(output, "Settings: [", string.Join(", ", Settings), "], ");
            output = string.Concat(output, "Templates: [", string.Join(", ", Templates), "], ");
            output = string.Concat(output, "Webhooks: [", string.Join(", ", Webhooks), "], ");
            return output;
        }
    }

    /// <summary>
    /// The DataImportRequest contains which configuration should be exported.
    /// </summary>
    public interface IConsoleDataImportRequest
    {

        /// <summary>
        /// The configuration of the Ad Measurement Partners.
        /// </summary>
        IEnumerable<IConsoleAdvertisementMeasurementPartnerExport> AdMeasurementPartnerConfigurations { get; }

        /// <summary>
        /// Allow the experiment phase and live events imported to have overlapping feature flags with experiment phase and live events.
        /// </summary>
        bool AllowFlagOverlap { get; }

        /// <summary>
        /// The configuration of the api keys.
        /// </summary>
        IEnumerable<IConsoleApiKeyExport> ApiKeys { get; }

        /// <summary>
        /// The configuration of the audiences.
        /// </summary>
        IEnumerable<IConsoleAudienceExport> Audiences { get; }

        /// <summary>
        /// The configuration of the categories.
        /// </summary>
        IEnumerable<IConsoleCategoryExport> Categories { get; }

        /// <summary>
        /// The configuration of the data lakes.
        /// </summary>
        IEnumerable<IConsoleDataLakeExport> DatalakeConfigurations { get; }

        /// <summary>
        /// The configuration of the event taxonomy.
        /// </summary>
        IEnumerable<IConsoleEventConfigurationExport> Events { get; }

        /// <summary>
        /// The configuration of the experiment phases.
        /// </summary>
        IEnumerable<IConsoleExperimentPhaseExport> ExperimentPhases { get; }

        /// <summary>
        /// The configuration of the experiments.
        /// </summary>
        IEnumerable<IConsoleExperimentExport> Experiments { get; }

        /// <summary>
        /// The configuration of the flags.
        /// </summary>
        IEnumerable<IConsoleFlagExport> FeatureFlags { get; }

        /// <summary>
        /// The configuration of the live events.
        /// </summary>
        IEnumerable<IConsoleLiveEventExport> LiveEvents { get; }

        /// <summary>
        /// The configuration of the message integrations.
        /// </summary>
        IEnumerable<IConsoleMessageIntegrationExport> MessageIntegrations { get; }

        /// <summary>
        /// The configuration of message schedules.
        /// </summary>
        IEnumerable<IConsoleMessageScheduleExport> MessageSchedules { get; }

        /// <summary>
        /// The configuration of the live events.
        /// </summary>
        IEnumerable<IConsoleMetricExport> Metrics { get; }

        /// <summary>
        /// Data overwrite. If 'true' the payload will overwrite the persisted state.
        /// </summary>
        bool Overwrite { get; }

        /// <summary>
        /// The configuration of the property taxonomy.
        /// </summary>
        IConsolePropertyConfigurationsExport Properties { get; }

        /// <summary>
        /// The configuration of the validators taxonomy.
        /// </summary>
        IEnumerable<IConsoleSchemaExport> Schemas { get; }

        /// <summary>
        /// The configuration of the server keys.
        /// </summary>
        IEnumerable<IConsoleServerKeyExport> ServerKeys { get; }

        /// <summary>
        /// The configuration of the settings.
        /// </summary>
        IEnumerable<IConsoleSettingExport> Settings { get; }

        /// <summary>
        /// The source server id, if any.
        /// </summary>
        string SourceServerId { get; }

        /// <summary>
        /// The configuration of the templates.
        /// </summary>
        IEnumerable<IConsoleTemplateExport> Templates { get; }

        /// <summary>
        /// The configuration of the webhooks.
        /// </summary>
        IEnumerable<IConsoleWebhookExport> Webhooks { get; }
    }

    /// <inheritdoc />
    internal class ConsoleDataImportRequest : IConsoleDataImportRequest
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleAdvertisementMeasurementPartnerExport> AdMeasurementPartnerConfigurations => _adMeasurementPartnerConfigurations ?? new List<ConsoleAdvertisementMeasurementPartnerExport>(0);
        [DataMember(Name="ad_measurement_partner_configurations"), Preserve]
        public List<ConsoleAdvertisementMeasurementPartnerExport> _adMeasurementPartnerConfigurations { get; set; }

        /// <inheritdoc />
        [DataMember(Name="allow_flag_overlap"), Preserve]
        public bool AllowFlagOverlap { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleApiKeyExport> ApiKeys => _apiKeys ?? new List<ConsoleApiKeyExport>(0);
        [DataMember(Name="api_keys"), Preserve]
        public List<ConsoleApiKeyExport> _apiKeys { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleAudienceExport> Audiences => _audiences ?? new List<ConsoleAudienceExport>(0);
        [DataMember(Name="audiences"), Preserve]
        public List<ConsoleAudienceExport> _audiences { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleCategoryExport> Categories => _categories ?? new List<ConsoleCategoryExport>(0);
        [DataMember(Name="categories"), Preserve]
        public List<ConsoleCategoryExport> _categories { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleDataLakeExport> DatalakeConfigurations => _datalakeConfigurations ?? new List<ConsoleDataLakeExport>(0);
        [DataMember(Name="datalake_configurations"), Preserve]
        public List<ConsoleDataLakeExport> _datalakeConfigurations { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleEventConfigurationExport> Events => _events ?? new List<ConsoleEventConfigurationExport>(0);
        [DataMember(Name="events"), Preserve]
        public List<ConsoleEventConfigurationExport> _events { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleExperimentPhaseExport> ExperimentPhases => _experimentPhases ?? new List<ConsoleExperimentPhaseExport>(0);
        [DataMember(Name="experiment_phases"), Preserve]
        public List<ConsoleExperimentPhaseExport> _experimentPhases { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleExperimentExport> Experiments => _experiments ?? new List<ConsoleExperimentExport>(0);
        [DataMember(Name="experiments"), Preserve]
        public List<ConsoleExperimentExport> _experiments { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleFlagExport> FeatureFlags => _featureFlags ?? new List<ConsoleFlagExport>(0);
        [DataMember(Name="feature_flags"), Preserve]
        public List<ConsoleFlagExport> _featureFlags { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleLiveEventExport> LiveEvents => _liveEvents ?? new List<ConsoleLiveEventExport>(0);
        [DataMember(Name="live_events"), Preserve]
        public List<ConsoleLiveEventExport> _liveEvents { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleMessageIntegrationExport> MessageIntegrations => _messageIntegrations ?? new List<ConsoleMessageIntegrationExport>(0);
        [DataMember(Name="message_integrations"), Preserve]
        public List<ConsoleMessageIntegrationExport> _messageIntegrations { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleMessageScheduleExport> MessageSchedules => _messageSchedules ?? new List<ConsoleMessageScheduleExport>(0);
        [DataMember(Name="message_schedules"), Preserve]
        public List<ConsoleMessageScheduleExport> _messageSchedules { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleMetricExport> Metrics => _metrics ?? new List<ConsoleMetricExport>(0);
        [DataMember(Name="metrics"), Preserve]
        public List<ConsoleMetricExport> _metrics { get; set; }

        /// <inheritdoc />
        [DataMember(Name="overwrite"), Preserve]
        public bool Overwrite { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsolePropertyConfigurationsExport Properties => _properties;
        [DataMember(Name="properties"), Preserve]
        public ConsolePropertyConfigurationsExport _properties { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleSchemaExport> Schemas => _schemas ?? new List<ConsoleSchemaExport>(0);
        [DataMember(Name="schemas"), Preserve]
        public List<ConsoleSchemaExport> _schemas { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleServerKeyExport> ServerKeys => _serverKeys ?? new List<ConsoleServerKeyExport>(0);
        [DataMember(Name="server_keys"), Preserve]
        public List<ConsoleServerKeyExport> _serverKeys { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleSettingExport> Settings => _settings ?? new List<ConsoleSettingExport>(0);
        [DataMember(Name="settings"), Preserve]
        public List<ConsoleSettingExport> _settings { get; set; }

        /// <inheritdoc />
        [DataMember(Name="source_server_id"), Preserve]
        public string SourceServerId { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleTemplateExport> Templates => _templates ?? new List<ConsoleTemplateExport>(0);
        [DataMember(Name="templates"), Preserve]
        public List<ConsoleTemplateExport> _templates { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleWebhookExport> Webhooks => _webhooks ?? new List<ConsoleWebhookExport>(0);
        [DataMember(Name="webhooks"), Preserve]
        public List<ConsoleWebhookExport> _webhooks { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "AdMeasurementPartnerConfigurations: [", string.Join(", ", AdMeasurementPartnerConfigurations), "], ");
            output = string.Concat(output, "AllowFlagOverlap: ", AllowFlagOverlap, ", ");
            output = string.Concat(output, "ApiKeys: [", string.Join(", ", ApiKeys), "], ");
            output = string.Concat(output, "Audiences: [", string.Join(", ", Audiences), "], ");
            output = string.Concat(output, "Categories: [", string.Join(", ", Categories), "], ");
            output = string.Concat(output, "DatalakeConfigurations: [", string.Join(", ", DatalakeConfigurations), "], ");
            output = string.Concat(output, "Events: [", string.Join(", ", Events), "], ");
            output = string.Concat(output, "ExperimentPhases: [", string.Join(", ", ExperimentPhases), "], ");
            output = string.Concat(output, "Experiments: [", string.Join(", ", Experiments), "], ");
            output = string.Concat(output, "FeatureFlags: [", string.Join(", ", FeatureFlags), "], ");
            output = string.Concat(output, "LiveEvents: [", string.Join(", ", LiveEvents), "], ");
            output = string.Concat(output, "MessageIntegrations: [", string.Join(", ", MessageIntegrations), "], ");
            output = string.Concat(output, "MessageSchedules: [", string.Join(", ", MessageSchedules), "], ");
            output = string.Concat(output, "Metrics: [", string.Join(", ", Metrics), "], ");
            output = string.Concat(output, "Overwrite: ", Overwrite, ", ");
            output = string.Concat(output, "Properties: ", Properties, ", ");
            output = string.Concat(output, "Schemas: [", string.Join(", ", Schemas), "], ");
            output = string.Concat(output, "ServerKeys: [", string.Join(", ", ServerKeys), "], ");
            output = string.Concat(output, "Settings: [", string.Join(", ", Settings), "], ");
            output = string.Concat(output, "SourceServerId: ", SourceServerId, ", ");
            output = string.Concat(output, "Templates: [", string.Join(", ", Templates), "], ");
            output = string.Concat(output, "Webhooks: [", string.Join(", ", Webhooks), "], ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IConsoleDataLakeConfigurationAppNavaML
    {

        /// <summary>
        /// the API secret for AppNava.
        /// </summary>
        string ApiSecretKey { get; }

        /// <summary>
        /// the URL to the dataset of the AppNava's model.
        /// </summary>
        string DatasetUrl { get; }
    }

    /// <inheritdoc />
    internal class ConsoleDataLakeConfigurationAppNavaML : IConsoleDataLakeConfigurationAppNavaML
    {

        /// <inheritdoc />
        [DataMember(Name="api_secret_key"), Preserve]
        public string ApiSecretKey { get; set; }

        /// <inheritdoc />
        [DataMember(Name="dataset_url"), Preserve]
        public string DatasetUrl { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "ApiSecretKey: ", ApiSecretKey, ", ");
            output = string.Concat(output, "DatasetUrl: ", DatasetUrl, ", ");
            return output;
        }
    }

    /// <summary>
    /// The configuration necessary to integrate with Google's BigQuery.
    /// </summary>
    public interface IConsoleDataLakeConfigurationBigQuery
    {

        /// <summary>
        /// The credentials provided using Google's platform.
        /// </summary>
        string Credentials { get; }

        /// <summary>
        /// The identifier of the dataset.
        /// </summary>
        string DatasetId { get; }

        /// <summary>
        /// The identifier of the project.
        /// </summary>
        string ProjectId { get; }

        /// <summary>
        /// The name of the table that will store the events.
        /// </summary>
        string TableName { get; }
    }

    /// <inheritdoc />
    internal class ConsoleDataLakeConfigurationBigQuery : IConsoleDataLakeConfigurationBigQuery
    {

        /// <inheritdoc />
        [DataMember(Name="credentials"), Preserve]
        public string Credentials { get; set; }

        /// <inheritdoc />
        [DataMember(Name="dataset_id"), Preserve]
        public string DatasetId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="project_id"), Preserve]
        public string ProjectId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="table_name"), Preserve]
        public string TableName { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Credentials: ", Credentials, ", ");
            output = string.Concat(output, "DatasetId: ", DatasetId, ", ");
            output = string.Concat(output, "ProjectId: ", ProjectId, ", ");
            output = string.Concat(output, "TableName: ", TableName, ", ");
            return output;
        }
    }

    /// <summary>
    /// The configuration necessary to integrate with Databricks (S3).
    /// </summary>
    public interface IConsoleDataLakeConfigurationDatabricks
    {

        /// <summary>
        /// The maximum number of rows per Parquet row group.
        /// </summary>
        string MaxRowsPerRowGroup { get; }

        /// <summary>
        /// The S3 configuration.
        /// </summary>
        IConsoleDataLakeConfigurationS3 S3Cfg { get; }
    }

    /// <inheritdoc />
    internal class ConsoleDataLakeConfigurationDatabricks : IConsoleDataLakeConfigurationDatabricks
    {

        /// <inheritdoc />
        [DataMember(Name="max_rows_per_row_group"), Preserve]
        public string MaxRowsPerRowGroup { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleDataLakeConfigurationS3 S3Cfg => _s3Cfg;
        [DataMember(Name="s3_cfg"), Preserve]
        public ConsoleDataLakeConfigurationS3 _s3Cfg { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "MaxRowsPerRowGroup: ", MaxRowsPerRowGroup, ", ");
            output = string.Concat(output, "S3Cfg: ", S3Cfg, ", ");
            return output;
        }
    }

    /// <summary>
    /// The configuration necessary to integrate with Redshift.
    /// </summary>
    public interface IConsoleDataLakeConfigurationRedshift
    {

        /// <summary>
        /// The table name.
        /// </summary>
        string TableName { get; }

        /// <summary>
        /// The connection string to connect to Redshift.
        /// </summary>
        string Url { get; }
    }

    /// <inheritdoc />
    internal class ConsoleDataLakeConfigurationRedshift : IConsoleDataLakeConfigurationRedshift
    {

        /// <inheritdoc />
        [DataMember(Name="table_name"), Preserve]
        public string TableName { get; set; }

        /// <inheritdoc />
        [DataMember(Name="url"), Preserve]
        public string Url { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "TableName: ", TableName, ", ");
            output = string.Concat(output, "Url: ", Url, ", ");
            return output;
        }
    }

    /// <summary>
    /// The configuration necessary to integrate with S3.
    /// </summary>
    public interface IConsoleDataLakeConfigurationS3
    {

        /// <summary>
        /// The AWS IAM access key ID of the user with permission to write to the bucket.
        /// </summary>
        string AccessKeyId { get; }

        /// <summary>
        /// The name of the S3 bucket.
        /// </summary>
        string Bucket { get; }

        /// <summary>
        /// If true, each event type will be stored in a separate folder.
        /// </summary>
        bool EventPartitioning { get; }

        /// <summary>
        /// The export file format.
        /// </summary>
        DataLakeConfigurationS3ExportFormat Format { get; }

        /// <summary>
        /// The interval, in minutes, at which the file is uploaded or finalized in S3.
        /// </summary>
        int Interval { get; }

        /// <summary>
        /// Maximum file size in megabytes.
        /// </summary>
        int MaxFileSize { get; }

        /// <summary>
        /// If true, files are uploaded in a real-time effort, bypassing the configured interval.
        /// </summary>
        bool RealTime { get; }

        /// <summary>
        /// The AWS region where the S3 bucket is located.
        /// </summary>
        string Region { get; }

        /// <summary>
        /// The secret access key associated with the access key ID.
        /// </summary>
        string SecretAccessKey { get; }
    }

    /// <inheritdoc />
    internal class ConsoleDataLakeConfigurationS3 : IConsoleDataLakeConfigurationS3
    {

        /// <inheritdoc />
        [DataMember(Name="access_key_id"), Preserve]
        public string AccessKeyId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="bucket"), Preserve]
        public string Bucket { get; set; }

        /// <inheritdoc />
        [DataMember(Name="event_partitioning"), Preserve]
        public bool EventPartitioning { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public DataLakeConfigurationS3ExportFormat Format => _format;
        [DataMember(Name="format"), Preserve]
        public DataLakeConfigurationS3ExportFormat _format { get; set; }

        /// <inheritdoc />
        [DataMember(Name="interval"), Preserve]
        public int Interval { get; set; }

        /// <inheritdoc />
        [DataMember(Name="max_file_size"), Preserve]
        public int MaxFileSize { get; set; }

        /// <inheritdoc />
        [DataMember(Name="real_time"), Preserve]
        public bool RealTime { get; set; }

        /// <inheritdoc />
        [DataMember(Name="region"), Preserve]
        public string Region { get; set; }

        /// <inheritdoc />
        [DataMember(Name="secret_access_key"), Preserve]
        public string SecretAccessKey { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "AccessKeyId: ", AccessKeyId, ", ");
            output = string.Concat(output, "Bucket: ", Bucket, ", ");
            output = string.Concat(output, "EventPartitioning: ", EventPartitioning, ", ");
            output = string.Concat(output, "Format: ", Format, ", ");
            output = string.Concat(output, "Interval: ", Interval, ", ");
            output = string.Concat(output, "MaxFileSize: ", MaxFileSize, ", ");
            output = string.Concat(output, "RealTime: ", RealTime, ", ");
            output = string.Concat(output, "Region: ", Region, ", ");
            output = string.Concat(output, "SecretAccessKey: ", SecretAccessKey, ", ");
            return output;
        }
    }

    /// <summary>
    /// The configuration necessary to integrate with Snowflake.
    /// </summary>
    public interface IConsoleDataLakeConfigurationSnowflake
    {

        /// <summary>
        /// The table name.
        /// </summary>
        string TableName { get; }

        /// <summary>
        /// The connection string to connect to Snowflake.
        /// </summary>
        string Url { get; }
    }

    /// <inheritdoc />
    internal class ConsoleDataLakeConfigurationSnowflake : IConsoleDataLakeConfigurationSnowflake
    {

        /// <inheritdoc />
        [DataMember(Name="table_name"), Preserve]
        public string TableName { get; set; }

        /// <inheritdoc />
        [DataMember(Name="url"), Preserve]
        public string Url { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "TableName: ", TableName, ", ");
            output = string.Concat(output, "Url: ", Url, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IConsoleDataLakeExport
    {

        /// <summary>
        /// The platform specific configuration as JSON.
        /// </summary>
        string Configuration { get; }

        /// <summary>
        /// The type of the message integration.
        /// </summary>
        ConsoleDataLakeIntegrationType Type { get; }

        /// <summary>
        /// The last time it was updated.
        /// </summary>
        string UpdateTime { get; }
    }

    /// <inheritdoc />
    internal class ConsoleDataLakeExport : IConsoleDataLakeExport
    {

        /// <inheritdoc />
        [DataMember(Name="configuration"), Preserve]
        public string Configuration { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public ConsoleDataLakeIntegrationType Type => _type;
        [DataMember(Name="type"), Preserve]
        public ConsoleDataLakeIntegrationType _type { get; set; }

        /// <inheritdoc />
        [DataMember(Name="update_time"), Preserve]
        public string UpdateTime { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Configuration: ", Configuration, ", ");
            output = string.Concat(output, "Type: ", Type, ", ");
            output = string.Concat(output, "UpdateTime: ", UpdateTime, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public enum ConsoleDataLakeIntegrationType
    {
        /// <summary>
        /// Data Lake integration's names.
        /// </summary>
        UNKNOWN = 0,
        /// <summary>
        /// 
        /// </summary>
        BIG_QUERY = 1,
        /// <summary>
        ///  - BIG_QUERY: The variant for Google's BigQuery.
        /// </summary>
        SNOWFLAKE = 2,
        /// <summary>
        ///  - SNOWFLAKE: The variant for Snowflake.
        /// </summary>
        REDSHIFT = 3,
        /// <summary>
        ///  - REDSHIFT: The variant for Amazon's Redshift.
        /// </summary>
        APP_NAVA = 4,
        /// <summary>
        ///  - APP_NAVA: The variant for AppNava.
        /// </summary>
        S3 = 5,
        /// <summary>
        ///  - S3: The variant for Amazon's S3.
        /// </summary>
        DATABRICKS = 6,
    }

    /// <summary>
    /// The list of Data Lake integrations available and their status.
    /// </summary>
    public interface IConsoleDataLakeListResponse
    {

        /// <summary>
        /// The list of integrations
        /// </summary>
        IEnumerable<ISatoriconsoleDataLake> Configurations { get; }
    }

    /// <inheritdoc />
    internal class ConsoleDataLakeListResponse : IConsoleDataLakeListResponse
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<ISatoriconsoleDataLake> Configurations => _configurations ?? new List<SatoriconsoleDataLake>(0);
        [DataMember(Name="configurations"), Preserve]
        public List<SatoriconsoleDataLake> _configurations { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Configurations: [", string.Join(", ", Configurations), "], ");
            return output;
        }
    }

    /// <summary>
    /// The DataLakeUpdateRequest updates the configuration of a possible data lake integration.
    /// </summary>
    public interface IConsoleDataLakeUpdateRequest
    {

        /// <summary>
        /// The new configuration for AppNava.
        /// </summary>
        IConsoleDataLakeConfigurationAppNavaML AppNavaMl { get; }

        /// <summary>
        /// The new configuration for BigQuery.
        /// </summary>
        IConsoleDataLakeConfigurationBigQuery Bigquery { get; }

        /// <summary>
        /// The new configuration for Databricks S3.
        /// </summary>
        IConsoleDataLakeConfigurationDatabricks Databricks { get; }

        /// <summary>
        /// The new configuration for Redshift.
        /// </summary>
        IConsoleDataLakeConfigurationRedshift Redshift { get; }

        /// <summary>
        /// The new configuration for S3.
        /// </summary>
        IConsoleDataLakeConfigurationS3 S3 { get; }

        /// <summary>
        /// The new configuration for Snowflake.
        /// </summary>
        IConsoleDataLakeConfigurationSnowflake Snowflake { get; }
    }

    /// <inheritdoc />
    internal class ConsoleDataLakeUpdateRequest : IConsoleDataLakeUpdateRequest
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleDataLakeConfigurationAppNavaML AppNavaMl => _appNavaMl;
        [DataMember(Name="app_nava_ml"), Preserve]
        public ConsoleDataLakeConfigurationAppNavaML _appNavaMl { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleDataLakeConfigurationBigQuery Bigquery => _bigquery;
        [DataMember(Name="bigquery"), Preserve]
        public ConsoleDataLakeConfigurationBigQuery _bigquery { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleDataLakeConfigurationDatabricks Databricks => _databricks;
        [DataMember(Name="databricks"), Preserve]
        public ConsoleDataLakeConfigurationDatabricks _databricks { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleDataLakeConfigurationRedshift Redshift => _redshift;
        [DataMember(Name="redshift"), Preserve]
        public ConsoleDataLakeConfigurationRedshift _redshift { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleDataLakeConfigurationS3 S3 => _s3;
        [DataMember(Name="s3"), Preserve]
        public ConsoleDataLakeConfigurationS3 _s3 { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleDataLakeConfigurationSnowflake Snowflake => _snowflake;
        [DataMember(Name="snowflake"), Preserve]
        public ConsoleDataLakeConfigurationSnowflake _snowflake { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "AppNavaMl: ", AppNavaMl, ", ");
            output = string.Concat(output, "Bigquery: ", Bigquery, ", ");
            output = string.Concat(output, "Databricks: ", Databricks, ", ");
            output = string.Concat(output, "Redshift: ", Redshift, ", ");
            output = string.Concat(output, "S3: ", S3, ", ");
            output = string.Concat(output, "Snowflake: ", Snowflake, ", ");
            return output;
        }
    }

    /// <summary>
    /// An individual event configuration.
    /// </summary>
    public interface IConsoleEventConfiguration
    {

        /// <summary>
        /// Core event configuration.
        /// </summary>
        bool Core { get; }

        /// <summary>
        /// Create time.
        /// </summary>
        string CreateTimeSec { get; }

        /// <summary>
        /// Description.
        /// </summary>
        string Description { get; }

        /// <summary>
        /// If true, the event is excluded from analytic features.
        /// </summary>
        bool DisableAnalytics { get; }

        /// <summary>
        /// Metadata schema.
        /// </summary>
        ISatoriconsoleSchema MetadataSchema { get; }

        /// <summary>
        /// Name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Whether event triggers an audience computation.
        /// </summary>
        bool Recompute { get; }

        /// <summary>
        /// If true, the event will not be written to the database.
        /// </summary>
        bool SkipDatabase { get; }

        /// <summary>
        /// Update time.
        /// </summary>
        string UpdateTimeSec { get; }

        /// <summary>
        /// Value schema.
        /// </summary>
        ISatoriconsoleSchema ValueSchema { get; }
    }

    /// <inheritdoc />
    internal class ConsoleEventConfiguration : IConsoleEventConfiguration
    {

        /// <inheritdoc />
        [DataMember(Name="core"), Preserve]
        public bool Core { get; set; }

        /// <inheritdoc />
        [DataMember(Name="create_time_sec"), Preserve]
        public string CreateTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="description"), Preserve]
        public string Description { get; set; }

        /// <inheritdoc />
        [DataMember(Name="disable_analytics"), Preserve]
        public bool DisableAnalytics { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public ISatoriconsoleSchema MetadataSchema => _metadataSchema;
        [DataMember(Name="metadata_schema"), Preserve]
        public SatoriconsoleSchema _metadataSchema { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="recompute"), Preserve]
        public bool Recompute { get; set; }

        /// <inheritdoc />
        [DataMember(Name="skip_database"), Preserve]
        public bool SkipDatabase { get; set; }

        /// <inheritdoc />
        [DataMember(Name="update_time_sec"), Preserve]
        public string UpdateTimeSec { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public ISatoriconsoleSchema ValueSchema => _valueSchema;
        [DataMember(Name="value_schema"), Preserve]
        public SatoriconsoleSchema _valueSchema { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Core: ", Core, ", ");
            output = string.Concat(output, "CreateTimeSec: ", CreateTimeSec, ", ");
            output = string.Concat(output, "Description: ", Description, ", ");
            output = string.Concat(output, "DisableAnalytics: ", DisableAnalytics, ", ");
            output = string.Concat(output, "MetadataSchema: ", MetadataSchema, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Recompute: ", Recompute, ", ");
            output = string.Concat(output, "SkipDatabase: ", SkipDatabase, ", ");
            output = string.Concat(output, "UpdateTimeSec: ", UpdateTimeSec, ", ");
            output = string.Concat(output, "ValueSchema: ", ValueSchema, ", ");
            return output;
        }
    }

    /// <summary>
    /// Request to create a new event configuration.
    /// </summary>
    public interface IConsoleEventConfigurationCreateRequest
    {

        /// <summary>
        /// Description.
        /// </summary>
        string Description { get; }

        /// <summary>
        /// // If true, the event will be excluded from analytic features.
        /// </summary>
        bool DisableAnalytics { get; }

        /// <summary>
        /// Metadata schema.
        /// </summary>
        string MetadataSchemaId { get; }

        /// <summary>
        /// Name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Whether the event triggers an audience computation.
        /// </summary>
        bool Recompute { get; }

        /// <summary>
        /// If true, the event will not be written to the database.
        /// </summary>
        bool SkipDatabase { get; }

        /// <summary>
        /// Value schema.
        /// </summary>
        string ValueSchemaId { get; }
    }

    /// <inheritdoc />
    internal class ConsoleEventConfigurationCreateRequest : IConsoleEventConfigurationCreateRequest
    {

        /// <inheritdoc />
        [DataMember(Name="description"), Preserve]
        public string Description { get; set; }

        /// <inheritdoc />
        [DataMember(Name="disable_analytics"), Preserve]
        public bool DisableAnalytics { get; set; }

        /// <inheritdoc />
        [DataMember(Name="metadata_schema_id"), Preserve]
        public string MetadataSchemaId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="recompute"), Preserve]
        public bool Recompute { get; set; }

        /// <inheritdoc />
        [DataMember(Name="skip_database"), Preserve]
        public bool SkipDatabase { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value_schema_id"), Preserve]
        public string ValueSchemaId { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Description: ", Description, ", ");
            output = string.Concat(output, "DisableAnalytics: ", DisableAnalytics, ", ");
            output = string.Concat(output, "MetadataSchemaId: ", MetadataSchemaId, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Recompute: ", Recompute, ", ");
            output = string.Concat(output, "SkipDatabase: ", SkipDatabase, ", ");
            output = string.Concat(output, "ValueSchemaId: ", ValueSchemaId, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IConsoleEventConfigurationExport
    {

        /// <summary>
        /// Description.
        /// </summary>
        string Description { get; }

        /// <summary>
        /// If true, the event is excluded from analytic features.
        /// </summary>
        bool DisableAnalytics { get; }

        /// <summary>
        /// Metadata schema.
        /// </summary>
        string MetadataSchemaId { get; }

        /// <summary>
        /// Name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Whether event triggers an audience computation.
        /// </summary>
        bool Recompute { get; }

        /// <summary>
        /// If true, the event will not be written to the database.
        /// </summary>
        bool SkipDatabase { get; }

        /// <summary>
        /// Value schema.
        /// </summary>
        string ValueSchemaId { get; }
    }

    /// <inheritdoc />
    internal class ConsoleEventConfigurationExport : IConsoleEventConfigurationExport
    {

        /// <inheritdoc />
        [DataMember(Name="description"), Preserve]
        public string Description { get; set; }

        /// <inheritdoc />
        [DataMember(Name="disable_analytics"), Preserve]
        public bool DisableAnalytics { get; set; }

        /// <inheritdoc />
        [DataMember(Name="metadata_schema_id"), Preserve]
        public string MetadataSchemaId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="recompute"), Preserve]
        public bool Recompute { get; set; }

        /// <inheritdoc />
        [DataMember(Name="skip_database"), Preserve]
        public bool SkipDatabase { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value_schema_id"), Preserve]
        public string ValueSchemaId { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Description: ", Description, ", ");
            output = string.Concat(output, "DisableAnalytics: ", DisableAnalytics, ", ");
            output = string.Concat(output, "MetadataSchemaId: ", MetadataSchemaId, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Recompute: ", Recompute, ", ");
            output = string.Concat(output, "SkipDatabase: ", SkipDatabase, ", ");
            output = string.Concat(output, "ValueSchemaId: ", ValueSchemaId, ", ");
            return output;
        }
    }

    /// <summary>
    /// A set of existing event configurations.
    /// </summary>
    public interface IConsoleEventConfigurations
    {

        /// <summary>
        /// Zero or more event configurations.
        /// </summary>
        IEnumerable<IConsoleEventConfiguration> Configurations { get; }
    }

    /// <inheritdoc />
    internal class ConsoleEventConfigurations : IConsoleEventConfigurations
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleEventConfiguration> Configurations => _configurations ?? new List<ConsoleEventConfiguration>(0);
        [DataMember(Name="configurations"), Preserve]
        public List<ConsoleEventConfiguration> _configurations { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Configurations: [", string.Join(", ", Configurations), "], ");
            return output;
        }
    }

    /// <summary>
    /// Represents a single experiment.
    /// </summary>
    public interface IConsoleExperiment
    {

        /// <summary>
        /// Audience list.
        /// </summary>
        IEnumerable<IConsoleAudienceView> Audiences { get; }

        /// <summary>
        /// Category labels.
        /// </summary>
        IEnumerable<IConsoleCategoryView> Categories { get; }

        /// <summary>
        /// Color hex, for the calendar view.
        /// </summary>
        string Color { get; }

        /// <summary>
        /// Create time.
        /// </summary>
        string CreateTimeSec { get; }

        /// <summary>
        /// Description.
        /// </summary>
        string Description { get; }

        /// <summary>
        /// Flag list of overrides.
        /// </summary>
        IEnumerable<IConsoleExperimentFlag> Flags { get; }

        /// <summary>
        /// Goal metrics.
        /// </summary>
        IEnumerable<IConsoleMetricView> GoalMetrics { get; }

        /// <summary>
        /// Audience list of exclusions.
        /// </summary>
        IEnumerable<IConsoleAudienceView> Holdouts { get; }

        /// <summary>
        /// Identifier.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// Monitor metrics.
        /// </summary>
        IEnumerable<IConsoleMetricView> MonitorMetrics { get; }

        /// <summary>
        /// Name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// The list of experiment phases.
        /// </summary>
        IEnumerable<IConsoleExperimentPhaseView> Phases { get; }

        /// <summary>
        /// Value's schema.
        /// </summary>
        IConsoleSchemaView Schema { get; }

        /// <summary>
        /// Split key.
        /// </summary>
        ConsoleSplitKey SplitKey { get; }

        /// <summary>
        /// Experiment status.
        /// </summary>
        ConsoleExperimentStatus Status { get; }

        /// <summary>
        /// Update time.
        /// </summary>
        string UpdateTimeSec { get; }

        /// <summary>
        /// Variants.
        /// </summary>
        IEnumerable<IConsoleExperimentVariant> Variants { get; }
    }

    /// <inheritdoc />
    internal class ConsoleExperiment : IConsoleExperiment
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleAudienceView> Audiences => _audiences ?? new List<ConsoleAudienceView>(0);
        [DataMember(Name="audiences"), Preserve]
        public List<ConsoleAudienceView> _audiences { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleCategoryView> Categories => _categories ?? new List<ConsoleCategoryView>(0);
        [DataMember(Name="categories"), Preserve]
        public List<ConsoleCategoryView> _categories { get; set; }

        /// <inheritdoc />
        [DataMember(Name="color"), Preserve]
        public string Color { get; set; }

        /// <inheritdoc />
        [DataMember(Name="create_time_sec"), Preserve]
        public string CreateTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="description"), Preserve]
        public string Description { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleExperimentFlag> Flags => _flags ?? new List<ConsoleExperimentFlag>(0);
        [DataMember(Name="flags"), Preserve]
        public List<ConsoleExperimentFlag> _flags { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleMetricView> GoalMetrics => _goalMetrics ?? new List<ConsoleMetricView>(0);
        [DataMember(Name="goal_metrics"), Preserve]
        public List<ConsoleMetricView> _goalMetrics { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleAudienceView> Holdouts => _holdouts ?? new List<ConsoleAudienceView>(0);
        [DataMember(Name="holdouts"), Preserve]
        public List<ConsoleAudienceView> _holdouts { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleMetricView> MonitorMetrics => _monitorMetrics ?? new List<ConsoleMetricView>(0);
        [DataMember(Name="monitor_metrics"), Preserve]
        public List<ConsoleMetricView> _monitorMetrics { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleExperimentPhaseView> Phases => _phases ?? new List<ConsoleExperimentPhaseView>(0);
        [DataMember(Name="phases"), Preserve]
        public List<ConsoleExperimentPhaseView> _phases { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleSchemaView Schema => _schema;
        [DataMember(Name="schema"), Preserve]
        public ConsoleSchemaView _schema { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public ConsoleSplitKey SplitKey => _splitKey;
        [DataMember(Name="split_key"), Preserve]
        public ConsoleSplitKey _splitKey { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public ConsoleExperimentStatus Status => _status;
        [DataMember(Name="status"), Preserve]
        public ConsoleExperimentStatus _status { get; set; }

        /// <inheritdoc />
        [DataMember(Name="update_time_sec"), Preserve]
        public string UpdateTimeSec { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleExperimentVariant> Variants => _variants ?? new List<ConsoleExperimentVariant>(0);
        [DataMember(Name="variants"), Preserve]
        public List<ConsoleExperimentVariant> _variants { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Audiences: [", string.Join(", ", Audiences), "], ");
            output = string.Concat(output, "Categories: [", string.Join(", ", Categories), "], ");
            output = string.Concat(output, "Color: ", Color, ", ");
            output = string.Concat(output, "CreateTimeSec: ", CreateTimeSec, ", ");
            output = string.Concat(output, "Description: ", Description, ", ");
            output = string.Concat(output, "Flags: [", string.Join(", ", Flags), "], ");
            output = string.Concat(output, "GoalMetrics: [", string.Join(", ", GoalMetrics), "], ");
            output = string.Concat(output, "Holdouts: [", string.Join(", ", Holdouts), "], ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "MonitorMetrics: [", string.Join(", ", MonitorMetrics), "], ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Phases: [", string.Join(", ", Phases), "], ");
            output = string.Concat(output, "Schema: ", Schema, ", ");
            output = string.Concat(output, "SplitKey: ", SplitKey, ", ");
            output = string.Concat(output, "Status: ", Status, ", ");
            output = string.Concat(output, "UpdateTimeSec: ", UpdateTimeSec, ", ");
            output = string.Concat(output, "Variants: [", string.Join(", ", Variants), "], ");
            return output;
        }
    }

    /// <summary>
    /// Result for the experiment calendar view.
    /// </summary>
    public interface IConsoleExperimentCalendarResult
    {

        /// <summary>
        /// Map of id -> full experiment data.
        /// </summary>
        IDictionary<string, IConsoleExperiment> Dict { get; }

        /// <summary>
        /// List of all phases for the requested timeframe.
        /// </summary>
        IEnumerable<IExperimentPhaseCalendarView> Periods { get; }
    }

    /// <inheritdoc />
    internal class ConsoleExperimentCalendarResult : IConsoleExperimentCalendarResult
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IDictionary<string, IConsoleExperiment> Dict  => _dict ?? new Dictionary<string, IConsoleExperiment>();
        [DataMember(Name="dict"), Preserve]
        public Dictionary<string, IConsoleExperiment> _dict { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IExperimentPhaseCalendarView> Periods => _periods ?? new List<ExperimentPhaseCalendarView>(0);
        [DataMember(Name="periods"), Preserve]
        public List<ExperimentPhaseCalendarView> _periods { get; set; }

        public override string ToString()
        {
            var output = "";

            var dictString = "";
            foreach (var kvp in Dict)
            {
                dictString = string.Concat(dictString, "{" + kvp.Key + "=" + kvp.Value + "}");
            }
            output = string.Concat(output, "Dict: [" + dictString + "]");
            output = string.Concat(output, "Periods: [", string.Join(", ", Periods), "], ");
            return output;
        }
    }

    /// <summary>
    /// Request to create a new experiment.
    /// </summary>
    public interface IConsoleExperimentCreateRequest
    {

        /// <summary>
        /// Audience list.
        /// </summary>
        IEnumerable<IConsoleAssociateAudienceRequest> Audiences { get; }

        /// <summary>
        /// Category label identifiers.
        /// </summary>
        List<string> CategoryIds { get; }

        /// <summary>
        /// Color hex, for the calendar view.
        /// </summary>
        string Color { get; }

        /// <summary>
        /// Description.
        /// </summary>
        string Description { get; }

        /// <summary>
        /// Goal metrics.
        /// </summary>
        IEnumerable<IConsoleAssociateMetricRequest> GoalMetrics { get; }

        /// <summary>
        /// Audience list of exclusions.
        /// </summary>
        IEnumerable<IConsoleAssociateAudienceRequest> Holdouts { get; }

        /// <summary>
        /// Monitor metrics.
        /// </summary>
        IEnumerable<IConsoleAssociateMetricRequest> MonitorMetrics { get; }

        /// <summary>
        /// Name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Schema identifier.
        /// </summary>
        string SchemaId { get; }

        /// <summary>
        /// Split key.
        /// </summary>
        ConsoleSplitKey SplitKey { get; }

        /// <summary>
        /// Variants.
        /// </summary>
        IEnumerable<IConsoleExperimentVariantCreateRequest> Variants { get; }
    }

    /// <inheritdoc />
    internal class ConsoleExperimentCreateRequest : IConsoleExperimentCreateRequest
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleAssociateAudienceRequest> Audiences => _audiences ?? new List<ConsoleAssociateAudienceRequest>(0);
        [DataMember(Name="audiences"), Preserve]
        public List<ConsoleAssociateAudienceRequest> _audiences { get; set; }

        /// <inheritdoc />
        [DataMember(Name="category_ids"), Preserve]
        public List<string> CategoryIds { get; set; }

        /// <inheritdoc />
        [DataMember(Name="color"), Preserve]
        public string Color { get; set; }

        /// <inheritdoc />
        [DataMember(Name="description"), Preserve]
        public string Description { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleAssociateMetricRequest> GoalMetrics => _goalMetrics ?? new List<ConsoleAssociateMetricRequest>(0);
        [DataMember(Name="goal_metrics"), Preserve]
        public List<ConsoleAssociateMetricRequest> _goalMetrics { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleAssociateAudienceRequest> Holdouts => _holdouts ?? new List<ConsoleAssociateAudienceRequest>(0);
        [DataMember(Name="holdouts"), Preserve]
        public List<ConsoleAssociateAudienceRequest> _holdouts { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleAssociateMetricRequest> MonitorMetrics => _monitorMetrics ?? new List<ConsoleAssociateMetricRequest>(0);
        [DataMember(Name="monitor_metrics"), Preserve]
        public List<ConsoleAssociateMetricRequest> _monitorMetrics { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="schema_id"), Preserve]
        public string SchemaId { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public ConsoleSplitKey SplitKey => _splitKey;
        [DataMember(Name="split_key"), Preserve]
        public ConsoleSplitKey _splitKey { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleExperimentVariantCreateRequest> Variants => _variants ?? new List<ConsoleExperimentVariantCreateRequest>(0);
        [DataMember(Name="variants"), Preserve]
        public List<ConsoleExperimentVariantCreateRequest> _variants { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Audiences: [", string.Join(", ", Audiences), "], ");
            output = string.Concat(output, "CategoryIds: [", string.Join(", ", CategoryIds), "], ");
            output = string.Concat(output, "Color: ", Color, ", ");
            output = string.Concat(output, "Description: ", Description, ", ");
            output = string.Concat(output, "GoalMetrics: [", string.Join(", ", GoalMetrics), "], ");
            output = string.Concat(output, "Holdouts: [", string.Join(", ", Holdouts), "], ");
            output = string.Concat(output, "MonitorMetrics: [", string.Join(", ", MonitorMetrics), "], ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "SchemaId: ", SchemaId, ", ");
            output = string.Concat(output, "SplitKey: ", SplitKey, ", ");
            output = string.Concat(output, "Variants: [", string.Join(", ", Variants), "], ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IConsoleExperimentExport
    {

        /// <summary>
        /// Audience list.
        /// </summary>
        List<string> AudienceIds { get; }

        /// <summary>
        /// Category label list.
        /// </summary>
        List<string> CategoryIds { get; }

        /// <summary>
        /// Color hex, for the calendar view.
        /// </summary>
        string Color { get; }

        /// <summary>
        /// Description.
        /// </summary>
        string Description { get; }

        /// <summary>
        /// Flag list of overrides.
        /// </summary>
        IEnumerable<IConsoleExperimentFlagExport> Flags { get; }

        /// <summary>
        /// Goal metrics.
        /// </summary>
        List<string> GoalMetricIds { get; }

        /// <summary>
        /// Audience list of exclusions.
        /// </summary>
        List<string> HoldoutIds { get; }

        /// <summary>
        /// Identifier.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// Monitor metrics.
        /// </summary>
        List<string> MonitorMetricIds { get; }

        /// <summary>
        /// Name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Value's schema id.
        /// </summary>
        string SchemaId { get; }

        /// <summary>
        /// Split key.
        /// </summary>
        ConsoleSplitKey SplitKey { get; }

        /// <summary>
        /// Variants.
        /// </summary>
        IEnumerable<IConsoleExperimentVariantExport> Variants { get; }
    }

    /// <inheritdoc />
    internal class ConsoleExperimentExport : IConsoleExperimentExport
    {

        /// <inheritdoc />
        [DataMember(Name="audience_ids"), Preserve]
        public List<string> AudienceIds { get; set; }

        /// <inheritdoc />
        [DataMember(Name="category_ids"), Preserve]
        public List<string> CategoryIds { get; set; }

        /// <inheritdoc />
        [DataMember(Name="color"), Preserve]
        public string Color { get; set; }

        /// <inheritdoc />
        [DataMember(Name="description"), Preserve]
        public string Description { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleExperimentFlagExport> Flags => _flags ?? new List<ConsoleExperimentFlagExport>(0);
        [DataMember(Name="flags"), Preserve]
        public List<ConsoleExperimentFlagExport> _flags { get; set; }

        /// <inheritdoc />
        [DataMember(Name="goal_metric_ids"), Preserve]
        public List<string> GoalMetricIds { get; set; }

        /// <inheritdoc />
        [DataMember(Name="holdout_ids"), Preserve]
        public List<string> HoldoutIds { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="monitor_metric_ids"), Preserve]
        public List<string> MonitorMetricIds { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="schema_id"), Preserve]
        public string SchemaId { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public ConsoleSplitKey SplitKey => _splitKey;
        [DataMember(Name="split_key"), Preserve]
        public ConsoleSplitKey _splitKey { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleExperimentVariantExport> Variants => _variants ?? new List<ConsoleExperimentVariantExport>(0);
        [DataMember(Name="variants"), Preserve]
        public List<ConsoleExperimentVariantExport> _variants { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "AudienceIds: [", string.Join(", ", AudienceIds), "], ");
            output = string.Concat(output, "CategoryIds: [", string.Join(", ", CategoryIds), "], ");
            output = string.Concat(output, "Color: ", Color, ", ");
            output = string.Concat(output, "Description: ", Description, ", ");
            output = string.Concat(output, "Flags: [", string.Join(", ", Flags), "], ");
            output = string.Concat(output, "GoalMetricIds: [", string.Join(", ", GoalMetricIds), "], ");
            output = string.Concat(output, "HoldoutIds: [", string.Join(", ", HoldoutIds), "], ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "MonitorMetricIds: [", string.Join(", ", MonitorMetricIds), "], ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "SchemaId: ", SchemaId, ", ");
            output = string.Concat(output, "SplitKey: ", SplitKey, ", ");
            output = string.Concat(output, "Variants: [", string.Join(", ", Variants), "], ");
            return output;
        }
    }

    /// <summary>
    /// An experiment flag override.
    /// </summary>
    public interface IConsoleExperimentFlag
    {

        /// <summary>
        /// Flag id.
        /// </summary>
        string FlagId { get; }

        /// <summary>
        /// Flag name.
        /// </summary>
        string FlagName { get; }

        /// <summary>
        /// Identifier.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// True if this flag's schema describes a JSON object.
        /// </summary>
        bool IsSchemaObject { get; }

        /// <summary>
        /// The flag value's schema.
        /// </summary>
        IConsoleSchemaView Schema { get; }

        /// <summary>
        /// Update time.
        /// </summary>
        string UpdateTimeSec { get; }

        /// <summary>
        /// Flag value.
        /// </summary>
        string Value { get; }
    }

    /// <inheritdoc />
    internal class ConsoleExperimentFlag : IConsoleExperimentFlag
    {

        /// <inheritdoc />
        [DataMember(Name="flag_id"), Preserve]
        public string FlagId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="flag_name"), Preserve]
        public string FlagName { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="is_schema_object"), Preserve]
        public bool IsSchemaObject { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleSchemaView Schema => _schema;
        [DataMember(Name="schema"), Preserve]
        public ConsoleSchemaView _schema { get; set; }

        /// <inheritdoc />
        [DataMember(Name="update_time_sec"), Preserve]
        public string UpdateTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "FlagId: ", FlagId, ", ");
            output = string.Concat(output, "FlagName: ", FlagName, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "IsSchemaObject: ", IsSchemaObject, ", ");
            output = string.Concat(output, "Schema: ", Schema, ", ");
            output = string.Concat(output, "UpdateTimeSec: ", UpdateTimeSec, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IConsoleExperimentFlagExport
    {

        /// <summary>
        /// Flag id.
        /// </summary>
        string FlagId { get; }

        /// <summary>
        /// Identifier.
        /// </summary>
        string Id { get; }
    }

    /// <inheritdoc />
    internal class ConsoleExperimentFlagExport : IConsoleExperimentFlagExport
    {

        /// <inheritdoc />
        [DataMember(Name="flag_id"), Preserve]
        public string FlagId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "FlagId: ", FlagId, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");
            return output;
        }
    }

    /// <summary>
    /// The search options available for the ExperimentList endpoint.
    /// </summary>
    public interface IConsoleExperimentListRequestSearchOptions
    {

        /// <summary>
        /// Filter by Label name.
        /// </summary>
        IConsoleMultiTextValueFilterOption LabelName { get; }

        /// <summary>
        /// Filter by Name name.
        /// </summary>
        IConsoleSingleTextValueFilterOption Name { get; }

        /// <summary>
        /// Filter by Status.
        /// </summary>
        IConsoleSingleEnumValueFilterOption Status { get; }
    }

    /// <inheritdoc />
    internal class ConsoleExperimentListRequestSearchOptions : IConsoleExperimentListRequestSearchOptions
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleMultiTextValueFilterOption LabelName => _labelName;
        [DataMember(Name="label_name"), Preserve]
        public ConsoleMultiTextValueFilterOption _labelName { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleSingleTextValueFilterOption Name => _name;
        [DataMember(Name="name"), Preserve]
        public ConsoleSingleTextValueFilterOption _name { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleSingleEnumValueFilterOption Status => _status;
        [DataMember(Name="status"), Preserve]
        public ConsoleSingleEnumValueFilterOption _status { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "LabelName: ", LabelName, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Status: ", Status, ", ");
            return output;
        }
    }

    /// <summary>
    /// Represents an experiment phase.
    /// </summary>
    public interface IConsoleExperimentPhase
    {

        /// <summary>
        /// The unix time when the experiment stops accepting new participants.
        /// </summary>
        string AdmissionDeadlineSec { get; }

        /// <summary>
        /// Audience list.
        /// </summary>
        IEnumerable<IConsoleAudienceView> Audiences { get; }

        /// <summary>
        /// Create time.
        /// </summary>
        string CreateTimeSec { get; }

        /// <summary>
        /// Description.
        /// </summary>
        string Description { get; }

        /// <summary>
        /// Scheduled end time.
        /// </summary>
        string EndTimeSec { get; }

        /// <summary>
        /// The experiment id.
        /// </summary>
        string ExperimentId { get; }

        /// <summary>
        /// Goal metrics.
        /// </summary>
        IEnumerable<IConsoleMetricView> GoalMetrics { get; }

        /// <summary>
        /// Audience list of exclusions.
        /// </summary>
        IEnumerable<IConsoleAudienceView> Holdouts { get; }

        /// <summary>
        /// Identifier.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// Max number of participants.
        /// </summary>
        int MaxParticipants { get; }

        /// <summary>
        /// Monitor metrics.
        /// </summary>
        IEnumerable<IConsoleMetricView> MonitorMetrics { get; }

        /// <summary>
        /// Name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Raw results.
        /// </summary>
        IEnumerable<IConsoleExperimentPhaseRawResult> Results { get; }

        /// <summary>
        /// Value's schema.
        /// </summary>
        IConsoleSchemaView Schema { get; }

        /// <summary>
        /// Split key.
        /// </summary>
        ConsoleSplitKey SplitKey { get; }

        /// <summary>
        /// Scheduled start time.
        /// </summary>
        string StartTimeSec { get; }

        /// <summary>
        /// Status.
        /// </summary>
        ConsoleExperimentPhaseStatus Status { get; }

        /// <summary>
        /// Stop time, if stopped early.
        /// </summary>
        string StopTimeSec { get; }

        /// <summary>
        /// Update time.
        /// </summary>
        string UpdateTimeSec { get; }

        /// <summary>
        /// Variants and their splits.
        /// </summary>
        IEnumerable<IConsoleExperimentPhaseVariantView> Variants { get; }
    }

    /// <inheritdoc />
    internal class ConsoleExperimentPhase : IConsoleExperimentPhase
    {

        /// <inheritdoc />
        [DataMember(Name="admission_deadline_sec"), Preserve]
        public string AdmissionDeadlineSec { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleAudienceView> Audiences => _audiences ?? new List<ConsoleAudienceView>(0);
        [DataMember(Name="audiences"), Preserve]
        public List<ConsoleAudienceView> _audiences { get; set; }

        /// <inheritdoc />
        [DataMember(Name="create_time_sec"), Preserve]
        public string CreateTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="description"), Preserve]
        public string Description { get; set; }

        /// <inheritdoc />
        [DataMember(Name="end_time_sec"), Preserve]
        public string EndTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="experiment_id"), Preserve]
        public string ExperimentId { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleMetricView> GoalMetrics => _goalMetrics ?? new List<ConsoleMetricView>(0);
        [DataMember(Name="goal_metrics"), Preserve]
        public List<ConsoleMetricView> _goalMetrics { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleAudienceView> Holdouts => _holdouts ?? new List<ConsoleAudienceView>(0);
        [DataMember(Name="holdouts"), Preserve]
        public List<ConsoleAudienceView> _holdouts { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="max_participants"), Preserve]
        public int MaxParticipants { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleMetricView> MonitorMetrics => _monitorMetrics ?? new List<ConsoleMetricView>(0);
        [DataMember(Name="monitor_metrics"), Preserve]
        public List<ConsoleMetricView> _monitorMetrics { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleExperimentPhaseRawResult> Results => _results ?? new List<ConsoleExperimentPhaseRawResult>(0);
        [DataMember(Name="results"), Preserve]
        public List<ConsoleExperimentPhaseRawResult> _results { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleSchemaView Schema => _schema;
        [DataMember(Name="schema"), Preserve]
        public ConsoleSchemaView _schema { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public ConsoleSplitKey SplitKey => _splitKey;
        [DataMember(Name="split_key"), Preserve]
        public ConsoleSplitKey _splitKey { get; set; }

        /// <inheritdoc />
        [DataMember(Name="start_time_sec"), Preserve]
        public string StartTimeSec { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public ConsoleExperimentPhaseStatus Status => _status;
        [DataMember(Name="status"), Preserve]
        public ConsoleExperimentPhaseStatus _status { get; set; }

        /// <inheritdoc />
        [DataMember(Name="stop_time_sec"), Preserve]
        public string StopTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="update_time_sec"), Preserve]
        public string UpdateTimeSec { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleExperimentPhaseVariantView> Variants => _variants ?? new List<ConsoleExperimentPhaseVariantView>(0);
        [DataMember(Name="variants"), Preserve]
        public List<ConsoleExperimentPhaseVariantView> _variants { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "AdmissionDeadlineSec: ", AdmissionDeadlineSec, ", ");
            output = string.Concat(output, "Audiences: [", string.Join(", ", Audiences), "], ");
            output = string.Concat(output, "CreateTimeSec: ", CreateTimeSec, ", ");
            output = string.Concat(output, "Description: ", Description, ", ");
            output = string.Concat(output, "EndTimeSec: ", EndTimeSec, ", ");
            output = string.Concat(output, "ExperimentId: ", ExperimentId, ", ");
            output = string.Concat(output, "GoalMetrics: [", string.Join(", ", GoalMetrics), "], ");
            output = string.Concat(output, "Holdouts: [", string.Join(", ", Holdouts), "], ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "MaxParticipants: ", MaxParticipants, ", ");
            output = string.Concat(output, "MonitorMetrics: [", string.Join(", ", MonitorMetrics), "], ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Results: [", string.Join(", ", Results), "], ");
            output = string.Concat(output, "Schema: ", Schema, ", ");
            output = string.Concat(output, "SplitKey: ", SplitKey, ", ");
            output = string.Concat(output, "StartTimeSec: ", StartTimeSec, ", ");
            output = string.Concat(output, "Status: ", Status, ", ");
            output = string.Concat(output, "StopTimeSec: ", StopTimeSec, ", ");
            output = string.Concat(output, "UpdateTimeSec: ", UpdateTimeSec, ", ");
            output = string.Concat(output, "Variants: [", string.Join(", ", Variants), "], ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IConsoleExperimentPhaseExport
    {

        /// <summary>
        /// The unix time when the experiment stops accepting new participants.
        /// </summary>
        string AdmissionDeadlineSec { get; }

        /// <summary>
        /// Audience list.
        /// </summary>
        List<string> AudienceIds { get; }

        /// <summary>
        /// Description.
        /// </summary>
        string Description { get; }

        /// <summary>
        /// Scheduled end time.
        /// </summary>
        string EndTimeSec { get; }

        /// <summary>
        /// The experiment id.
        /// </summary>
        string ExperimentId { get; }

        /// <summary>
        /// Goal metrics.
        /// </summary>
        List<string> GoalMetricIds { get; }

        /// <summary>
        /// Audience list of exclusions.
        /// </summary>
        List<string> HoldoutIds { get; }

        /// <summary>
        /// Identifier.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// Max number of participants.
        /// </summary>
        int MaxParticipants { get; }

        /// <summary>
        /// Monitor metrics.
        /// </summary>
        List<string> MonitorMetricIds { get; }

        /// <summary>
        /// Name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Value's schema id.
        /// </summary>
        string SchemaId { get; }

        /// <summary>
        /// Split key.
        /// </summary>
        ConsoleSplitKey SplitKey { get; }

        /// <summary>
        /// Scheduled start time.
        /// </summary>
        string StartTimeSec { get; }

        /// <summary>
        /// Stop time, if stopped early.
        /// </summary>
        string StopTimeSec { get; }

        /// <summary>
        /// Variants and their splits.
        /// </summary>
        IEnumerable<IExperimentPhaseExportVariant> Variants { get; }
    }

    /// <inheritdoc />
    internal class ConsoleExperimentPhaseExport : IConsoleExperimentPhaseExport
    {

        /// <inheritdoc />
        [DataMember(Name="admission_deadline_sec"), Preserve]
        public string AdmissionDeadlineSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="audience_ids"), Preserve]
        public List<string> AudienceIds { get; set; }

        /// <inheritdoc />
        [DataMember(Name="description"), Preserve]
        public string Description { get; set; }

        /// <inheritdoc />
        [DataMember(Name="end_time_sec"), Preserve]
        public string EndTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="experiment_id"), Preserve]
        public string ExperimentId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="goal_metric_ids"), Preserve]
        public List<string> GoalMetricIds { get; set; }

        /// <inheritdoc />
        [DataMember(Name="holdout_ids"), Preserve]
        public List<string> HoldoutIds { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="max_participants"), Preserve]
        public int MaxParticipants { get; set; }

        /// <inheritdoc />
        [DataMember(Name="monitor_metric_ids"), Preserve]
        public List<string> MonitorMetricIds { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="schema_id"), Preserve]
        public string SchemaId { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public ConsoleSplitKey SplitKey => _splitKey;
        [DataMember(Name="split_key"), Preserve]
        public ConsoleSplitKey _splitKey { get; set; }

        /// <inheritdoc />
        [DataMember(Name="start_time_sec"), Preserve]
        public string StartTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="stop_time_sec"), Preserve]
        public string StopTimeSec { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IExperimentPhaseExportVariant> Variants => _variants ?? new List<ExperimentPhaseExportVariant>(0);
        [DataMember(Name="variants"), Preserve]
        public List<ExperimentPhaseExportVariant> _variants { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "AdmissionDeadlineSec: ", AdmissionDeadlineSec, ", ");
            output = string.Concat(output, "AudienceIds: [", string.Join(", ", AudienceIds), "], ");
            output = string.Concat(output, "Description: ", Description, ", ");
            output = string.Concat(output, "EndTimeSec: ", EndTimeSec, ", ");
            output = string.Concat(output, "ExperimentId: ", ExperimentId, ", ");
            output = string.Concat(output, "GoalMetricIds: [", string.Join(", ", GoalMetricIds), "], ");
            output = string.Concat(output, "HoldoutIds: [", string.Join(", ", HoldoutIds), "], ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "MaxParticipants: ", MaxParticipants, ", ");
            output = string.Concat(output, "MonitorMetricIds: [", string.Join(", ", MonitorMetricIds), "], ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "SchemaId: ", SchemaId, ", ");
            output = string.Concat(output, "SplitKey: ", SplitKey, ", ");
            output = string.Concat(output, "StartTimeSec: ", StartTimeSec, ", ");
            output = string.Concat(output, "StopTimeSec: ", StopTimeSec, ", ");
            output = string.Concat(output, "Variants: [", string.Join(", ", Variants), "], ");
            return output;
        }
    }

    /// <summary>
    /// An experiment flag override.
    /// </summary>
    public interface IConsoleExperimentPhaseFlagView
    {

        /// <summary>
        /// Flag id.
        /// </summary>
        string FlagId { get; }

        /// <summary>
        /// Flag name.
        /// </summary>
        string FlagName { get; }

        /// <summary>
        /// Identifier.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// The flag value's schema.
        /// </summary>
        IConsoleSchemaView Schema { get; }

        /// <summary>
        /// Flag value.
        /// </summary>
        string Value { get; }
    }

    /// <inheritdoc />
    internal class ConsoleExperimentPhaseFlagView : IConsoleExperimentPhaseFlagView
    {

        /// <inheritdoc />
        [DataMember(Name="flag_id"), Preserve]
        public string FlagId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="flag_name"), Preserve]
        public string FlagName { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleSchemaView Schema => _schema;
        [DataMember(Name="schema"), Preserve]
        public ConsoleSchemaView _schema { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "FlagId: ", FlagId, ", ");
            output = string.Concat(output, "FlagName: ", FlagName, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Schema: ", Schema, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            return output;
        }
    }

    /// <summary>
    /// The list of identities that participate in an Experiment Phase.
    /// </summary>
    public interface IConsoleExperimentPhaseIdentities
    {

        /// <summary>
        /// The list of identities.
        /// </summary>
        IEnumerable<IConsoleExperimentPhaseIdentity> Identities { get; }

        /// <summary>
        /// The cursor for the next page.
        /// </summary>
        string NextCursor { get; }
    }

    /// <inheritdoc />
    internal class ConsoleExperimentPhaseIdentities : IConsoleExperimentPhaseIdentities
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleExperimentPhaseIdentity> Identities => _identities ?? new List<ConsoleExperimentPhaseIdentity>(0);
        [DataMember(Name="identities"), Preserve]
        public List<ConsoleExperimentPhaseIdentity> _identities { get; set; }

        /// <inheritdoc />
        [DataMember(Name="next_cursor"), Preserve]
        public string NextCursor { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Identities: [", string.Join(", ", Identities), "], ");
            output = string.Concat(output, "NextCursor: ", NextCursor, ", ");
            return output;
        }
    }

    /// <summary>
    /// The identity participation info in an experiment phase.
    /// </summary>
    public interface IConsoleExperimentPhaseIdentity
    {

        /// <summary>
        /// The Audience.
        /// </summary>
        IConsoleAudienceView Audience { get; }

        /// <summary>
        /// The time it join the experiment phase.
        /// </summary>
        string CreateTimeSec { get; }

        /// <summary>
        /// The identifier of the Identity.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// The Experiment Phase's Variant.
        /// </summary>
        IConsoleExperimentPhaseIdentityVariantView Variant { get; }
    }

    /// <inheritdoc />
    internal class ConsoleExperimentPhaseIdentity : IConsoleExperimentPhaseIdentity
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleAudienceView Audience => _audience;
        [DataMember(Name="audience"), Preserve]
        public ConsoleAudienceView _audience { get; set; }

        /// <inheritdoc />
        [DataMember(Name="create_time_sec"), Preserve]
        public string CreateTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleExperimentPhaseIdentityVariantView Variant => _variant;
        [DataMember(Name="variant"), Preserve]
        public ConsoleExperimentPhaseIdentityVariantView _variant { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Audience: ", Audience, ", ");
            output = string.Concat(output, "CreateTimeSec: ", CreateTimeSec, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Variant: ", Variant, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IConsoleExperimentPhaseIdentityVariantView
    {

        /// <summary>
        /// The identifier of the variant.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// The name of the variant.
        /// </summary>
        string Name { get; }
    }

    /// <inheritdoc />
    internal class ConsoleExperimentPhaseIdentityVariantView : IConsoleExperimentPhaseIdentityVariantView
    {

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            return output;
        }
    }

    /// <summary>
    /// Phase result table.
    /// </summary>
    public interface IConsoleExperimentPhaseRawResult
    {

        /// <summary>
        /// Count.
        /// </summary>
        string Count { get; }

        /// <summary>
        /// Metric id.
        /// </summary>
        string MetricId { get; }

        /// <summary>
        /// Phase variant id.
        /// </summary>
        string PhaseVariantId { get; }

        /// <summary>
        /// Value.
        /// </summary>
        string Value { get; }
    }

    /// <inheritdoc />
    internal class ConsoleExperimentPhaseRawResult : IConsoleExperimentPhaseRawResult
    {

        /// <inheritdoc />
        [DataMember(Name="count"), Preserve]
        public string Count { get; set; }

        /// <inheritdoc />
        [DataMember(Name="metric_id"), Preserve]
        public string MetricId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="phase_variant_id"), Preserve]
        public string PhaseVariantId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Count: ", Count, ", ");
            output = string.Concat(output, "MetricId: ", MetricId, ", ");
            output = string.Concat(output, "PhaseVariantId: ", PhaseVariantId, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public enum ConsoleExperimentPhaseStatus
    {
        /// <summary>
        /// The status of an experiment phase.
        /// </summary>
        WAITING = 0,
        /// <summary>
        /// 
        /// </summary>
        RUNNING = 1,
        /// <summary>
        ///  - WAITING: Waiting according to the schedule defined.
        /// </summary>
        COMPLETED = 2,
        /// <summary>
        ///  - RUNNING: Running as scheduled.
        /// </summary>
        INTERRUPED = 3,
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IConsoleExperimentPhaseVariantCreateRequest
    {

        /// <summary>
        /// Flag overrides.
        /// </summary>
        IEnumerable<IConsoleAssociateFlagRequest> Flags { get; }

        /// <summary>
        /// Variant name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Desired targete segment split for the variant. Split is percentage between number 0 and 100.
        /// </summary>
        int Split { get; }

        /// <summary>
        /// Variant value.
        /// </summary>
        string Value { get; }
    }

    /// <inheritdoc />
    internal class ConsoleExperimentPhaseVariantCreateRequest : IConsoleExperimentPhaseVariantCreateRequest
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleAssociateFlagRequest> Flags => _flags ?? new List<ConsoleAssociateFlagRequest>(0);
        [DataMember(Name="flags"), Preserve]
        public List<ConsoleAssociateFlagRequest> _flags { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="split"), Preserve]
        public int Split { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Flags: [", string.Join(", ", Flags), "], ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Split: ", Split, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IConsoleExperimentPhaseVariantUpsertRequest
    {

        /// <summary>
        /// Flag overrides.
        /// </summary>
        IEnumerable<IConsoleAssociateFlagRequest> Flags { get; }

        /// <summary>
        /// Variant identifier.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// Variant name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Desired targete segment split for the variant. Split is percentage between number 0 and 100.
        /// </summary>
        int Split { get; }

        /// <summary>
        /// Variant value.
        /// </summary>
        string Value { get; }
    }

    /// <inheritdoc />
    internal class ConsoleExperimentPhaseVariantUpsertRequest : IConsoleExperimentPhaseVariantUpsertRequest
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleAssociateFlagRequest> Flags => _flags ?? new List<ConsoleAssociateFlagRequest>(0);
        [DataMember(Name="flags"), Preserve]
        public List<ConsoleAssociateFlagRequest> _flags { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="split"), Preserve]
        public int Split { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Flags: [", string.Join(", ", Flags), "], ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Split: ", Split, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            return output;
        }
    }

    /// <summary>
    /// Experiment phase variant snapshot and split information.
    /// </summary>
    public interface IConsoleExperimentPhaseVariantView
    {

        /// <summary>
        /// Overridden flags.
        /// </summary>
        IEnumerable<IConsoleExperimentPhaseFlagView> Flags { get; }

        /// <summary>
        /// Variant id.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// Variant Name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Split percentage as a number 0-100.
        /// </summary>
        int Split { get; }

        /// <summary>
        /// Variant value.
        /// </summary>
        string Value { get; }
    }

    /// <inheritdoc />
    internal class ConsoleExperimentPhaseVariantView : IConsoleExperimentPhaseVariantView
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleExperimentPhaseFlagView> Flags => _flags ?? new List<ConsoleExperimentPhaseFlagView>(0);
        [DataMember(Name="flags"), Preserve]
        public List<ConsoleExperimentPhaseFlagView> _flags { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="split"), Preserve]
        public int Split { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Flags: [", string.Join(", ", Flags), "], ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Split: ", Split, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            return output;
        }
    }

    /// <summary>
    /// A view into an experiment phase.
    /// </summary>
    public interface IConsoleExperimentPhaseView
    {

        /// <summary>
        /// The unix time when the experiment stops accepting new participants.
        /// </summary>
        string AdmissionDeadlineSec { get; }

        /// <summary>
        /// Audience list.
        /// </summary>
        IEnumerable<IConsoleAudienceView> Audiences { get; }

        /// <summary>
        /// Description.
        /// </summary>
        string Description { get; }

        /// <summary>
        /// Scheduled end time.
        /// </summary>
        string EndTimeSec { get; }

        /// <summary>
        /// Goal metrics.
        /// </summary>
        IEnumerable<IConsoleMetricView> GoalMetrics { get; }

        /// <summary>
        /// Audience list of exclusions.
        /// </summary>
        IEnumerable<IConsoleAudienceView> Holdouts { get; }

        /// <summary>
        /// Identifier.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// Max number of participants.
        /// </summary>
        int MaxParticipants { get; }

        /// <summary>
        /// Monitor metrics.
        /// </summary>
        IEnumerable<IConsoleMetricView> MonitorMetrics { get; }

        /// <summary>
        /// Name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Value schema.
        /// </summary>
        IConsoleSchemaView Schema { get; }

        /// <summary>
        /// Split key.
        /// </summary>
        ConsoleSplitKey SplitKey { get; }

        /// <summary>
        /// Scheduled start time.
        /// </summary>
        string StartTimeSec { get; }

        /// <summary>
        /// Status.
        /// </summary>
        ConsoleExperimentPhaseStatus Status { get; }

        /// <summary>
        /// Stop time, if stopped early.
        /// </summary>
        string StopTimeSec { get; }

        /// <summary>
        /// Variants and their splits.
        /// </summary>
        IEnumerable<IConsoleExperimentPhaseVariantView> Variants { get; }
    }

    /// <inheritdoc />
    internal class ConsoleExperimentPhaseView : IConsoleExperimentPhaseView
    {

        /// <inheritdoc />
        [DataMember(Name="admission_deadline_sec"), Preserve]
        public string AdmissionDeadlineSec { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleAudienceView> Audiences => _audiences ?? new List<ConsoleAudienceView>(0);
        [DataMember(Name="audiences"), Preserve]
        public List<ConsoleAudienceView> _audiences { get; set; }

        /// <inheritdoc />
        [DataMember(Name="description"), Preserve]
        public string Description { get; set; }

        /// <inheritdoc />
        [DataMember(Name="end_time_sec"), Preserve]
        public string EndTimeSec { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleMetricView> GoalMetrics => _goalMetrics ?? new List<ConsoleMetricView>(0);
        [DataMember(Name="goal_metrics"), Preserve]
        public List<ConsoleMetricView> _goalMetrics { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleAudienceView> Holdouts => _holdouts ?? new List<ConsoleAudienceView>(0);
        [DataMember(Name="holdouts"), Preserve]
        public List<ConsoleAudienceView> _holdouts { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="max_participants"), Preserve]
        public int MaxParticipants { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleMetricView> MonitorMetrics => _monitorMetrics ?? new List<ConsoleMetricView>(0);
        [DataMember(Name="monitor_metrics"), Preserve]
        public List<ConsoleMetricView> _monitorMetrics { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleSchemaView Schema => _schema;
        [DataMember(Name="schema"), Preserve]
        public ConsoleSchemaView _schema { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public ConsoleSplitKey SplitKey => _splitKey;
        [DataMember(Name="split_key"), Preserve]
        public ConsoleSplitKey _splitKey { get; set; }

        /// <inheritdoc />
        [DataMember(Name="start_time_sec"), Preserve]
        public string StartTimeSec { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public ConsoleExperimentPhaseStatus Status => _status;
        [DataMember(Name="status"), Preserve]
        public ConsoleExperimentPhaseStatus _status { get; set; }

        /// <inheritdoc />
        [DataMember(Name="stop_time_sec"), Preserve]
        public string StopTimeSec { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleExperimentPhaseVariantView> Variants => _variants ?? new List<ConsoleExperimentPhaseVariantView>(0);
        [DataMember(Name="variants"), Preserve]
        public List<ConsoleExperimentPhaseVariantView> _variants { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "AdmissionDeadlineSec: ", AdmissionDeadlineSec, ", ");
            output = string.Concat(output, "Audiences: [", string.Join(", ", Audiences), "], ");
            output = string.Concat(output, "Description: ", Description, ", ");
            output = string.Concat(output, "EndTimeSec: ", EndTimeSec, ", ");
            output = string.Concat(output, "GoalMetrics: [", string.Join(", ", GoalMetrics), "], ");
            output = string.Concat(output, "Holdouts: [", string.Join(", ", Holdouts), "], ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "MaxParticipants: ", MaxParticipants, ", ");
            output = string.Concat(output, "MonitorMetrics: [", string.Join(", ", MonitorMetrics), "], ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Schema: ", Schema, ", ");
            output = string.Concat(output, "SplitKey: ", SplitKey, ", ");
            output = string.Concat(output, "StartTimeSec: ", StartTimeSec, ", ");
            output = string.Concat(output, "Status: ", Status, ", ");
            output = string.Concat(output, "StopTimeSec: ", StopTimeSec, ", ");
            output = string.Concat(output, "Variants: [", string.Join(", ", Variants), "], ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public enum ConsoleExperimentStatus
    {
        /// <summary>
        ///  - UNKNOWN: Unknown.
        /// </summary>
        UNKNOWN = 0,
        /// <summary>
        ///  - WAITING: Waiting according to the schedule defined.
        /// </summary>
        WAITING = 1,
        /// <summary>
        ///  - RUNNING: Running as scheduled.
        /// </summary>
        RUNNING = 2,
        /// <summary>
        ///  - COMPLETED: Completed until scheduled end time.
        /// </summary>
        COMPLETED = 3,
        /// <summary>
        ///  - INTERRUPED: Interrupted by manual interaction.
        /// </summary>
        INTERRUPED = 4,
    }

    /// <summary>
    /// A single experiment variant.
    /// </summary>
    public interface IConsoleExperimentVariant
    {

        /// <summary>
        /// Create time.
        /// </summary>
        string CreateTimeSec { get; }

        /// <summary>
        /// Flag overrides.
        /// </summary>
        IEnumerable<IConsoleExperimentFlag> Flags { get; }

        /// <summary>
        /// Identifier.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// Name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Update time.
        /// </summary>
        string UpdateTimeSec { get; }

        /// <summary>
        /// Value.
        /// </summary>
        string Value { get; }
    }

    /// <inheritdoc />
    internal class ConsoleExperimentVariant : IConsoleExperimentVariant
    {

        /// <inheritdoc />
        [DataMember(Name="create_time_sec"), Preserve]
        public string CreateTimeSec { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleExperimentFlag> Flags => _flags ?? new List<ConsoleExperimentFlag>(0);
        [DataMember(Name="flags"), Preserve]
        public List<ConsoleExperimentFlag> _flags { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="update_time_sec"), Preserve]
        public string UpdateTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "CreateTimeSec: ", CreateTimeSec, ", ");
            output = string.Concat(output, "Flags: [", string.Join(", ", Flags), "], ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "UpdateTimeSec: ", UpdateTimeSec, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            return output;
        }
    }

    /// <summary>
    /// Request to create an experiment variant.
    /// </summary>
    public interface IConsoleExperimentVariantCreateRequest
    {

        /// <summary>
        /// Flag overrides.
        /// </summary>
        IEnumerable<IConsoleAssociateFlagRequest> Flags { get; }

        /// <summary>
        /// Variant name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Variant value.
        /// </summary>
        string Value { get; }
    }

    /// <inheritdoc />
    internal class ConsoleExperimentVariantCreateRequest : IConsoleExperimentVariantCreateRequest
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleAssociateFlagRequest> Flags => _flags ?? new List<ConsoleAssociateFlagRequest>(0);
        [DataMember(Name="flags"), Preserve]
        public List<ConsoleAssociateFlagRequest> _flags { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Flags: [", string.Join(", ", Flags), "], ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IConsoleExperimentVariantExport
    {

        /// <summary>
        /// Flag overrides.
        /// </summary>
        IEnumerable<IConsoleExperimentVariantFlagExport> Flags { get; }

        /// <summary>
        /// Identifier.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// Name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Value.
        /// </summary>
        string Value { get; }
    }

    /// <inheritdoc />
    internal class ConsoleExperimentVariantExport : IConsoleExperimentVariantExport
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleExperimentVariantFlagExport> Flags => _flags ?? new List<ConsoleExperimentVariantFlagExport>(0);
        [DataMember(Name="flags"), Preserve]
        public List<ConsoleExperimentVariantFlagExport> _flags { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Flags: [", string.Join(", ", Flags), "], ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IConsoleExperimentVariantFlagExport
    {

        /// <summary>
        /// Experimet Flag id.
        /// </summary>
        string ExperimentFlagId { get; }

        /// <summary>
        /// Flag id.
        /// </summary>
        string FlagId { get; }

        /// <summary>
        /// Flag value.
        /// </summary>
        string Value { get; }
    }

    /// <inheritdoc />
    internal class ConsoleExperimentVariantFlagExport : IConsoleExperimentVariantFlagExport
    {

        /// <inheritdoc />
        [DataMember(Name="experiment_flag_id"), Preserve]
        public string ExperimentFlagId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="flag_id"), Preserve]
        public string FlagId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "ExperimentFlagId: ", ExperimentFlagId, ", ");
            output = string.Concat(output, "FlagId: ", FlagId, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            return output;
        }
    }

    /// <summary>
    /// Request to create or update an experiment variant.
    /// </summary>
    public interface IConsoleExperimentVariantUpsertRequest
    {

        /// <summary>
        /// Flag overrides.
        /// </summary>
        IEnumerable<IConsoleAssociateFlagRequest> Flags { get; }

        /// <summary>
        /// Identifier.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// Variant name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Variant value.
        /// </summary>
        string Value { get; }
    }

    /// <inheritdoc />
    internal class ConsoleExperimentVariantUpsertRequest : IConsoleExperimentVariantUpsertRequest
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleAssociateFlagRequest> Flags => _flags ?? new List<ConsoleAssociateFlagRequest>(0);
        [DataMember(Name="flags"), Preserve]
        public List<ConsoleAssociateFlagRequest> _flags { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Flags: [", string.Join(", ", Flags), "], ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            return output;
        }
    }

    /// <summary>
    /// A list of experiments.
    /// </summary>
    public interface IConsoleExperiments
    {

        /// <summary>
        /// Experiments.
        /// </summary>
        IEnumerable<IConsoleExperiment> Experiments { get; }

        /// <summary>
        /// The pagination options, if there are more pages.
        /// </summary>
        IConsolePageOptions PageOptions { get; }
    }

    /// <inheritdoc />
    internal class ConsoleExperiments : IConsoleExperiments
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleExperiment> Experiments => _experiments ?? new List<ConsoleExperiment>(0);
        [DataMember(Name="experiments"), Preserve]
        public List<ConsoleExperiment> _experiments { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsolePageOptions PageOptions => _pageOptions;
        [DataMember(Name="page_options"), Preserve]
        public ConsolePageOptions _pageOptions { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Experiments: [", string.Join(", ", Experiments), "], ");
            output = string.Concat(output, "PageOptions: ", PageOptions, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IConsoleExternalDataExportRequest
    {

        /// <summary>
        /// Export configurations.
        /// </summary>
        IConsoleDataExportRequest DataSelect { get; }

        /// <summary>
        /// The server id.
        /// </summary>
        string Id { get; }
    }

    /// <inheritdoc />
    internal class ConsoleExternalDataExportRequest : IConsoleExternalDataExportRequest
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleDataExportRequest DataSelect => _dataSelect;
        [DataMember(Name="data_select"), Preserve]
        public ConsoleDataExportRequest _dataSelect { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "DataSelect: ", DataSelect, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IConsoleExternalDataExportTestConnectionRequest
    {

        /// <summary>
        /// The server key.
        /// </summary>
        string ServerKey { get; }

        /// <summary>
        /// The server url.
        /// </summary>
        string Url { get; }
    }

    /// <inheritdoc />
    internal class ConsoleExternalDataExportTestConnectionRequest : IConsoleExternalDataExportTestConnectionRequest
    {

        /// <inheritdoc />
        [DataMember(Name="server_key"), Preserve]
        public string ServerKey { get; set; }

        /// <inheritdoc />
        [DataMember(Name="url"), Preserve]
        public string Url { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "ServerKey: ", ServerKey, ", ");
            output = string.Concat(output, "Url: ", Url, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IConsoleExternalDataImportServer
    {

        /// <summary>
        /// Create time.
        /// </summary>
        string CreateTimeSec { get; }

        /// <summary>
        /// The server id.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// The server name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Update time.
        /// </summary>
        string UpdateTimeSec { get; }

        /// <summary>
        /// The Satori url.
        /// </summary>
        string Url { get; }
    }

    /// <inheritdoc />
    internal class ConsoleExternalDataImportServer : IConsoleExternalDataImportServer
    {

        /// <inheritdoc />
        [DataMember(Name="create_time_sec"), Preserve]
        public string CreateTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="update_time_sec"), Preserve]
        public string UpdateTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="url"), Preserve]
        public string Url { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "CreateTimeSec: ", CreateTimeSec, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "UpdateTimeSec: ", UpdateTimeSec, ", ");
            output = string.Concat(output, "Url: ", Url, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IConsoleExternalDataImportServerCreateRequest
    {

        /// <summary>
        /// The server name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// The target Satori instance server key.
        /// </summary>
        string ServerKey { get; }

        /// <summary>
        /// The Satori url.
        /// </summary>
        string Url { get; }
    }

    /// <inheritdoc />
    internal class ConsoleExternalDataImportServerCreateRequest : IConsoleExternalDataImportServerCreateRequest
    {

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="server_key"), Preserve]
        public string ServerKey { get; set; }

        /// <inheritdoc />
        [DataMember(Name="url"), Preserve]
        public string Url { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "ServerKey: ", ServerKey, ", ");
            output = string.Concat(output, "Url: ", Url, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IConsoleExternalDataImportServers
    {

        /// <summary>
        /// The list of servers.
        /// </summary>
        IEnumerable<IConsoleExternalDataImportServer> Servers { get; }
    }

    /// <inheritdoc />
    internal class ConsoleExternalDataImportServers : IConsoleExternalDataImportServers
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleExternalDataImportServer> Servers => _servers ?? new List<ConsoleExternalDataImportServer>(0);
        [DataMember(Name="servers"), Preserve]
        public List<ConsoleExternalDataImportServer> _servers { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Servers: [", string.Join(", ", Servers), "], ");
            return output;
        }
    }

    /// <summary>
    /// The configuration necessary to integrate with Facebook App-To-User Notifications.
    /// </summary>
    public interface IConsoleFacebookNotificationConfiguration
    {

        /// <summary>
        /// 
        /// </summary>
        string AppId { get; }

        /// <summary>
        /// 
        /// </summary>
        string AppSecret { get; }
    }

    /// <inheritdoc />
    internal class ConsoleFacebookNotificationConfiguration : IConsoleFacebookNotificationConfiguration
    {

        /// <inheritdoc />
        [DataMember(Name="app_id"), Preserve]
        public string AppId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="app_secret"), Preserve]
        public string AppSecret { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "AppId: ", AppId, ", ");
            output = string.Concat(output, "AppSecret: ", AppSecret, ", ");
            return output;
        }
    }

    /// <summary>
    /// The configuration necessary to integrate with Google's Firebase Cloud Messaging.
    /// </summary>
    public interface IConsoleFirebaseMessagingConfiguration
    {

        /// <summary>
        /// 
        /// </summary>
        string Credentials { get; }

        /// <summary>
        /// 
        /// </summary>
        string ProjectId { get; }
    }

    /// <inheritdoc />
    internal class ConsoleFirebaseMessagingConfiguration : IConsoleFirebaseMessagingConfiguration
    {

        /// <inheritdoc />
        [DataMember(Name="credentials"), Preserve]
        public string Credentials { get; set; }

        /// <inheritdoc />
        [DataMember(Name="project_id"), Preserve]
        public string ProjectId { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Credentials: ", Credentials, ", ");
            output = string.Concat(output, "ProjectId: ", ProjectId, ", ");
            return output;
        }
    }

    /// <summary>
    /// A export of a Feature Flag.
    /// </summary>
    public interface IConsoleFlagExport
    {

        /// <summary>
        /// Category labels.
        /// </summary>
        List<string> CategoryIds { get; }

        /// <summary>
        /// Core.
        /// </summary>
        bool Core { get; }

        /// <summary>
        /// Optional description.
        /// </summary>
        string Description { get; }

        /// <summary>
        /// Identifier.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// Name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Schema identifier.
        /// </summary>
        string SchemaId { get; }

        /// <summary>
        /// Value.
        /// </summary>
        string Value { get; }

        /// <summary>
        /// Variants.
        /// </summary>
        IEnumerable<IConsoleFlagVariantExport> Variants { get; }
    }

    /// <inheritdoc />
    internal class ConsoleFlagExport : IConsoleFlagExport
    {

        /// <inheritdoc />
        [DataMember(Name="category_ids"), Preserve]
        public List<string> CategoryIds { get; set; }

        /// <inheritdoc />
        [DataMember(Name="core"), Preserve]
        public bool Core { get; set; }

        /// <inheritdoc />
        [DataMember(Name="description"), Preserve]
        public string Description { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="schema_id"), Preserve]
        public string SchemaId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleFlagVariantExport> Variants => _variants ?? new List<ConsoleFlagVariantExport>(0);
        [DataMember(Name="variants"), Preserve]
        public List<ConsoleFlagVariantExport> _variants { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "CategoryIds: [", string.Join(", ", CategoryIds), "], ");
            output = string.Concat(output, "Core: ", Core, ", ");
            output = string.Concat(output, "Description: ", Description, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "SchemaId: ", SchemaId, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            output = string.Concat(output, "Variants: [", string.Join(", ", Variants), "], ");
            return output;
        }
    }

    /// <summary>
    /// The search options available for the List endpoint.
    /// </summary>
    public interface IConsoleFlagListRequestSearchOptions
    {

        /// <summary>
        /// Filter by Label name.
        /// </summary>
        IConsoleMultiTextValueFilterOption LabelName { get; }

        /// <summary>
        /// Filter by Name.
        /// </summary>
        IConsoleSingleTextValueFilterOption Name { get; }
    }

    /// <inheritdoc />
    internal class ConsoleFlagListRequestSearchOptions : IConsoleFlagListRequestSearchOptions
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleMultiTextValueFilterOption LabelName => _labelName;
        [DataMember(Name="label_name"), Preserve]
        public ConsoleMultiTextValueFilterOption _labelName { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleSingleTextValueFilterOption Name => _name;
        [DataMember(Name="name"), Preserve]
        public ConsoleSingleTextValueFilterOption _name { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "LabelName: ", LabelName, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            return output;
        }
    }

    /// <summary>
    /// A single flag variant.
    /// </summary>
    public interface IConsoleFlagVariant
    {

        /// <summary>
        /// Audiences.
        /// </summary>
        IEnumerable<IConsoleAudienceView> Audiences { get; }

        /// <summary>
        /// Create time.
        /// </summary>
        string CreateTimeSec { get; }

        /// <summary>
        /// Identifier of flag.
        /// </summary>
        string FlagId { get; }

        /// <summary>
        /// Identifier of the flag variant.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// Name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Position.
        /// </summary>
        int Position { get; }

        /// <summary>
        /// Update time.
        /// </summary>
        string UpdateTimeSec { get; }

        /// <summary>
        /// Value.
        /// </summary>
        string Value { get; }
    }

    /// <inheritdoc />
    internal class ConsoleFlagVariant : IConsoleFlagVariant
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleAudienceView> Audiences => _audiences ?? new List<ConsoleAudienceView>(0);
        [DataMember(Name="audiences"), Preserve]
        public List<ConsoleAudienceView> _audiences { get; set; }

        /// <inheritdoc />
        [DataMember(Name="create_time_sec"), Preserve]
        public string CreateTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="flag_id"), Preserve]
        public string FlagId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="position"), Preserve]
        public int Position { get; set; }

        /// <inheritdoc />
        [DataMember(Name="update_time_sec"), Preserve]
        public string UpdateTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Audiences: [", string.Join(", ", Audiences), "], ");
            output = string.Concat(output, "CreateTimeSec: ", CreateTimeSec, ", ");
            output = string.Concat(output, "FlagId: ", FlagId, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Position: ", Position, ", ");
            output = string.Concat(output, "UpdateTimeSec: ", UpdateTimeSec, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            return output;
        }
    }

    /// <summary>
    /// A export of a variant of a Feature Flag.
    /// </summary>
    public interface IConsoleFlagVariantExport
    {

        /// <summary>
        /// Audiences.
        /// </summary>
        IEnumerable<IConsoleAudienceView> Audiences { get; }

        /// <summary>
        /// Identifier of flag.
        /// </summary>
        string FlagId { get; }

        /// <summary>
        /// Identifier of the flag variant.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// Name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Position.
        /// </summary>
        int Position { get; }

        /// <summary>
        /// Value.
        /// </summary>
        string Value { get; }
    }

    /// <inheritdoc />
    internal class ConsoleFlagVariantExport : IConsoleFlagVariantExport
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleAudienceView> Audiences => _audiences ?? new List<ConsoleAudienceView>(0);
        [DataMember(Name="audiences"), Preserve]
        public List<ConsoleAudienceView> _audiences { get; set; }

        /// <inheritdoc />
        [DataMember(Name="flag_id"), Preserve]
        public string FlagId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="position"), Preserve]
        public int Position { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Audiences: [", string.Join(", ", Audiences), "], ");
            output = string.Concat(output, "FlagId: ", FlagId, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Position: ", Position, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IConsoleFlagVariantView
    {

        /// <summary>
        /// Identifier of the flag variant.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// Name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Position.
        /// </summary>
        int Position { get; }
    }

    /// <inheritdoc />
    internal class ConsoleFlagVariantView : IConsoleFlagVariantView
    {

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="position"), Preserve]
        public int Position { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Position: ", Position, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IConsoleFlagView
    {

        /// <summary>
        /// Category labels.
        /// </summary>
        IEnumerable<IConsoleCategoryView> Categories { get; }

        /// <summary>
        /// Core.
        /// </summary>
        bool Core { get; }

        /// <summary>
        /// Create time.
        /// </summary>
        string CreateTimeSec { get; }

        /// <summary>
        /// Optional description.
        /// </summary>
        string Description { get; }

        /// <summary>
        /// Identifier.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// Name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Schema identifier.
        /// </summary>
        string SchemaId { get; }

        /// <summary>
        /// Update time.
        /// </summary>
        string UpdateTimeSec { get; }

        /// <summary>
        /// Variants.
        /// </summary>
        IEnumerable<IConsoleFlagVariantView> Variants { get; }
    }

    /// <inheritdoc />
    internal class ConsoleFlagView : IConsoleFlagView
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleCategoryView> Categories => _categories ?? new List<ConsoleCategoryView>(0);
        [DataMember(Name="categories"), Preserve]
        public List<ConsoleCategoryView> _categories { get; set; }

        /// <inheritdoc />
        [DataMember(Name="core"), Preserve]
        public bool Core { get; set; }

        /// <inheritdoc />
        [DataMember(Name="create_time_sec"), Preserve]
        public string CreateTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="description"), Preserve]
        public string Description { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="schema_id"), Preserve]
        public string SchemaId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="update_time_sec"), Preserve]
        public string UpdateTimeSec { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleFlagVariantView> Variants => _variants ?? new List<ConsoleFlagVariantView>(0);
        [DataMember(Name="variants"), Preserve]
        public List<ConsoleFlagVariantView> _variants { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Categories: [", string.Join(", ", Categories), "], ");
            output = string.Concat(output, "Core: ", Core, ", ");
            output = string.Concat(output, "CreateTimeSec: ", CreateTimeSec, ", ");
            output = string.Concat(output, "Description: ", Description, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "SchemaId: ", SchemaId, ", ");
            output = string.Concat(output, "UpdateTimeSec: ", UpdateTimeSec, ", ");
            output = string.Concat(output, "Variants: [", string.Join(", ", Variants), "], ");
            return output;
        }
    }

    /// <summary>
    /// A list of flags.
    /// </summary>
    public interface IConsoleFlags
    {

        /// <summary>
        /// Flags.
        /// </summary>
        IEnumerable<IConsoleFlagView> Flags { get; }

        /// <summary>
        /// The pagination options, if there are more pages.
        /// </summary>
        IConsolePageOptions PageOptions { get; }
    }

    /// <inheritdoc />
    internal class ConsoleFlags : IConsoleFlags
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleFlagView> Flags => _flags ?? new List<ConsoleFlagView>(0);
        [DataMember(Name="flags"), Preserve]
        public List<ConsoleFlagView> _flags { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsolePageOptions PageOptions => _pageOptions;
        [DataMember(Name="page_options"), Preserve]
        public ConsolePageOptions _pageOptions { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Flags: [", string.Join(", ", Flags), "], ");
            output = string.Concat(output, "PageOptions: ", PageOptions, ", ");
            return output;
        }
    }

    /// <summary>
    /// A single identity.
    /// </summary>
    public interface IConsoleIdentity
    {

        /// <summary>
        /// Create time.
        /// </summary>
        string CreateTime { get; }

        /// <summary>
        /// Identifier.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// Properties.
        /// </summary>
        IConsoleProperties Properties { get; }

        /// <summary>
        /// Update time.
        /// </summary>
        string UpdateTime { get; }
    }

    /// <inheritdoc />
    internal class ConsoleIdentity : IConsoleIdentity
    {

        /// <inheritdoc />
        [DataMember(Name="create_time"), Preserve]
        public string CreateTime { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleProperties Properties => _properties;
        [DataMember(Name="properties"), Preserve]
        public ConsoleProperties _properties { get; set; }

        /// <inheritdoc />
        [DataMember(Name="update_time"), Preserve]
        public string UpdateTime { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "CreateTime: ", CreateTime, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Properties: ", Properties, ", ");
            output = string.Concat(output, "UpdateTime: ", UpdateTime, ", ");
            return output;
        }
    }

    /// <summary>
    /// A single identity audience short record.
    /// </summary>
    public interface IConsoleIdentityAudience
    {

        /// <summary>
        /// Time when the audience was added to this identity.
        /// </summary>
        string CreateTimeSec { get; }

        /// <summary>
        /// Audience identifier.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// Audience name.
        /// </summary>
        string Name { get; }
    }

    /// <inheritdoc />
    internal class ConsoleIdentityAudience : IConsoleIdentityAudience
    {

        /// <inheritdoc />
        [DataMember(Name="create_time_sec"), Preserve]
        public string CreateTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "CreateTimeSec: ", CreateTimeSec, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            return output;
        }
    }

    /// <summary>
    /// A list of audiences that this identity is member of.
    /// </summary>
    public interface IConsoleIdentityAudiences
    {

        /// <summary>
        /// Audiences.
        /// </summary>
        IEnumerable<IConsoleIdentityAudience> Audiences { get; }
    }

    /// <inheritdoc />
    internal class ConsoleIdentityAudiences : IConsoleIdentityAudiences
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleIdentityAudience> Audiences => _audiences ?? new List<ConsoleIdentityAudience>(0);
        [DataMember(Name="audiences"), Preserve]
        public List<ConsoleIdentityAudience> _audiences { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Audiences: [", string.Join(", ", Audiences), "], ");
            return output;
        }
    }

    /// <summary>
    /// An individual event.
    /// </summary>
    public interface IConsoleIdentityEvent
    {

        /// <summary>
        /// Client time.
        /// </summary>
        string ClientTimeSec { get; }

        /// <summary>
        /// Event identifier.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// Event metadata.
        /// </summary>
        IDictionary<string, string> Metadata { get; }

        /// <summary>
        /// Event name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Receive time.
        /// </summary>
        string ReceiveTimeSec { get; }

        /// <summary>
        /// The session identifier from which the event was generated.
        /// </summary>
        string SessionId { get; }

        /// <summary>
        /// Source, if set.
        /// </summary>
        string Source { get; }

        /// <summary>
        /// Value, if any.
        /// </summary>
        string Value { get; }
    }

    /// <inheritdoc />
    internal class ConsoleIdentityEvent : IConsoleIdentityEvent
    {

        /// <inheritdoc />
        [DataMember(Name="client_time_sec"), Preserve]
        public string ClientTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IDictionary<string, string> Metadata => _metadata ?? new Dictionary<string, string>();
        [DataMember(Name="metadata"), Preserve]
        public Dictionary<string, string> _metadata { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="receive_time_sec"), Preserve]
        public string ReceiveTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="session_id"), Preserve]
        public string SessionId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="source"), Preserve]
        public string Source { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "ClientTimeSec: ", ClientTimeSec, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");

            var metadataString = "";
            foreach (var kvp in Metadata)
            {
                metadataString = string.Concat(metadataString, "{" + kvp.Key + "=" + kvp.Value + "}");
            }
            output = string.Concat(output, "Metadata: [" + metadataString + "]");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "ReceiveTimeSec: ", ReceiveTimeSec, ", ");
            output = string.Concat(output, "SessionId: ", SessionId, ", ");
            output = string.Concat(output, "Source: ", Source, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            return output;
        }
    }

    /// <summary>
    /// A list of events for an identity.
    /// </summary>
    public interface IConsoleIdentityEvents
    {

        /// <summary>
        /// Cursor, if there are next pages.
        /// </summary>
        string CursorNext { get; }

        /// <summary>
        /// Cursor, if there are prev pages.
        /// </summary>
        string CursorPrev { get; }

        /// <summary>
        /// Events.
        /// </summary>
        IEnumerable<IConsoleIdentityEvent> Events { get; }
    }

    /// <inheritdoc />
    internal class ConsoleIdentityEvents : IConsoleIdentityEvents
    {

        /// <inheritdoc />
        [DataMember(Name="cursor_next"), Preserve]
        public string CursorNext { get; set; }

        /// <inheritdoc />
        [DataMember(Name="cursor_prev"), Preserve]
        public string CursorPrev { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleIdentityEvent> Events => _events ?? new List<ConsoleIdentityEvent>(0);
        [DataMember(Name="events"), Preserve]
        public List<ConsoleIdentityEvent> _events { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "CursorNext: ", CursorNext, ", ");
            output = string.Concat(output, "CursorPrev: ", CursorPrev, ", ");
            output = string.Concat(output, "Events: [", string.Join(", ", Events), "], ");
            return output;
        }
    }

    /// <summary>
    /// An individual running experiment.
    /// </summary>
    public interface IConsoleIdentityExperiment
    {

        /// <summary>
        /// Audience that tied this identity to the experiment.
        /// </summary>
        string AudienceId { get; }

        /// <summary>
        /// Audience name that tied this identity to the experiment.
        /// </summary>
        string AudienceName { get; }

        /// <summary>
        /// Category labels.
        /// </summary>
        IEnumerable<IConsoleCategoryView> Categories { get; }

        /// <summary>
        /// Time this identity joined the experiment phase.
        /// </summary>
        string CreateTimeSec { get; }

        /// <summary>
        /// End time for this experiment phase.
        /// </summary>
        string EndTimeSec { get; }

        /// <summary>
        /// Experiment identifier.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// Experiment name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Experiment phase identifier.
        /// </summary>
        string PhaseId { get; }

        /// <summary>
        /// Experiment phase name.
        /// </summary>
        string PhaseName { get; }

        /// <summary>
        /// The participation status of the identity.
        /// </summary>
        ConsoleIdentityExperimentStatus Status { get; }

        /// <summary>
        /// Experiment value for this identity.
        /// </summary>
        string Value { get; }

        /// <summary>
        /// Experiment variant name for this identity.
        /// </summary>
        string VariantName { get; }
    }

    /// <inheritdoc />
    internal class ConsoleIdentityExperiment : IConsoleIdentityExperiment
    {

        /// <inheritdoc />
        [DataMember(Name="audience_id"), Preserve]
        public string AudienceId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="audience_name"), Preserve]
        public string AudienceName { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleCategoryView> Categories => _categories ?? new List<ConsoleCategoryView>(0);
        [DataMember(Name="categories"), Preserve]
        public List<ConsoleCategoryView> _categories { get; set; }

        /// <inheritdoc />
        [DataMember(Name="create_time_sec"), Preserve]
        public string CreateTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="end_time_sec"), Preserve]
        public string EndTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="phase_id"), Preserve]
        public string PhaseId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="phase_name"), Preserve]
        public string PhaseName { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public ConsoleIdentityExperimentStatus Status => _status;
        [DataMember(Name="status"), Preserve]
        public ConsoleIdentityExperimentStatus _status { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        /// <inheritdoc />
        [DataMember(Name="variant_name"), Preserve]
        public string VariantName { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "AudienceId: ", AudienceId, ", ");
            output = string.Concat(output, "AudienceName: ", AudienceName, ", ");
            output = string.Concat(output, "Categories: [", string.Join(", ", Categories), "], ");
            output = string.Concat(output, "CreateTimeSec: ", CreateTimeSec, ", ");
            output = string.Concat(output, "EndTimeSec: ", EndTimeSec, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "PhaseId: ", PhaseId, ", ");
            output = string.Concat(output, "PhaseName: ", PhaseName, ", ");
            output = string.Concat(output, "Status: ", Status, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            output = string.Concat(output, "VariantName: ", VariantName, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public enum ConsoleIdentityExperimentStatus
    {
        /// <summary>
        /// 
        /// </summary>
        UNKNOWN = 0,
        /// <summary>
        /// 
        /// </summary>
        ELIGIBLE = 1,
        /// <summary>
        /// 
        /// </summary>
        PARTICIPANT = 2,
    }

    /// <summary>
    /// A list of running experiments for an identity.
    /// </summary>
    public interface IConsoleIdentityExperiments
    {

        /// <summary>
        /// 
        /// </summary>
        IEnumerable<IConsoleIdentityExperiment> Experiments { get; }
    }

    /// <inheritdoc />
    internal class ConsoleIdentityExperiments : IConsoleIdentityExperiments
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleIdentityExperiment> Experiments => _experiments ?? new List<ConsoleIdentityExperiment>(0);
        [DataMember(Name="experiments"), Preserve]
        public List<ConsoleIdentityExperiment> _experiments { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Experiments: [", string.Join(", ", Experiments), "], ");
            return output;
        }
    }

    /// <summary>
    /// A feature flag for an identity.
    /// </summary>
    public interface IConsoleIdentityFlag
    {

        /// <summary>
        /// Whether this flag is an override and its source has been assigned.
        /// </summary>
        bool Assigned { get; }

        /// <summary>
        /// Audience identifier, if exists.
        /// </summary>
        string AudienceId { get; }

        /// <summary>
        /// Audience name, if exists.
        /// </summary>
        string AudienceName { get; }

        /// <summary>
        /// Category labels.
        /// </summary>
        IEnumerable<IConsoleCategoryView> Categories { get; }

        /// <summary>
        /// Flag identifier.
        /// </summary>
        string FlagId { get; }

        /// <summary>
        /// Flag name.
        /// </summary>
        string FlagName { get; }

        /// <summary>
        /// Feature id.
        /// </summary>
        string OverriderId { get; }

        /// <summary>
        /// Feature name.
        /// </summary>
        string OverriderName { get; }

        /// <summary>
        /// Feature that overrides this flag.
        /// </summary>
        string OverriderSource { get; }

        /// <summary>
        /// Additional flag overrides.
        /// </summary>
        IEnumerable<IConsoleIdentityFlag> Overrides { get; }

        /// <summary>
        /// Flag value.
        /// </summary>
        string Value { get; }
    }

    /// <inheritdoc />
    internal class ConsoleIdentityFlag : IConsoleIdentityFlag
    {

        /// <inheritdoc />
        [DataMember(Name="assigned"), Preserve]
        public bool Assigned { get; set; }

        /// <inheritdoc />
        [DataMember(Name="audience_id"), Preserve]
        public string AudienceId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="audience_name"), Preserve]
        public string AudienceName { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleCategoryView> Categories => _categories ?? new List<ConsoleCategoryView>(0);
        [DataMember(Name="categories"), Preserve]
        public List<ConsoleCategoryView> _categories { get; set; }

        /// <inheritdoc />
        [DataMember(Name="flag_id"), Preserve]
        public string FlagId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="flag_name"), Preserve]
        public string FlagName { get; set; }

        /// <inheritdoc />
        [DataMember(Name="overrider_id"), Preserve]
        public string OverriderId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="overrider_name"), Preserve]
        public string OverriderName { get; set; }

        /// <inheritdoc />
        [DataMember(Name="overrider_source"), Preserve]
        public string OverriderSource { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleIdentityFlag> Overrides => _overrides ?? new List<ConsoleIdentityFlag>(0);
        [DataMember(Name="overrides"), Preserve]
        public List<ConsoleIdentityFlag> _overrides { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Assigned: ", Assigned, ", ");
            output = string.Concat(output, "AudienceId: ", AudienceId, ", ");
            output = string.Concat(output, "AudienceName: ", AudienceName, ", ");
            output = string.Concat(output, "Categories: [", string.Join(", ", Categories), "], ");
            output = string.Concat(output, "FlagId: ", FlagId, ", ");
            output = string.Concat(output, "FlagName: ", FlagName, ", ");
            output = string.Concat(output, "OverriderId: ", OverriderId, ", ");
            output = string.Concat(output, "OverriderName: ", OverriderName, ", ");
            output = string.Concat(output, "OverriderSource: ", OverriderSource, ", ");
            output = string.Concat(output, "Overrides: [", string.Join(", ", Overrides), "], ");
            output = string.Concat(output, "Value: ", Value, ", ");
            return output;
        }
    }

    /// <summary>
    /// A list of identity feature flags.
    /// </summary>
    public interface IConsoleIdentityFlags
    {

        /// <summary>
        /// Identity flags.
        /// </summary>
        IEnumerable<IConsoleIdentityFlag> Flags { get; }
    }

    /// <inheritdoc />
    internal class ConsoleIdentityFlags : IConsoleIdentityFlags
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleIdentityFlag> Flags => _flags ?? new List<ConsoleIdentityFlag>(0);
        [DataMember(Name="flags"), Preserve]
        public List<ConsoleIdentityFlag> _flags { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Flags: [", string.Join(", ", Flags), "], ");
            return output;
        }
    }

    /// <summary>
    /// An individual active live event.
    /// </summary>
    public interface IConsoleIdentityLiveEvent
    {

        /// <summary>
        /// Audience identifier.
        /// </summary>
        string AudienceId { get; }

        /// <summary>
        /// Audience name.
        /// </summary>
        string AudienceName { get; }

        /// <summary>
        /// Category labels.
        /// </summary>
        IEnumerable<IConsoleCategoryView> Categories { get; }

        /// <summary>
        /// Live event identifier.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// Live event name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// The current phase end time.
        /// </summary>
        string RunEndTimeSec { get; }

        /// <summary>
        /// The current phase start time.
        /// </summary>
        string RunStartTimeSec { get; }

        /// <summary>
        /// Participation status of the identity.
        /// </summary>
        ConsoleIdentityLiveEventStatus Status { get; }

        /// <summary>
        /// Value.
        /// </summary>
        string Value { get; }
    }

    /// <inheritdoc />
    internal class ConsoleIdentityLiveEvent : IConsoleIdentityLiveEvent
    {

        /// <inheritdoc />
        [DataMember(Name="audience_id"), Preserve]
        public string AudienceId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="audience_name"), Preserve]
        public string AudienceName { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleCategoryView> Categories => _categories ?? new List<ConsoleCategoryView>(0);
        [DataMember(Name="categories"), Preserve]
        public List<ConsoleCategoryView> _categories { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="run_end_time_sec"), Preserve]
        public string RunEndTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="run_start_time_sec"), Preserve]
        public string RunStartTimeSec { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public ConsoleIdentityLiveEventStatus Status => _status;
        [DataMember(Name="status"), Preserve]
        public ConsoleIdentityLiveEventStatus _status { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "AudienceId: ", AudienceId, ", ");
            output = string.Concat(output, "AudienceName: ", AudienceName, ", ");
            output = string.Concat(output, "Categories: [", string.Join(", ", Categories), "], ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "RunEndTimeSec: ", RunEndTimeSec, ", ");
            output = string.Concat(output, "RunStartTimeSec: ", RunStartTimeSec, ", ");
            output = string.Concat(output, "Status: ", Status, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public enum ConsoleIdentityLiveEventStatus
    {
        /// <summary>
        /// 
        /// </summary>
        UNKNOWN = 0,
        /// <summary>
        /// 
        /// </summary>
        ELIGIBLE = 1,
        /// <summary>
        /// 
        /// </summary>
        PARTICIPANT = 2,
    }

    /// <summary>
    /// A list of active live events for an identity.
    /// </summary>
    public interface IConsoleIdentityLiveEvents
    {

        /// <summary>
        /// Identity live events.
        /// </summary>
        IEnumerable<IConsoleIdentityLiveEvent> LiveEvents { get; }
    }

    /// <inheritdoc />
    internal class ConsoleIdentityLiveEvents : IConsoleIdentityLiveEvents
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleIdentityLiveEvent> LiveEvents => _liveEvents ?? new List<ConsoleIdentityLiveEvent>(0);
        [DataMember(Name="live_events"), Preserve]
        public List<ConsoleIdentityLiveEvent> _liveEvents { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "LiveEvents: [", string.Join(", ", LiveEvents), "], ");
            return output;
        }
    }

    /// <summary>
    /// A scheduled message.
    /// </summary>
    public interface IConsoleIdentityMessage
    {

        /// <summary>
        /// Category labels.
        /// </summary>
        IEnumerable<IConsoleCategoryView> Categories { get; }

        /// <summary>
        /// The time the message was consumed by the identity.
        /// </summary>
        string ConsumeTime { get; }

        /// <summary>
        /// The time the message was created.
        /// </summary>
        string CreateTime { get; }

        /// <summary>
        /// The message's image url.
        /// </summary>
        string ImageUrl { get; }

        /// <summary>
        /// Status of integrations deliveries.
        /// </summary>
        IDictionary<string, IIdentityMessageIntegrationStatus> IntegrationsStatus { get; }

        /// <summary>
        /// A key-value pairs of metadata.
        /// </summary>
        IDictionary<string, string> Metadata { get; }

        /// <summary>
        /// The time the message was read by the client.
        /// </summary>
        string ReadTime { get; }

        /// <summary>
        /// The schedule data.
        /// </summary>
        IConsoleScheduleView Schedule { get; }

        /// <summary>
        /// The send time for the message.
        /// </summary>
        string SendTime { get; }

        /// <summary>
        /// The message's text.
        /// </summary>
        string Text { get; }

        /// <summary>
        /// The message's title.
        /// </summary>
        string Title { get; }

        /// <summary>
        /// The time the message was updated.
        /// </summary>
        string UpdateTime { get; }
    }

    /// <inheritdoc />
    internal class ConsoleIdentityMessage : IConsoleIdentityMessage
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleCategoryView> Categories => _categories ?? new List<ConsoleCategoryView>(0);
        [DataMember(Name="categories"), Preserve]
        public List<ConsoleCategoryView> _categories { get; set; }

        /// <inheritdoc />
        [DataMember(Name="consume_time"), Preserve]
        public string ConsumeTime { get; set; }

        /// <inheritdoc />
        [DataMember(Name="create_time"), Preserve]
        public string CreateTime { get; set; }

        /// <inheritdoc />
        [DataMember(Name="image_url"), Preserve]
        public string ImageUrl { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IDictionary<string, IIdentityMessageIntegrationStatus> IntegrationsStatus  => _integrationsStatus ?? new Dictionary<string, IIdentityMessageIntegrationStatus>();
        [DataMember(Name="integrations_status"), Preserve]
        public Dictionary<string, IIdentityMessageIntegrationStatus> _integrationsStatus { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IDictionary<string, string> Metadata => _metadata ?? new Dictionary<string, string>();
        [DataMember(Name="metadata"), Preserve]
        public Dictionary<string, string> _metadata { get; set; }

        /// <inheritdoc />
        [DataMember(Name="read_time"), Preserve]
        public string ReadTime { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleScheduleView Schedule => _schedule;
        [DataMember(Name="schedule"), Preserve]
        public ConsoleScheduleView _schedule { get; set; }

        /// <inheritdoc />
        [DataMember(Name="send_time"), Preserve]
        public string SendTime { get; set; }

        /// <inheritdoc />
        [DataMember(Name="text"), Preserve]
        public string Text { get; set; }

        /// <inheritdoc />
        [DataMember(Name="title"), Preserve]
        public string Title { get; set; }

        /// <inheritdoc />
        [DataMember(Name="update_time"), Preserve]
        public string UpdateTime { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Categories: [", string.Join(", ", Categories), "], ");
            output = string.Concat(output, "ConsumeTime: ", ConsumeTime, ", ");
            output = string.Concat(output, "CreateTime: ", CreateTime, ", ");
            output = string.Concat(output, "ImageUrl: ", ImageUrl, ", ");

            var integrationsStatusString = "";
            foreach (var kvp in IntegrationsStatus)
            {
                integrationsStatusString = string.Concat(integrationsStatusString, "{" + kvp.Key + "=" + kvp.Value + "}");
            }
            output = string.Concat(output, "IntegrationsStatus: [" + integrationsStatusString + "]");

            var metadataString = "";
            foreach (var kvp in Metadata)
            {
                metadataString = string.Concat(metadataString, "{" + kvp.Key + "=" + kvp.Value + "}");
            }
            output = string.Concat(output, "Metadata: [" + metadataString + "]");
            output = string.Concat(output, "ReadTime: ", ReadTime, ", ");
            output = string.Concat(output, "Schedule: ", Schedule, ", ");
            output = string.Concat(output, "SendTime: ", SendTime, ", ");
            output = string.Concat(output, "Text: ", Text, ", ");
            output = string.Concat(output, "Title: ", Title, ", ");
            output = string.Concat(output, "UpdateTime: ", UpdateTime, ", ");
            return output;
        }
    }

    /// <summary>
    /// A list of messages for an identity.
    /// </summary>
    public interface IConsoleIdentityMessages
    {

        /// <summary>
        /// The identity messages.
        /// </summary>
        IEnumerable<IConsoleIdentityMessage> Messages { get; }

        /// <summary>
        /// Cursor, if there are next pages.
        /// </summary>
        string NextCursor { get; }

        /// <summary>
        /// Cursor, if there are prev pages.
        /// </summary>
        string PrevCursor { get; }
    }

    /// <inheritdoc />
    internal class ConsoleIdentityMessages : IConsoleIdentityMessages
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleIdentityMessage> Messages => _messages ?? new List<ConsoleIdentityMessage>(0);
        [DataMember(Name="messages"), Preserve]
        public List<ConsoleIdentityMessage> _messages { get; set; }

        /// <inheritdoc />
        [DataMember(Name="next_cursor"), Preserve]
        public string NextCursor { get; set; }

        /// <inheritdoc />
        [DataMember(Name="prev_cursor"), Preserve]
        public string PrevCursor { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Messages: [", string.Join(", ", Messages), "], ");
            output = string.Concat(output, "NextCursor: ", NextCursor, ", ");
            output = string.Concat(output, "PrevCursor: ", PrevCursor, ", ");
            return output;
        }
    }

    /// <summary>
    /// A schema value.
    /// </summary>
    public interface IConsoleInferredSchema
    {

        /// <summary>
        /// Inferred schema.
        /// </summary>
        string Value { get; }
    }

    /// <inheritdoc />
    internal class ConsoleInferredSchema : IConsoleInferredSchema
    {

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Value: ", Value, ", ");
            return output;
        }
    }

    /// <summary>
    /// The available filters for the InsightMetricsFiltersGet RPC.
    /// </summary>
    public interface IConsoleInsightMetricsFilters
    {

        /// <summary>
        /// The list of activities.
        /// </summary>
        IEnumerable<IConsoleInsightMetricsFiltersActivity> Activities { get; }

        /// <summary>
        /// The list of countries.
        /// </summary>
        IEnumerable<IConsoleInsightMetricsFiltersBasicFilter> Countries { get; }

        /// <summary>
        /// The list of platforms.
        /// </summary>
        IEnumerable<IConsoleInsightMetricsFiltersBasicFilter> GamePlatform { get; }

        /// <summary>
        /// The list of game versions.
        /// </summary>
        IEnumerable<IConsoleInsightMetricsFiltersBasicFilter> GameVersions { get; }
    }

    /// <inheritdoc />
    internal class ConsoleInsightMetricsFilters : IConsoleInsightMetricsFilters
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleInsightMetricsFiltersActivity> Activities => _activities ?? new List<ConsoleInsightMetricsFiltersActivity>(0);
        [DataMember(Name="activities"), Preserve]
        public List<ConsoleInsightMetricsFiltersActivity> _activities { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleInsightMetricsFiltersBasicFilter> Countries => _countries ?? new List<ConsoleInsightMetricsFiltersBasicFilter>(0);
        [DataMember(Name="countries"), Preserve]
        public List<ConsoleInsightMetricsFiltersBasicFilter> _countries { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleInsightMetricsFiltersBasicFilter> GamePlatform => _gamePlatform ?? new List<ConsoleInsightMetricsFiltersBasicFilter>(0);
        [DataMember(Name="game_platform"), Preserve]
        public List<ConsoleInsightMetricsFiltersBasicFilter> _gamePlatform { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleInsightMetricsFiltersBasicFilter> GameVersions => _gameVersions ?? new List<ConsoleInsightMetricsFiltersBasicFilter>(0);
        [DataMember(Name="game_versions"), Preserve]
        public List<ConsoleInsightMetricsFiltersBasicFilter> _gameVersions { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Activities: [", string.Join(", ", Activities), "], ");
            output = string.Concat(output, "Countries: [", string.Join(", ", Countries), "], ");
            output = string.Concat(output, "GamePlatform: [", string.Join(", ", GamePlatform), "], ");
            output = string.Concat(output, "GameVersions: [", string.Join(", ", GameVersions), "], ");
            return output;
        }
    }

    /// <summary>
    /// A activity (Live Event or Experiment)
    /// </summary>
    public interface IConsoleInsightMetricsFiltersActivity
    {

        /// <summary>
        /// The id of the activity.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// The name of the activity.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// The number of identities that match the filter.
        /// </summary>
        string Size { get; }

        /// <summary>
        /// The type of the activity.
        /// </summary>
        ConsoleInsightMetricsFiltersActivityActivityType Type { get; }

        /// <summary>
        /// The list of variants of the activity.
        /// </summary>
        IEnumerable<IConsoleInsightMetricsFiltersActivityVariant> Variants { get; }
    }

    /// <inheritdoc />
    internal class ConsoleInsightMetricsFiltersActivity : IConsoleInsightMetricsFiltersActivity
    {

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="size"), Preserve]
        public string Size { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public ConsoleInsightMetricsFiltersActivityActivityType Type => _type;
        [DataMember(Name="type"), Preserve]
        public ConsoleInsightMetricsFiltersActivityActivityType _type { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleInsightMetricsFiltersActivityVariant> Variants => _variants ?? new List<ConsoleInsightMetricsFiltersActivityVariant>(0);
        [DataMember(Name="variants"), Preserve]
        public List<ConsoleInsightMetricsFiltersActivityVariant> _variants { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Size: ", Size, ", ");
            output = string.Concat(output, "Type: ", Type, ", ");
            output = string.Concat(output, "Variants: [", string.Join(", ", Variants), "], ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public enum ConsoleInsightMetricsFiltersActivityActivityType
    {
        /// <summary>
        /// 
        /// </summary>
        NONE = 0,
        /// <summary>
        /// 
        /// </summary>
        LIVE_EVENT = 1,
        /// <summary>
        /// 
        /// </summary>
        EXPERIMENT = 2,
    }

    /// <summary>
    /// A activity variant.
    /// </summary>
    public interface IConsoleInsightMetricsFiltersActivityVariant
    {

        /// <summary>
        /// The identifier of the variant.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// The name of the variant.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// The number of identities that match the filter.
        /// </summary>
        string Size { get; }
    }

    /// <inheritdoc />
    internal class ConsoleInsightMetricsFiltersActivityVariant : IConsoleInsightMetricsFiltersActivityVariant
    {

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="size"), Preserve]
        public string Size { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Size: ", Size, ", ");
            return output;
        }
    }

    /// <summary>
    /// The available Ad Attribution filters for the InsightMetricsFiltersGet RPC.
    /// </summary>
    public interface IConsoleInsightMetricsFiltersAdAttribution
    {

        /// <summary>
        /// The list of Ad Attribution Networks platforms.
        /// </summary>
        IEnumerable<IInsightMetricsFiltersAdAttributionPlatform> AdAttributionPlatforms { get; }
    }

    /// <inheritdoc />
    internal class ConsoleInsightMetricsFiltersAdAttribution : IConsoleInsightMetricsFiltersAdAttribution
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IInsightMetricsFiltersAdAttributionPlatform> AdAttributionPlatforms => _adAttributionPlatforms ?? new List<InsightMetricsFiltersAdAttributionPlatform>(0);
        [DataMember(Name="ad_attribution_platforms"), Preserve]
        public List<InsightMetricsFiltersAdAttributionPlatform> _adAttributionPlatforms { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "AdAttributionPlatforms: [", string.Join(", ", AdAttributionPlatforms), "], ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IConsoleInsightMetricsFiltersBasicFilter
    {

        /// <summary>
        /// The id to filter by.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// The name to filter by.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// The number of identities that match the filter.
        /// </summary>
        string Size { get; }
    }

    /// <inheritdoc />
    internal class ConsoleInsightMetricsFiltersBasicFilter : IConsoleInsightMetricsFiltersBasicFilter
    {

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="size"), Preserve]
        public string Size { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Size: ", Size, ", ");
            return output;
        }
    }

    /// <summary>
    /// The retention for a cohort of identities.
    /// </summary>
    public interface IConsoleInsightMetricsRetentionCohortGetResponse
    {

        /// <summary>
        /// The list of days and their respective retention values.
        /// </summary>
        IConsoleInsightMetricsRetentionCohortStats Stats { get; }
    }

    /// <inheritdoc />
    internal class ConsoleInsightMetricsRetentionCohortGetResponse : IConsoleInsightMetricsRetentionCohortGetResponse
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleInsightMetricsRetentionCohortStats Stats => _stats;
        [DataMember(Name="stats"), Preserve]
        public ConsoleInsightMetricsRetentionCohortStats _stats { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Stats: ", Stats, ", ");
            return output;
        }
    }

    /// <summary>
    /// The retention values for given starting point.
    /// </summary>
    public interface IConsoleInsightMetricsRetentionCohortStats
    {

        /// <summary>
        /// The cohort stats for the select day range.
        /// </summary>
        IEnumerable<IConsoleInsightMetricsRetentionCohortStatsInstallationData> InstallData { get; }

        /// <summary>
        /// The summary of the cohort stats for the select day range.
        /// </summary>
        IEnumerable<IConsoleInsightMetricsRetentionCohortStatsSummary> Summary { get; }
    }

    /// <inheritdoc />
    internal class ConsoleInsightMetricsRetentionCohortStats : IConsoleInsightMetricsRetentionCohortStats
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleInsightMetricsRetentionCohortStatsInstallationData> InstallData => _installData ?? new List<ConsoleInsightMetricsRetentionCohortStatsInstallationData>(0);
        [DataMember(Name="install_data"), Preserve]
        public List<ConsoleInsightMetricsRetentionCohortStatsInstallationData> _installData { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleInsightMetricsRetentionCohortStatsSummary> Summary => _summary ?? new List<ConsoleInsightMetricsRetentionCohortStatsSummary>(0);
        [DataMember(Name="summary"), Preserve]
        public List<ConsoleInsightMetricsRetentionCohortStatsSummary> _summary { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "InstallData: [", string.Join(", ", InstallData), "], ");
            output = string.Concat(output, "Summary: [", string.Join(", ", Summary), "], ");
            return output;
        }
    }

    /// <summary>
    /// The summary of the cohort stats for a given day since installation.
    /// </summary>
    public interface IConsoleInsightMetricsRetentionCohortStatsInstallationData
    {

        /// <summary>
        /// The installation counts. Each position will match the day in the range provided in the request.
        /// </summary>
        List<string> InstallationCountPerDay { get; }

        /// <summary>
        /// The average playtime duration. Each position will match the day in the range provided in the request.
        /// </summary>
        List<double> PlaytimeDurationPerDay { get; }

        /// <summary>
        /// The retention percentages. Each position will match the day in the range provided in the request.
        /// </summary>
        List<double> RetentionPercentagesPerDay { get; }

        /// <summary>
        /// The session counts. Each position will match the day in the range provided in the request.
        /// </summary>
        List<double> SessionCountPerDay { get; }

        /// <summary>
        /// The average session duration. Each position will match the day in the range provided in the request.
        /// </summary>
        List<double> SessionDurationPerDay { get; }

        /// <summary>
        /// The starting day.
        /// </summary>
        string StartTimeSec { get; }
    }

    /// <inheritdoc />
    internal class ConsoleInsightMetricsRetentionCohortStatsInstallationData : IConsoleInsightMetricsRetentionCohortStatsInstallationData
    {

        /// <inheritdoc />
        [DataMember(Name="installation_count_per_day"), Preserve]
        public List<string> InstallationCountPerDay { get; set; }

        /// <inheritdoc />
        [DataMember(Name="playtime_duration_per_day"), Preserve]
        public List<double> PlaytimeDurationPerDay { get; set; }

        /// <inheritdoc />
        [DataMember(Name="retention_percentages_per_day"), Preserve]
        public List<double> RetentionPercentagesPerDay { get; set; }

        /// <inheritdoc />
        [DataMember(Name="session_count_per_day"), Preserve]
        public List<double> SessionCountPerDay { get; set; }

        /// <inheritdoc />
        [DataMember(Name="session_duration_per_day"), Preserve]
        public List<double> SessionDurationPerDay { get; set; }

        /// <inheritdoc />
        [DataMember(Name="start_time_sec"), Preserve]
        public string StartTimeSec { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "InstallationCountPerDay: [", string.Join(", ", InstallationCountPerDay), "], ");
            output = string.Concat(output, "PlaytimeDurationPerDay: [", string.Join(", ", PlaytimeDurationPerDay), "], ");
            output = string.Concat(output, "RetentionPercentagesPerDay: [", string.Join(", ", RetentionPercentagesPerDay), "], ");
            output = string.Concat(output, "SessionCountPerDay: [", string.Join(", ", SessionCountPerDay), "], ");
            output = string.Concat(output, "SessionDurationPerDay: [", string.Join(", ", SessionDurationPerDay), "], ");
            output = string.Concat(output, "StartTimeSec: ", StartTimeSec, ", ");
            return output;
        }
    }

    /// <summary>
    /// The summary of the cohort stats for a given day since installation.
    /// </summary>
    public interface IConsoleInsightMetricsRetentionCohortStatsSummary
    {

        /// <summary>
        /// The number of days since the installation time.
        /// </summary>
        string DaySinceInstall { get; }

        /// <summary>
        /// The installation counts.
        /// </summary>
        string InstallationCount { get; }

        /// <summary>
        /// The average playtime duration.
        /// </summary>
        double PlaytimeDuration { get; }

        /// <summary>
        /// The retention percentages.
        /// </summary>
        double RetentionPercentages { get; }

        /// <summary>
        /// The session counts.
        /// </summary>
        double SessionCount { get; }

        /// <summary>
        /// The average session duration.
        /// </summary>
        double SessionDuration { get; }
    }

    /// <inheritdoc />
    internal class ConsoleInsightMetricsRetentionCohortStatsSummary : IConsoleInsightMetricsRetentionCohortStatsSummary
    {

        /// <inheritdoc />
        [DataMember(Name="day_since_install"), Preserve]
        public string DaySinceInstall { get; set; }

        /// <inheritdoc />
        [DataMember(Name="installation_count"), Preserve]
        public string InstallationCount { get; set; }

        /// <inheritdoc />
        [DataMember(Name="playtime_duration"), Preserve]
        public double PlaytimeDuration { get; set; }

        /// <inheritdoc />
        [DataMember(Name="retention_percentages"), Preserve]
        public double RetentionPercentages { get; set; }

        /// <inheritdoc />
        [DataMember(Name="session_count"), Preserve]
        public double SessionCount { get; set; }

        /// <inheritdoc />
        [DataMember(Name="session_duration"), Preserve]
        public double SessionDuration { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "DaySinceInstall: ", DaySinceInstall, ", ");
            output = string.Concat(output, "InstallationCount: ", InstallationCount, ", ");
            output = string.Concat(output, "PlaytimeDuration: ", PlaytimeDuration, ", ");
            output = string.Concat(output, "RetentionPercentages: ", RetentionPercentages, ", ");
            output = string.Concat(output, "SessionCount: ", SessionCount, ", ");
            output = string.Concat(output, "SessionDuration: ", SessionDuration, ", ");
            return output;
        }
    }

    /// <summary>
    /// The retention over the life time of the game.
    /// </summary>
    public interface IConsoleInsightMetricsRetentionLifetimeGetResponse
    {

        /// <summary>
        /// The stats over the lifetime of the game.
        /// </summary>
        IConsoleInsightMetricsRetentionLifetimeGetResponseLifetimeStats GameLifetime { get; }

        /// <summary>
        /// The stats on lifetime day N of the game. Indexes 0..7 are for day 0..7 while 8 and 9 indexes are for day 14 and 30.
        /// </summary>
        IEnumerable<IConsoleInsightMetricsRetentionLifetimeGetResponseLifetimeStats> LifetimeOnDay { get; }
    }

    /// <inheritdoc />
    internal class ConsoleInsightMetricsRetentionLifetimeGetResponse : IConsoleInsightMetricsRetentionLifetimeGetResponse
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleInsightMetricsRetentionLifetimeGetResponseLifetimeStats GameLifetime => _gameLifetime;
        [DataMember(Name="game_lifetime"), Preserve]
        public ConsoleInsightMetricsRetentionLifetimeGetResponseLifetimeStats _gameLifetime { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleInsightMetricsRetentionLifetimeGetResponseLifetimeStats> LifetimeOnDay => _lifetimeOnDay ?? new List<ConsoleInsightMetricsRetentionLifetimeGetResponseLifetimeStats>(0);
        [DataMember(Name="lifetime_on_day"), Preserve]
        public List<ConsoleInsightMetricsRetentionLifetimeGetResponseLifetimeStats> _lifetimeOnDay { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "GameLifetime: ", GameLifetime, ", ");
            output = string.Concat(output, "LifetimeOnDay: [", string.Join(", ", LifetimeOnDay), "], ");
            return output;
        }
    }

    /// <summary>
    /// The session and playtime stats.
    /// </summary>
    public interface IConsoleInsightMetricsRetentionLifetimeGetResponseLifetimeStats
    {

        /// <summary>
        /// The average Playtime over the lifetime of the game.
        /// </summary>
        double AvgPlaytimeDuration { get; }

        /// <summary>
        /// The average Session count over the lifetime of the game.
        /// </summary>
        double AvgSessionCount { get; }

        /// <summary>
        /// The average Session duration over the lifetime of the game.
        /// </summary>
        double AvgSessionDuration { get; }
    }

    /// <inheritdoc />
    internal class ConsoleInsightMetricsRetentionLifetimeGetResponseLifetimeStats : IConsoleInsightMetricsRetentionLifetimeGetResponseLifetimeStats
    {

        /// <inheritdoc />
        [DataMember(Name="avg_playtime_duration"), Preserve]
        public double AvgPlaytimeDuration { get; set; }

        /// <inheritdoc />
        [DataMember(Name="avg_session_count"), Preserve]
        public double AvgSessionCount { get; set; }

        /// <inheritdoc />
        [DataMember(Name="avg_session_duration"), Preserve]
        public double AvgSessionDuration { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "AvgPlaytimeDuration: ", AvgPlaytimeDuration, ", ");
            output = string.Concat(output, "AvgSessionCount: ", AvgSessionCount, ", ");
            output = string.Concat(output, "AvgSessionDuration: ", AvgSessionDuration, ", ");
            return output;
        }
    }

    /// <summary>
    /// The return on ad spent values of identities.
    /// </summary>
    public interface IConsoleInsightMetricsRoasCohortGetResponse
    {

        /// <summary>
        /// The list of days and their respective return on ad spent values.
        /// </summary>
        IConsoleInsightMetricsRoasCohortStats Stats { get; }
    }

    /// <inheritdoc />
    internal class ConsoleInsightMetricsRoasCohortGetResponse : IConsoleInsightMetricsRoasCohortGetResponse
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleInsightMetricsRoasCohortStats Stats => _stats;
        [DataMember(Name="stats"), Preserve]
        public ConsoleInsightMetricsRoasCohortStats _stats { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Stats: ", Stats, ", ");
            return output;
        }
    }

    /// <summary>
    /// The return on ad spent values for given starting point.
    /// </summary>
    public interface IConsoleInsightMetricsRoasCohortStats
    {

        /// <summary>
        /// The cohort stats for the select day range.
        /// </summary>
        IEnumerable<IConsoleInsightMetricsRoasCohortStatsInstallationData> InstallData { get; }

        /// <summary>
        /// The summary of the cohort stats for the select day range.
        /// </summary>
        IEnumerable<IConsoleInsightMetricsRoasCohortStatsSummary> Summary { get; }
    }

    /// <inheritdoc />
    internal class ConsoleInsightMetricsRoasCohortStats : IConsoleInsightMetricsRoasCohortStats
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleInsightMetricsRoasCohortStatsInstallationData> InstallData => _installData ?? new List<ConsoleInsightMetricsRoasCohortStatsInstallationData>(0);
        [DataMember(Name="install_data"), Preserve]
        public List<ConsoleInsightMetricsRoasCohortStatsInstallationData> _installData { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleInsightMetricsRoasCohortStatsSummary> Summary => _summary ?? new List<ConsoleInsightMetricsRoasCohortStatsSummary>(0);
        [DataMember(Name="summary"), Preserve]
        public List<ConsoleInsightMetricsRoasCohortStatsSummary> _summary { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "InstallData: [", string.Join(", ", InstallData), "], ");
            output = string.Concat(output, "Summary: [", string.Join(", ", Summary), "], ");
            return output;
        }
    }

    /// <summary>
    /// The summary of the cohort stats for a given day since installation.
    /// </summary>
    public interface IConsoleInsightMetricsRoasCohortStatsInstallationData
    {

        /// <summary>
        /// The Ad Revenue Long-term Value. Each position will match the day in the range provided in the request.
        /// </summary>
        List<double> AvgAdRevenueLongTermValuePerDay { get; }

        /// <summary>
        /// The cost per identity. Each position will match the day in the range provided in the request.
        /// </summary>
        List<double> AvgCostPerInstallPerDay { get; }

        /// <summary>
        /// The In-App Purchase Long-term Value. Each position will match the day in the range provided in the request.
        /// </summary>
        List<double> AvgInAppRevenueLongTermValuePerDay { get; }

        /// <summary>
        /// The Long-term Value. Each position will match the day in the range provided in the request.
        /// </summary>
        List<double> AvgLongTermValuePerDay { get; }

        /// <summary>
        /// The installation count. Each position will match the day in the range provided in the request.
        /// </summary>
        List<string> InstallationCountPerDay { get; }

        /// <summary>
        /// The return on ad spent percentages. Each position will match the day in the range provided in the request.
        /// </summary>
        List<double> ReturnOnAdSpentPerDay { get; }

        /// <summary>
        /// The starting day.
        /// </summary>
        string StartTimeSec { get; }
    }

    /// <inheritdoc />
    internal class ConsoleInsightMetricsRoasCohortStatsInstallationData : IConsoleInsightMetricsRoasCohortStatsInstallationData
    {

        /// <inheritdoc />
        [DataMember(Name="avg_ad_revenue_long_term_value_per_day"), Preserve]
        public List<double> AvgAdRevenueLongTermValuePerDay { get; set; }

        /// <inheritdoc />
        [DataMember(Name="avg_cost_per_install_per_day"), Preserve]
        public List<double> AvgCostPerInstallPerDay { get; set; }

        /// <inheritdoc />
        [DataMember(Name="avg_in_app_revenue_long_term_value_per_day"), Preserve]
        public List<double> AvgInAppRevenueLongTermValuePerDay { get; set; }

        /// <inheritdoc />
        [DataMember(Name="avg_long_term_value_per_day"), Preserve]
        public List<double> AvgLongTermValuePerDay { get; set; }

        /// <inheritdoc />
        [DataMember(Name="installation_count_per_day"), Preserve]
        public List<string> InstallationCountPerDay { get; set; }

        /// <inheritdoc />
        [DataMember(Name="return_on_ad_spent_per_day"), Preserve]
        public List<double> ReturnOnAdSpentPerDay { get; set; }

        /// <inheritdoc />
        [DataMember(Name="start_time_sec"), Preserve]
        public string StartTimeSec { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "AvgAdRevenueLongTermValuePerDay: [", string.Join(", ", AvgAdRevenueLongTermValuePerDay), "], ");
            output = string.Concat(output, "AvgCostPerInstallPerDay: [", string.Join(", ", AvgCostPerInstallPerDay), "], ");
            output = string.Concat(output, "AvgInAppRevenueLongTermValuePerDay: [", string.Join(", ", AvgInAppRevenueLongTermValuePerDay), "], ");
            output = string.Concat(output, "AvgLongTermValuePerDay: [", string.Join(", ", AvgLongTermValuePerDay), "], ");
            output = string.Concat(output, "InstallationCountPerDay: [", string.Join(", ", InstallationCountPerDay), "], ");
            output = string.Concat(output, "ReturnOnAdSpentPerDay: [", string.Join(", ", ReturnOnAdSpentPerDay), "], ");
            output = string.Concat(output, "StartTimeSec: ", StartTimeSec, ", ");
            return output;
        }
    }

    /// <summary>
    /// The summary of the cohort stats for a given day since installation.
    /// </summary>
    public interface IConsoleInsightMetricsRoasCohortStatsSummary
    {

        /// <summary>
        /// The long-term value of ad revenue.
        /// </summary>
        double AvgAdRevenueLongTermValue { get; }

        /// <summary>
        /// The cost per identity.
        /// </summary>
        double AvgCostPerInstall { get; }

        /// <summary>
        /// The long-term value of in-app purchases.
        /// </summary>
        double AvgInAppRevenueLongTermValue { get; }

        /// <summary>
        /// The long-term value.
        /// </summary>
        double AvgLongTermValue { get; }

        /// <summary>
        /// The number of days since the installation time.
        /// </summary>
        string DaySinceInstall { get; }

        /// <summary>
        /// The installation counts.
        /// </summary>
        string InstallationCount { get; }

        /// <summary>
        /// The return on ad spent percentages.
        /// </summary>
        double ReturnOnAdSpent { get; }
    }

    /// <inheritdoc />
    internal class ConsoleInsightMetricsRoasCohortStatsSummary : IConsoleInsightMetricsRoasCohortStatsSummary
    {

        /// <inheritdoc />
        [DataMember(Name="avg_ad_revenue_long_term_value"), Preserve]
        public double AvgAdRevenueLongTermValue { get; set; }

        /// <inheritdoc />
        [DataMember(Name="avg_cost_per_install"), Preserve]
        public double AvgCostPerInstall { get; set; }

        /// <inheritdoc />
        [DataMember(Name="avg_in_app_revenue_long_term_value"), Preserve]
        public double AvgInAppRevenueLongTermValue { get; set; }

        /// <inheritdoc />
        [DataMember(Name="avg_long_term_value"), Preserve]
        public double AvgLongTermValue { get; set; }

        /// <inheritdoc />
        [DataMember(Name="day_since_install"), Preserve]
        public string DaySinceInstall { get; set; }

        /// <inheritdoc />
        [DataMember(Name="installation_count"), Preserve]
        public string InstallationCount { get; set; }

        /// <inheritdoc />
        [DataMember(Name="return_on_ad_spent"), Preserve]
        public double ReturnOnAdSpent { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "AvgAdRevenueLongTermValue: ", AvgAdRevenueLongTermValue, ", ");
            output = string.Concat(output, "AvgCostPerInstall: ", AvgCostPerInstall, ", ");
            output = string.Concat(output, "AvgInAppRevenueLongTermValue: ", AvgInAppRevenueLongTermValue, ", ");
            output = string.Concat(output, "AvgLongTermValue: ", AvgLongTermValue, ", ");
            output = string.Concat(output, "DaySinceInstall: ", DaySinceInstall, ", ");
            output = string.Concat(output, "InstallationCount: ", InstallationCount, ", ");
            output = string.Concat(output, "ReturnOnAdSpent: ", ReturnOnAdSpent, ", ");
            return output;
        }
    }

    /// <summary>
    /// The return on ad spent values over the lifetime of the game.
    /// </summary>
    public interface IConsoleInsightMetricsRoasLifetimeGetResponse
    {

        /// <summary>
        /// The average cost per install reported by the Advertisement Measurement Partner.
        /// </summary>
        double AvgCostPerInstall { get; }

        /// <summary>
        /// The stats over the lifetime of the game.
        /// </summary>
        IConsoleInsightMetricsRoasLifetimeGetResponseLifetimeStats GameLifetime { get; }

        /// <summary>
        /// The stats on lifetime day N of the game. Indexes 0..7 are for day 0..7 while 8 and 9 indexes are for day 14 and 30.
        /// </summary>
        IEnumerable<IConsoleInsightMetricsRoasLifetimeGetResponseLifetimeStats> LifetimeOnDay { get; }
    }

    /// <inheritdoc />
    internal class ConsoleInsightMetricsRoasLifetimeGetResponse : IConsoleInsightMetricsRoasLifetimeGetResponse
    {

        /// <inheritdoc />
        [DataMember(Name="avg_cost_per_install"), Preserve]
        public double AvgCostPerInstall { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleInsightMetricsRoasLifetimeGetResponseLifetimeStats GameLifetime => _gameLifetime;
        [DataMember(Name="game_lifetime"), Preserve]
        public ConsoleInsightMetricsRoasLifetimeGetResponseLifetimeStats _gameLifetime { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleInsightMetricsRoasLifetimeGetResponseLifetimeStats> LifetimeOnDay => _lifetimeOnDay ?? new List<ConsoleInsightMetricsRoasLifetimeGetResponseLifetimeStats>(0);
        [DataMember(Name="lifetime_on_day"), Preserve]
        public List<ConsoleInsightMetricsRoasLifetimeGetResponseLifetimeStats> _lifetimeOnDay { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "AvgCostPerInstall: ", AvgCostPerInstall, ", ");
            output = string.Concat(output, "GameLifetime: ", GameLifetime, ", ");
            output = string.Concat(output, "LifetimeOnDay: [", string.Join(", ", LifetimeOnDay), "], ");
            return output;
        }
    }

    /// <summary>
    /// The life time stats.
    /// </summary>
    public interface IConsoleInsightMetricsRoasLifetimeGetResponseLifetimeStats
    {

        /// <summary>
        /// The average long-term value over the lifetime of the game.
        /// </summary>
        double AvgLongTermValue { get; }

        /// <summary>
        /// The return on ad spent over the lifetime of the game.
        /// </summary>
        double ReturnOnAdSpent { get; }
    }

    /// <inheritdoc />
    internal class ConsoleInsightMetricsRoasLifetimeGetResponseLifetimeStats : IConsoleInsightMetricsRoasLifetimeGetResponseLifetimeStats
    {

        /// <inheritdoc />
        [DataMember(Name="avg_long_term_value"), Preserve]
        public double AvgLongTermValue { get; set; }

        /// <inheritdoc />
        [DataMember(Name="return_on_ad_spent"), Preserve]
        public double ReturnOnAdSpent { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "AvgLongTermValue: ", AvgLongTermValue, ", ");
            output = string.Concat(output, "ReturnOnAdSpent: ", ReturnOnAdSpent, ", ");
            return output;
        }
    }

    /// <summary>
    /// A single live event.
    /// </summary>
    public interface IConsoleLiveEvent
    {

        /// <summary>
        /// End time of current or upcoming event run, if it is not terminated.
        /// </summary>
        string ActiveEndTimeSec { get; }

        /// <summary>
        /// Start time of current or upcoming event run, if it is not terminated.
        /// </summary>
        string ActiveStartTimeSec { get; }

        /// <summary>
        /// Audience list.
        /// </summary>
        IEnumerable<IConsoleAudienceView> Audiences { get; }

        /// <summary>
        /// Category labels.
        /// </summary>
        IEnumerable<IConsoleCategoryView> Categories { get; }

        /// <summary>
        /// Color hex, for the calendar view.
        /// </summary>
        string Color { get; }

        /// <summary>
        /// Create time.
        /// </summary>
        string CreateTimeSec { get; }

        /// <summary>
        /// Description.
        /// </summary>
        string Description { get; }

        /// <summary>
        /// Duration in seconds.
        /// </summary>
        string DurationSec { get; }

        /// <summary>
        /// End time, 0 if it repeats forever.
        /// </summary>
        string EndTimeSec { get; }

        /// <summary>
        /// Requires explicit join. Membership will be sticky if true.
        /// </summary>
        bool ExplicitJoin { get; }

        /// <summary>
        /// Flag overrides, if any.
        /// </summary>
        IEnumerable<IConsoleLiveEventFlagView> Flags { get; }

        /// <summary>
        /// Audience holdout list.
        /// </summary>
        IEnumerable<IConsoleAudienceView> Holdouts { get; }

        /// <summary>
        /// Identifier.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// Sticky membership.
        /// </summary>
        bool Membership { get; }

        /// <summary>
        /// Monitor metric list.
        /// </summary>
        IEnumerable<IConsoleMetricView> MonitorMetrics { get; }

        /// <summary>
        /// Name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Reset CRON schedule, if configured.
        /// </summary>
        string ResetCron { get; }

        /// <summary>
        /// Value's schema.
        /// </summary>
        IConsoleSchemaView Schema { get; }

        /// <summary>
        /// Start time.
        /// </summary>
        string StartTimeSec { get; }

        /// <summary>
        /// The status of an live event.
        /// </summary>
        ConsoleLiveEventStatus Status { get; }

        /// <summary>
        /// Update time.
        /// </summary>
        string UpdateTimeSec { get; }

        /// <summary>
        /// Event value.
        /// </summary>
        string Value { get; }

        /// <summary>
        /// Optional webhook.
        /// </summary>
        string Webhook { get; }
    }

    /// <inheritdoc />
    internal class ConsoleLiveEvent : IConsoleLiveEvent
    {

        /// <inheritdoc />
        [DataMember(Name="active_end_time_sec"), Preserve]
        public string ActiveEndTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="active_start_time_sec"), Preserve]
        public string ActiveStartTimeSec { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleAudienceView> Audiences => _audiences ?? new List<ConsoleAudienceView>(0);
        [DataMember(Name="audiences"), Preserve]
        public List<ConsoleAudienceView> _audiences { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleCategoryView> Categories => _categories ?? new List<ConsoleCategoryView>(0);
        [DataMember(Name="categories"), Preserve]
        public List<ConsoleCategoryView> _categories { get; set; }

        /// <inheritdoc />
        [DataMember(Name="color"), Preserve]
        public string Color { get; set; }

        /// <inheritdoc />
        [DataMember(Name="create_time_sec"), Preserve]
        public string CreateTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="description"), Preserve]
        public string Description { get; set; }

        /// <inheritdoc />
        [DataMember(Name="duration_sec"), Preserve]
        public string DurationSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="end_time_sec"), Preserve]
        public string EndTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="explicit_join"), Preserve]
        public bool ExplicitJoin { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleLiveEventFlagView> Flags => _flags ?? new List<ConsoleLiveEventFlagView>(0);
        [DataMember(Name="flags"), Preserve]
        public List<ConsoleLiveEventFlagView> _flags { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleAudienceView> Holdouts => _holdouts ?? new List<ConsoleAudienceView>(0);
        [DataMember(Name="holdouts"), Preserve]
        public List<ConsoleAudienceView> _holdouts { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="membership"), Preserve]
        public bool Membership { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleMetricView> MonitorMetrics => _monitorMetrics ?? new List<ConsoleMetricView>(0);
        [DataMember(Name="monitor_metrics"), Preserve]
        public List<ConsoleMetricView> _monitorMetrics { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="reset_cron"), Preserve]
        public string ResetCron { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleSchemaView Schema => _schema;
        [DataMember(Name="schema"), Preserve]
        public ConsoleSchemaView _schema { get; set; }

        /// <inheritdoc />
        [DataMember(Name="start_time_sec"), Preserve]
        public string StartTimeSec { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public ConsoleLiveEventStatus Status => _status;
        [DataMember(Name="status"), Preserve]
        public ConsoleLiveEventStatus _status { get; set; }

        /// <inheritdoc />
        [DataMember(Name="update_time_sec"), Preserve]
        public string UpdateTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        /// <inheritdoc />
        [DataMember(Name="webhook"), Preserve]
        public string Webhook { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "ActiveEndTimeSec: ", ActiveEndTimeSec, ", ");
            output = string.Concat(output, "ActiveStartTimeSec: ", ActiveStartTimeSec, ", ");
            output = string.Concat(output, "Audiences: [", string.Join(", ", Audiences), "], ");
            output = string.Concat(output, "Categories: [", string.Join(", ", Categories), "], ");
            output = string.Concat(output, "Color: ", Color, ", ");
            output = string.Concat(output, "CreateTimeSec: ", CreateTimeSec, ", ");
            output = string.Concat(output, "Description: ", Description, ", ");
            output = string.Concat(output, "DurationSec: ", DurationSec, ", ");
            output = string.Concat(output, "EndTimeSec: ", EndTimeSec, ", ");
            output = string.Concat(output, "ExplicitJoin: ", ExplicitJoin, ", ");
            output = string.Concat(output, "Flags: [", string.Join(", ", Flags), "], ");
            output = string.Concat(output, "Holdouts: [", string.Join(", ", Holdouts), "], ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Membership: ", Membership, ", ");
            output = string.Concat(output, "MonitorMetrics: [", string.Join(", ", MonitorMetrics), "], ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "ResetCron: ", ResetCron, ", ");
            output = string.Concat(output, "Schema: ", Schema, ", ");
            output = string.Concat(output, "StartTimeSec: ", StartTimeSec, ", ");
            output = string.Concat(output, "Status: ", Status, ", ");
            output = string.Concat(output, "UpdateTimeSec: ", UpdateTimeSec, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            output = string.Concat(output, "Webhook: ", Webhook, ", ");
            return output;
        }
    }

    /// <summary>
    /// Result for the live event calendar view.
    /// </summary>
    public interface IConsoleLiveEventCalendarResult
    {

        /// <summary>
        /// Map of id -> full live event data.
        /// </summary>
        IDictionary<string, ILiveEventCalendarItem> Dict { get; }

        /// <summary>
        /// List of all live event periods, only calendar data,
        /// </summary>
        IEnumerable<ILiveEventRunView> Periods { get; }
    }

    /// <inheritdoc />
    internal class ConsoleLiveEventCalendarResult : IConsoleLiveEventCalendarResult
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IDictionary<string, ILiveEventCalendarItem> Dict  => _dict ?? new Dictionary<string, ILiveEventCalendarItem>();
        [DataMember(Name="dict"), Preserve]
        public Dictionary<string, ILiveEventCalendarItem> _dict { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<ILiveEventRunView> Periods => _periods ?? new List<LiveEventRunView>(0);
        [DataMember(Name="periods"), Preserve]
        public List<LiveEventRunView> _periods { get; set; }

        public override string ToString()
        {
            var output = "";

            var dictString = "";
            foreach (var kvp in Dict)
            {
                dictString = string.Concat(dictString, "{" + kvp.Key + "=" + kvp.Value + "}");
            }
            output = string.Concat(output, "Dict: [" + dictString + "]");
            output = string.Concat(output, "Periods: [", string.Join(", ", Periods), "], ");
            return output;
        }
    }

    /// <summary>
    /// Request to create a new live event.
    /// </summary>
    public interface IConsoleLiveEventCreateRequest
    {

        /// <summary>
        /// Allow the live event to have overlapping feature flags with another live event.
        /// </summary>
        bool AllowFlagOverlap { get; }

        /// <summary>
        /// Audience list.
        /// </summary>
        IEnumerable<IConsoleAssociateAudienceRequest> Audiences { get; }

        /// <summary>
        /// Category label identifiers.
        /// </summary>
        List<string> CategoryIds { get; }

        /// <summary>
        /// Color hex, for the calendar view.
        /// </summary>
        string Color { get; }

        /// <summary>
        /// Description.
        /// </summary>
        string Description { get; }

        /// <summary>
        /// Duration in seconds.
        /// </summary>
        string DurationSec { get; }

        /// <summary>
        /// End time, 0 if it repeats forever.
        /// </summary>
        string EndTimeSec { get; }

        /// <summary>
        /// Requires explicit join. Membership will be sticky if true.
        /// </summary>
        bool ExplicitJoin { get; }

        /// <summary>
        /// Flag overrides, if any.
        /// </summary>
        IEnumerable<IConsoleLiveEventFlagCreateRequest> Flags { get; }

        /// <summary>
        /// Audience list of exclusions.
        /// </summary>
        IEnumerable<IConsoleAssociateAudienceRequest> Holdouts { get; }

        /// <summary>
        /// Sticky membership.
        /// </summary>
        bool Membership { get; }

        /// <summary>
        /// Monitor metric list.
        /// </summary>
        IEnumerable<IConsoleAssociateMetricRequest> MonitorMetrics { get; }

        /// <summary>
        /// Name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Reset CRON schedule, if configured.
        /// </summary>
        string ResetCron { get; }

        /// <summary>
        /// Schema identifier
        /// </summary>
        string SchemaId { get; }

        /// <summary>
        /// Start time, 0 if current time.
        /// </summary>
        string StartTimeSec { get; }

        /// <summary>
        /// Event value.
        /// </summary>
        string Value { get; }

        /// <summary>
        /// Optional webhook.
        /// </summary>
        string Webhook { get; }
    }

    /// <inheritdoc />
    internal class ConsoleLiveEventCreateRequest : IConsoleLiveEventCreateRequest
    {

        /// <inheritdoc />
        [DataMember(Name="allow_flag_overlap"), Preserve]
        public bool AllowFlagOverlap { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleAssociateAudienceRequest> Audiences => _audiences ?? new List<ConsoleAssociateAudienceRequest>(0);
        [DataMember(Name="audiences"), Preserve]
        public List<ConsoleAssociateAudienceRequest> _audiences { get; set; }

        /// <inheritdoc />
        [DataMember(Name="category_ids"), Preserve]
        public List<string> CategoryIds { get; set; }

        /// <inheritdoc />
        [DataMember(Name="color"), Preserve]
        public string Color { get; set; }

        /// <inheritdoc />
        [DataMember(Name="description"), Preserve]
        public string Description { get; set; }

        /// <inheritdoc />
        [DataMember(Name="duration_sec"), Preserve]
        public string DurationSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="end_time_sec"), Preserve]
        public string EndTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="explicit_join"), Preserve]
        public bool ExplicitJoin { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleLiveEventFlagCreateRequest> Flags => _flags ?? new List<ConsoleLiveEventFlagCreateRequest>(0);
        [DataMember(Name="flags"), Preserve]
        public List<ConsoleLiveEventFlagCreateRequest> _flags { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleAssociateAudienceRequest> Holdouts => _holdouts ?? new List<ConsoleAssociateAudienceRequest>(0);
        [DataMember(Name="holdouts"), Preserve]
        public List<ConsoleAssociateAudienceRequest> _holdouts { get; set; }

        /// <inheritdoc />
        [DataMember(Name="membership"), Preserve]
        public bool Membership { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleAssociateMetricRequest> MonitorMetrics => _monitorMetrics ?? new List<ConsoleAssociateMetricRequest>(0);
        [DataMember(Name="monitor_metrics"), Preserve]
        public List<ConsoleAssociateMetricRequest> _monitorMetrics { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="reset_cron"), Preserve]
        public string ResetCron { get; set; }

        /// <inheritdoc />
        [DataMember(Name="schema_id"), Preserve]
        public string SchemaId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="start_time_sec"), Preserve]
        public string StartTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        /// <inheritdoc />
        [DataMember(Name="webhook"), Preserve]
        public string Webhook { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "AllowFlagOverlap: ", AllowFlagOverlap, ", ");
            output = string.Concat(output, "Audiences: [", string.Join(", ", Audiences), "], ");
            output = string.Concat(output, "CategoryIds: [", string.Join(", ", CategoryIds), "], ");
            output = string.Concat(output, "Color: ", Color, ", ");
            output = string.Concat(output, "Description: ", Description, ", ");
            output = string.Concat(output, "DurationSec: ", DurationSec, ", ");
            output = string.Concat(output, "EndTimeSec: ", EndTimeSec, ", ");
            output = string.Concat(output, "ExplicitJoin: ", ExplicitJoin, ", ");
            output = string.Concat(output, "Flags: [", string.Join(", ", Flags), "], ");
            output = string.Concat(output, "Holdouts: [", string.Join(", ", Holdouts), "], ");
            output = string.Concat(output, "Membership: ", Membership, ", ");
            output = string.Concat(output, "MonitorMetrics: [", string.Join(", ", MonitorMetrics), "], ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "ResetCron: ", ResetCron, ", ");
            output = string.Concat(output, "SchemaId: ", SchemaId, ", ");
            output = string.Concat(output, "StartTimeSec: ", StartTimeSec, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            output = string.Concat(output, "Webhook: ", Webhook, ", ");
            return output;
        }
    }

    /// <summary>
    /// Export data of a Live event.
    /// </summary>
    public interface IConsoleLiveEventExport
    {

        /// <summary>
        /// Audience list.
        /// </summary>
        IEnumerable<IConsoleAudienceView> Audiences { get; }

        /// <summary>
        /// Category label ids.
        /// </summary>
        List<string> CategoryIds { get; }

        /// <summary>
        /// Color hex, for the calendar view.
        /// </summary>
        string Color { get; }

        /// <summary>
        /// Description.
        /// </summary>
        string Description { get; }

        /// <summary>
        /// Duration in seconds.
        /// </summary>
        string DurationSec { get; }

        /// <summary>
        /// End time, 0 if it repeats forever.
        /// </summary>
        string EndTimeSec { get; }

        /// <summary>
        /// Requires explicit join. Membership will be sticky if true.
        /// </summary>
        bool ExplicitJoin { get; }

        /// <summary>
        /// Flag overrides, if any.
        /// </summary>
        IEnumerable<ILiveEventLiveEventExportFlag> Flags { get; }

        /// <summary>
        /// Audience holdout list.
        /// </summary>
        IEnumerable<IConsoleAudienceView> Holdouts { get; }

        /// <summary>
        /// Identifier.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// Sticky membership.
        /// </summary>
        bool Membership { get; }

        /// <summary>
        /// Monitor metric list.
        /// </summary>
        IEnumerable<IConsoleMetricView> MonitorMetrics { get; }

        /// <summary>
        /// Name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Reset CRON schedule, if configured.
        /// </summary>
        string ResetCron { get; }

        /// <summary>
        /// Value's schema.
        /// </summary>
        IConsoleSchemaView Schema { get; }

        /// <summary>
        /// Start time.
        /// </summary>
        string StartTimeSec { get; }

        /// <summary>
        /// Event value.
        /// </summary>
        string Value { get; }

        /// <summary>
        /// Optional webhook.
        /// </summary>
        string Webhook { get; }
    }

    /// <inheritdoc />
    internal class ConsoleLiveEventExport : IConsoleLiveEventExport
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleAudienceView> Audiences => _audiences ?? new List<ConsoleAudienceView>(0);
        [DataMember(Name="audiences"), Preserve]
        public List<ConsoleAudienceView> _audiences { get; set; }

        /// <inheritdoc />
        [DataMember(Name="category_ids"), Preserve]
        public List<string> CategoryIds { get; set; }

        /// <inheritdoc />
        [DataMember(Name="color"), Preserve]
        public string Color { get; set; }

        /// <inheritdoc />
        [DataMember(Name="description"), Preserve]
        public string Description { get; set; }

        /// <inheritdoc />
        [DataMember(Name="duration_sec"), Preserve]
        public string DurationSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="end_time_sec"), Preserve]
        public string EndTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="explicit_join"), Preserve]
        public bool ExplicitJoin { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<ILiveEventLiveEventExportFlag> Flags => _flags ?? new List<LiveEventLiveEventExportFlag>(0);
        [DataMember(Name="flags"), Preserve]
        public List<LiveEventLiveEventExportFlag> _flags { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleAudienceView> Holdouts => _holdouts ?? new List<ConsoleAudienceView>(0);
        [DataMember(Name="holdouts"), Preserve]
        public List<ConsoleAudienceView> _holdouts { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="membership"), Preserve]
        public bool Membership { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleMetricView> MonitorMetrics => _monitorMetrics ?? new List<ConsoleMetricView>(0);
        [DataMember(Name="monitor_metrics"), Preserve]
        public List<ConsoleMetricView> _monitorMetrics { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="reset_cron"), Preserve]
        public string ResetCron { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleSchemaView Schema => _schema;
        [DataMember(Name="schema"), Preserve]
        public ConsoleSchemaView _schema { get; set; }

        /// <inheritdoc />
        [DataMember(Name="start_time_sec"), Preserve]
        public string StartTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        /// <inheritdoc />
        [DataMember(Name="webhook"), Preserve]
        public string Webhook { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Audiences: [", string.Join(", ", Audiences), "], ");
            output = string.Concat(output, "CategoryIds: [", string.Join(", ", CategoryIds), "], ");
            output = string.Concat(output, "Color: ", Color, ", ");
            output = string.Concat(output, "Description: ", Description, ", ");
            output = string.Concat(output, "DurationSec: ", DurationSec, ", ");
            output = string.Concat(output, "EndTimeSec: ", EndTimeSec, ", ");
            output = string.Concat(output, "ExplicitJoin: ", ExplicitJoin, ", ");
            output = string.Concat(output, "Flags: [", string.Join(", ", Flags), "], ");
            output = string.Concat(output, "Holdouts: [", string.Join(", ", Holdouts), "], ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Membership: ", Membership, ", ");
            output = string.Concat(output, "MonitorMetrics: [", string.Join(", ", MonitorMetrics), "], ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "ResetCron: ", ResetCron, ", ");
            output = string.Concat(output, "Schema: ", Schema, ", ");
            output = string.Concat(output, "StartTimeSec: ", StartTimeSec, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            output = string.Concat(output, "Webhook: ", Webhook, ", ");
            return output;
        }
    }

    /// <summary>
    /// A live event flag.
    /// </summary>
    public interface IConsoleLiveEventFlag
    {

        /// <summary>
        /// Flag id.
        /// </summary>
        string FlagId { get; }

        /// <summary>
        /// Flag name.
        /// </summary>
        string FlagName { get; }

        /// <summary>
        /// Identifier.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// The live event id.
        /// </summary>
        string LiveEventId { get; }

        /// <summary>
        /// Value.
        /// </summary>
        string Value { get; }

        /// <summary>
        /// Variants
        /// </summary>
        IEnumerable<IConsoleLiveEventFlagVariant> Variants { get; }
    }

    /// <inheritdoc />
    internal class ConsoleLiveEventFlag : IConsoleLiveEventFlag
    {

        /// <inheritdoc />
        [DataMember(Name="flag_id"), Preserve]
        public string FlagId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="flag_name"), Preserve]
        public string FlagName { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="live_event_id"), Preserve]
        public string LiveEventId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleLiveEventFlagVariant> Variants => _variants ?? new List<ConsoleLiveEventFlagVariant>(0);
        [DataMember(Name="variants"), Preserve]
        public List<ConsoleLiveEventFlagVariant> _variants { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "FlagId: ", FlagId, ", ");
            output = string.Concat(output, "FlagName: ", FlagName, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "LiveEventId: ", LiveEventId, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            output = string.Concat(output, "Variants: [", string.Join(", ", Variants), "], ");
            return output;
        }
    }

    /// <summary>
    /// A live event flag create request.
    /// </summary>
    public interface IConsoleLiveEventFlagCreateRequest
    {

        /// <summary>
        /// The flag identifier.
        /// </summary>
        string FlagId { get; }

        /// <summary>
        /// Value.
        /// </summary>
        string Value { get; }

        /// <summary>
        /// The value variants.
        /// </summary>
        IEnumerable<IConsoleLiveEventFlagVariantCreateRequest> Variants { get; }
    }

    /// <inheritdoc />
    internal class ConsoleLiveEventFlagCreateRequest : IConsoleLiveEventFlagCreateRequest
    {

        /// <inheritdoc />
        [DataMember(Name="flag_id"), Preserve]
        public string FlagId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleLiveEventFlagVariantCreateRequest> Variants => _variants ?? new List<ConsoleLiveEventFlagVariantCreateRequest>(0);
        [DataMember(Name="variants"), Preserve]
        public List<ConsoleLiveEventFlagVariantCreateRequest> _variants { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "FlagId: ", FlagId, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            output = string.Concat(output, "Variants: [", string.Join(", ", Variants), "], ");
            return output;
        }
    }

    /// <summary>
    /// A live event flag list response.
    /// </summary>
    public interface IConsoleLiveEventFlagListResponse
    {

        /// <summary>
        /// The list of live event flags.
        /// </summary>
        IEnumerable<IConsoleLiveEventFlag> LiveEventFlags { get; }
    }

    /// <inheritdoc />
    internal class ConsoleLiveEventFlagListResponse : IConsoleLiveEventFlagListResponse
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleLiveEventFlag> LiveEventFlags => _liveEventFlags ?? new List<ConsoleLiveEventFlag>(0);
        [DataMember(Name="live_event_flags"), Preserve]
        public List<ConsoleLiveEventFlag> _liveEventFlags { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "LiveEventFlags: [", string.Join(", ", LiveEventFlags), "], ");
            return output;
        }
    }

    /// <summary>
    /// A live event flag's variant.
    /// </summary>
    public interface IConsoleLiveEventFlagVariant
    {

        /// <summary>
        /// Audience identifiers.
        /// </summary>
        List<string> AudienceIds { get; }

        /// <summary>
        /// Create time.
        /// </summary>
        string CreateTimeSec { get; }

        /// <summary>
        /// Identifier.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// The identifier of the live event flag.
        /// </summary>
        string LiveEventFlagId { get; }

        /// <summary>
        /// Name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Position.
        /// </summary>
        int Position { get; }

        /// <summary>
        /// Update time.
        /// </summary>
        string UpdateTimeSec { get; }

        /// <summary>
        /// Value.
        /// </summary>
        string Value { get; }
    }

    /// <inheritdoc />
    internal class ConsoleLiveEventFlagVariant : IConsoleLiveEventFlagVariant
    {

        /// <inheritdoc />
        [DataMember(Name="audience_ids"), Preserve]
        public List<string> AudienceIds { get; set; }

        /// <inheritdoc />
        [DataMember(Name="create_time_sec"), Preserve]
        public string CreateTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="live_event_flag_id"), Preserve]
        public string LiveEventFlagId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="position"), Preserve]
        public int Position { get; set; }

        /// <inheritdoc />
        [DataMember(Name="update_time_sec"), Preserve]
        public string UpdateTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "AudienceIds: [", string.Join(", ", AudienceIds), "], ");
            output = string.Concat(output, "CreateTimeSec: ", CreateTimeSec, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "LiveEventFlagId: ", LiveEventFlagId, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Position: ", Position, ", ");
            output = string.Concat(output, "UpdateTimeSec: ", UpdateTimeSec, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            return output;
        }
    }

    /// <summary>
    /// A live event flag create request.
    /// </summary>
    public interface IConsoleLiveEventFlagVariantCreateRequest
    {

        /// <summary>
        /// Audience identifiers.
        /// </summary>
        List<string> AudienceIds { get; }

        /// <summary>
        /// The variant name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// The position.
        /// </summary>
        int Position { get; }

        /// <summary>
        /// The variant value.
        /// </summary>
        string Value { get; }
    }

    /// <inheritdoc />
    internal class ConsoleLiveEventFlagVariantCreateRequest : IConsoleLiveEventFlagVariantCreateRequest
    {

        /// <inheritdoc />
        [DataMember(Name="audience_ids"), Preserve]
        public List<string> AudienceIds { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="position"), Preserve]
        public int Position { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "AudienceIds: [", string.Join(", ", AudienceIds), "], ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Position: ", Position, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            return output;
        }
    }

    /// <summary>
    /// A flag view.
    /// </summary>
    public interface IConsoleLiveEventFlagView
    {

        /// <summary>
        /// Flag id.
        /// </summary>
        string FlagId { get; }

        /// <summary>
        /// Flag name.
        /// </summary>
        string FlagName { get; }

        /// <summary>
        /// Identifier.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// Schema.
        /// </summary>
        IConsoleSchemaView Schema { get; }

        /// <summary>
        /// Value.
        /// </summary>
        string Value { get; }

        /// <summary>
        /// Variants.
        /// </summary>
        IEnumerable<ILiveEventFlagViewVariantView> Variants { get; }
    }

    /// <inheritdoc />
    internal class ConsoleLiveEventFlagView : IConsoleLiveEventFlagView
    {

        /// <inheritdoc />
        [DataMember(Name="flag_id"), Preserve]
        public string FlagId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="flag_name"), Preserve]
        public string FlagName { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleSchemaView Schema => _schema;
        [DataMember(Name="schema"), Preserve]
        public ConsoleSchemaView _schema { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<ILiveEventFlagViewVariantView> Variants => _variants ?? new List<LiveEventFlagViewVariantView>(0);
        [DataMember(Name="variants"), Preserve]
        public List<LiveEventFlagViewVariantView> _variants { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "FlagId: ", FlagId, ", ");
            output = string.Concat(output, "FlagName: ", FlagName, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Schema: ", Schema, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            output = string.Concat(output, "Variants: [", string.Join(", ", Variants), "], ");
            return output;
        }
    }

    /// <summary>
    /// The search options available for the List endpoint.
    /// </summary>
    public interface IConsoleLiveEventListRequestSearchOptions
    {

        /// <summary>
        /// Filter by Label name.
        /// </summary>
        IConsoleMultiTextValueFilterOption LabelName { get; }

        /// <summary>
        /// Filter by Name.
        /// </summary>
        IConsoleSingleTextValueFilterOption Name { get; }

        /// <summary>
        /// Filter by Status.
        /// </summary>
        IConsoleSingleEnumValueFilterOption Status { get; }
    }

    /// <inheritdoc />
    internal class ConsoleLiveEventListRequestSearchOptions : IConsoleLiveEventListRequestSearchOptions
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleMultiTextValueFilterOption LabelName => _labelName;
        [DataMember(Name="label_name"), Preserve]
        public ConsoleMultiTextValueFilterOption _labelName { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleSingleTextValueFilterOption Name => _name;
        [DataMember(Name="name"), Preserve]
        public ConsoleSingleTextValueFilterOption _name { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleSingleEnumValueFilterOption Status => _status;
        [DataMember(Name="status"), Preserve]
        public ConsoleSingleEnumValueFilterOption _status { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "LabelName: ", LabelName, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Status: ", Status, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IConsoleLiveEventMessageScheduleListResponse
    {

        /// <summary>
        /// 
        /// </summary>
        IEnumerable<IConsoleMessageSchedule> Schedules { get; }
    }

    /// <inheritdoc />
    internal class ConsoleLiveEventMessageScheduleListResponse : IConsoleLiveEventMessageScheduleListResponse
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleMessageSchedule> Schedules => _schedules ?? new List<ConsoleMessageSchedule>(0);
        [DataMember(Name="schedules"), Preserve]
        public List<ConsoleMessageSchedule> _schedules { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Schedules: [", string.Join(", ", Schedules), "], ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IConsoleLiveEventRun
    {

        /// <summary>
        /// The end time of the Live Event Run.
        /// </summary>
        string EndTimeSec { get; }

        /// <summary>
        /// The identifier of the live event run.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// The start time of the Live Event Run.
        /// </summary>
        string StartTimeSec { get; }
    }

    /// <inheritdoc />
    internal class ConsoleLiveEventRun : IConsoleLiveEventRun
    {

        /// <inheritdoc />
        [DataMember(Name="end_time_sec"), Preserve]
        public string EndTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="start_time_sec"), Preserve]
        public string StartTimeSec { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "EndTimeSec: ", EndTimeSec, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "StartTimeSec: ", StartTimeSec, ", ");
            return output;
        }
    }

    /// <summary>
    /// The identity candidacy info in an live event run.
    /// </summary>
    public interface IConsoleLiveEventRunCandidate
    {

        /// <summary>
        /// The identifier of the Identity.
        /// </summary>
        string Id { get; }
    }

    /// <inheritdoc />
    internal class ConsoleLiveEventRunCandidate : IConsoleLiveEventRunCandidate
    {

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Id: ", Id, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IConsoleLiveEventRunCandidateListResponse
    {

        /// <summary>
        /// The list of candidates.
        /// </summary>
        IEnumerable<IConsoleLiveEventRunCandidate> Identities { get; }

        /// <summary>
        /// The cursor for the next page.
        /// </summary>
        string NextCursor { get; }
    }

    /// <inheritdoc />
    internal class ConsoleLiveEventRunCandidateListResponse : IConsoleLiveEventRunCandidateListResponse
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleLiveEventRunCandidate> Identities => _identities ?? new List<ConsoleLiveEventRunCandidate>(0);
        [DataMember(Name="identities"), Preserve]
        public List<ConsoleLiveEventRunCandidate> _identities { get; set; }

        /// <inheritdoc />
        [DataMember(Name="next_cursor"), Preserve]
        public string NextCursor { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Identities: [", string.Join(", ", Identities), "], ");
            output = string.Concat(output, "NextCursor: ", NextCursor, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IConsoleLiveEventRunListResponse
    {

        /// <summary>
        /// The list of runs.
        /// </summary>
        IEnumerable<IConsoleLiveEventRun> Runs { get; }
    }

    /// <inheritdoc />
    internal class ConsoleLiveEventRunListResponse : IConsoleLiveEventRunListResponse
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleLiveEventRun> Runs => _runs ?? new List<ConsoleLiveEventRun>(0);
        [DataMember(Name="runs"), Preserve]
        public List<ConsoleLiveEventRun> _runs { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Runs: [", string.Join(", ", Runs), "], ");
            return output;
        }
    }

    /// <summary>
    /// The identity participation info in an live event run.
    /// </summary>
    public interface IConsoleLiveEventRunParticipant
    {

        /// <summary>
        /// The time the identity joined the live event.
        /// </summary>
        string CreateTimeSec { get; }

        /// <summary>
        /// The identifier of the Identity.
        /// </summary>
        string Id { get; }
    }

    /// <inheritdoc />
    internal class ConsoleLiveEventRunParticipant : IConsoleLiveEventRunParticipant
    {

        /// <inheritdoc />
        [DataMember(Name="create_time_sec"), Preserve]
        public string CreateTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "CreateTimeSec: ", CreateTimeSec, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IConsoleLiveEventRunParticipantListResponse
    {

        /// <summary>
        /// The list of participants.
        /// </summary>
        IEnumerable<IConsoleLiveEventRunParticipant> Identities { get; }

        /// <summary>
        /// The cursor for the next page.
        /// </summary>
        string NextCursor { get; }
    }

    /// <inheritdoc />
    internal class ConsoleLiveEventRunParticipantListResponse : IConsoleLiveEventRunParticipantListResponse
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleLiveEventRunParticipant> Identities => _identities ?? new List<ConsoleLiveEventRunParticipant>(0);
        [DataMember(Name="identities"), Preserve]
        public List<ConsoleLiveEventRunParticipant> _identities { get; set; }

        /// <inheritdoc />
        [DataMember(Name="next_cursor"), Preserve]
        public string NextCursor { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Identities: [", string.Join(", ", Identities), "], ");
            output = string.Concat(output, "NextCursor: ", NextCursor, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public enum ConsoleLiveEventStatus
    {
        /// <summary>
        /// The status variants of an live event.
        /// </summary>
        UNKNOWN = 0,
        /// <summary>
        /// 
        /// </summary>
        ACTIVE = 1,
        /// <summary>
        /// 
        /// </summary>
        UPCOMING = 2,
        /// <summary>
        /// 
        /// </summary>
        TERMINATED = 3,
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IConsoleLiveEventView
    {

        /// <summary>
        /// The id of the Live Event.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// The name of the Live Event.
        /// </summary>
        string Name { get; }
    }

    /// <inheritdoc />
    internal class ConsoleLiveEventView : IConsoleLiveEventView
    {

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            return output;
        }
    }

    /// <summary>
    /// A list of live events.
    /// </summary>
    public interface IConsoleLiveEvents
    {

        /// <summary>
        /// Live events.
        /// </summary>
        IEnumerable<ILiveEventListItem> LiveEvents { get; }

        /// <summary>
        /// The pagination options, if there are more pages.
        /// </summary>
        IConsolePageOptions PageOptions { get; }
    }

    /// <inheritdoc />
    internal class ConsoleLiveEvents : IConsoleLiveEvents
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<ILiveEventListItem> LiveEvents => _liveEvents ?? new List<LiveEventListItem>(0);
        [DataMember(Name="live_events"), Preserve]
        public List<LiveEventListItem> _liveEvents { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsolePageOptions PageOptions => _pageOptions;
        [DataMember(Name="page_options"), Preserve]
        public ConsolePageOptions _pageOptions { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "LiveEvents: [", string.Join(", ", LiveEvents), "], ");
            output = string.Concat(output, "PageOptions: ", PageOptions, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public enum ConsoleMessageChannelType
    {
        /// <summary>
        /// Message channel types.
        /// </summary>
        DEFAULT = 0,
        /// <summary>
        /// 
        /// </summary>
        PUSH = 1,
        /// <summary>
        ///  - PUSH: Push notification.
        /// </summary>
        EMAIL = 2,
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IConsoleMessageChannels
    {

        /// <summary>
        /// 
        /// </summary>
        IEnumerable<IConsoleMessageChannelType> Channels { get; }
    }

    /// <inheritdoc />
    internal class ConsoleMessageChannels : IConsoleMessageChannels
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleMessageChannelType> Channels => _channels ?? new List<ConsoleMessageChannelType>(0);
        [DataMember(Name="channels"), Preserve]
        public List<ConsoleMessageChannelType> _channels { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Channels: [", string.Join(", ", Channels), "], ");
            return output;
        }
    }

    /// <summary>
    /// The request to send direct messages.
    /// </summary>
    public interface IConsoleMessageDirectSendRequest
    {

        /// <summary>
        /// If applicable, channels to send this message through, per integration.
        /// </summary>
        IDictionary<string, IConsoleMessageChannels> Channels { get; }

        /// <summary>
        /// A list of recipient identity IDs.
        /// </summary>
        List<string> IdentityIds { get; }

        /// <summary>
        /// A list of integrations to use for sending the message.
        /// </summary>
        IEnumerable<IConsoleMessageIntegrationType> Integrations { get; }

        /// <summary>
        /// Whether the message should be stored in the recipient's inbox.
        /// </summary>
        bool Persist { get; }

        /// <summary>
        /// The identifier of the template used to render the message content.
        /// </summary>
        string TemplateId { get; }
    }

    /// <inheritdoc />
    internal class ConsoleMessageDirectSendRequest : IConsoleMessageDirectSendRequest
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IDictionary<string, IConsoleMessageChannels> Channels  => _channels ?? new Dictionary<string, IConsoleMessageChannels>();
        [DataMember(Name="channels"), Preserve]
        public Dictionary<string, IConsoleMessageChannels> _channels { get; set; }

        /// <inheritdoc />
        [DataMember(Name="identity_ids"), Preserve]
        public List<string> IdentityIds { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleMessageIntegrationType> Integrations => _integrations ?? new List<ConsoleMessageIntegrationType>(0);
        [DataMember(Name="integrations"), Preserve]
        public List<ConsoleMessageIntegrationType> _integrations { get; set; }

        /// <inheritdoc />
        [DataMember(Name="persist"), Preserve]
        public bool Persist { get; set; }

        /// <inheritdoc />
        [DataMember(Name="template_id"), Preserve]
        public string TemplateId { get; set; }

        public override string ToString()
        {
            var output = "";

            var channelsString = "";
            foreach (var kvp in Channels)
            {
                channelsString = string.Concat(channelsString, "{" + kvp.Key + "=" + kvp.Value + "}");
            }
            output = string.Concat(output, "Channels: [" + channelsString + "]");
            output = string.Concat(output, "IdentityIds: [", string.Join(", ", IdentityIds), "], ");
            output = string.Concat(output, "Integrations: [", string.Join(", ", Integrations), "], ");
            output = string.Concat(output, "Persist: ", Persist, ", ");
            output = string.Concat(output, "TemplateId: ", TemplateId, ", ");
            return output;
        }
    }

    /// <summary>
    /// The response for the SendDirectMessageRequest.
    /// </summary>
    public interface IConsoleMessageDirectSendResponse
    {

        /// <summary>
        /// Results for each attempted message delivery.
        /// </summary>
        IEnumerable<IMessageDirectSendResponseDeliveryResult> DeliveryResults { get; }
    }

    /// <inheritdoc />
    internal class ConsoleMessageDirectSendResponse : IConsoleMessageDirectSendResponse
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IMessageDirectSendResponseDeliveryResult> DeliveryResults => _deliveryResults ?? new List<MessageDirectSendResponseDeliveryResult>(0);
        [DataMember(Name="delivery_results"), Preserve]
        public List<MessageDirectSendResponseDeliveryResult> _deliveryResults { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "DeliveryResults: [", string.Join(", ", DeliveryResults), "], ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IConsoleMessageIntegration
    {

        /// <summary>
        /// The new configuration for APNs.
        /// </summary>
        IConsoleAppleMessageConfiguration Apns { get; }

        /// <summary>
        /// The status of the integration.
        /// </summary>
        bool Enabled { get; }

        /// <summary>
        /// The new configuration for Facebook App-to-User Notifications.
        /// </summary>
        IConsoleFacebookNotificationConfiguration FacebookNotification { get; }

        /// <summary>
        /// The new configuration for FCM.
        /// </summary>
        IConsoleFirebaseMessagingConfiguration Fcm { get; }

        /// <summary>
        /// The new configuration for OneSignal Notifications.
        /// </summary>
        IConsoleOneSignalNotificationConfiguration OnesignalNotification { get; }

        /// <summary>
        /// The name of the Message integration.
        /// </summary>
        ConsoleMessageIntegrationType Type { get; }

        /// <summary>
        /// The update time of the integration.
        /// </summary>
        string UpdateTimeSec { get; }
    }

    /// <inheritdoc />
    internal class ConsoleMessageIntegration : IConsoleMessageIntegration
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleAppleMessageConfiguration Apns => _apns;
        [DataMember(Name="apns"), Preserve]
        public ConsoleAppleMessageConfiguration _apns { get; set; }

        /// <inheritdoc />
        [DataMember(Name="enabled"), Preserve]
        public bool Enabled { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleFacebookNotificationConfiguration FacebookNotification => _facebookNotification;
        [DataMember(Name="facebook_notification"), Preserve]
        public ConsoleFacebookNotificationConfiguration _facebookNotification { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleFirebaseMessagingConfiguration Fcm => _fcm;
        [DataMember(Name="fcm"), Preserve]
        public ConsoleFirebaseMessagingConfiguration _fcm { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleOneSignalNotificationConfiguration OnesignalNotification => _onesignalNotification;
        [DataMember(Name="onesignal_notification"), Preserve]
        public ConsoleOneSignalNotificationConfiguration _onesignalNotification { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public ConsoleMessageIntegrationType Type => _type;
        [DataMember(Name="type"), Preserve]
        public ConsoleMessageIntegrationType _type { get; set; }

        /// <inheritdoc />
        [DataMember(Name="update_time_sec"), Preserve]
        public string UpdateTimeSec { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Apns: ", Apns, ", ");
            output = string.Concat(output, "Enabled: ", Enabled, ", ");
            output = string.Concat(output, "FacebookNotification: ", FacebookNotification, ", ");
            output = string.Concat(output, "Fcm: ", Fcm, ", ");
            output = string.Concat(output, "OnesignalNotification: ", OnesignalNotification, ", ");
            output = string.Concat(output, "Type: ", Type, ", ");
            output = string.Concat(output, "UpdateTimeSec: ", UpdateTimeSec, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IConsoleMessageIntegrationExport
    {

        /// <summary>
        /// The platform specific configuration as JSON.
        /// </summary>
        string Configuration { get; }

        /// <summary>
        /// The type of the message integration.
        /// </summary>
        ConsoleMessageIntegrationType Type { get; }

        /// <summary>
        /// The last time it was updated.
        /// </summary>
        string UpdateTime { get; }
    }

    /// <inheritdoc />
    internal class ConsoleMessageIntegrationExport : IConsoleMessageIntegrationExport
    {

        /// <inheritdoc />
        [DataMember(Name="configuration"), Preserve]
        public string Configuration { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public ConsoleMessageIntegrationType Type => _type;
        [DataMember(Name="type"), Preserve]
        public ConsoleMessageIntegrationType _type { get; set; }

        /// <inheritdoc />
        [DataMember(Name="update_time"), Preserve]
        public string UpdateTime { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Configuration: ", Configuration, ", ");
            output = string.Concat(output, "Type: ", Type, ", ");
            output = string.Concat(output, "UpdateTime: ", UpdateTime, ", ");
            return output;
        }
    }

    /// <summary>
    /// The list of Message integrations available and their status.
    /// </summary>
    public interface IConsoleMessageIntegrationListResponse
    {

        /// <summary>
        /// The list of integrations
        /// </summary>
        IEnumerable<IConsoleMessageIntegration> Configurations { get; }
    }

    /// <inheritdoc />
    internal class ConsoleMessageIntegrationListResponse : IConsoleMessageIntegrationListResponse
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleMessageIntegration> Configurations => _configurations ?? new List<ConsoleMessageIntegration>(0);
        [DataMember(Name="configurations"), Preserve]
        public List<ConsoleMessageIntegration> _configurations { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Configurations: [", string.Join(", ", Configurations), "], ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public enum ConsoleMessageIntegrationType
    {
        /// <summary>
        /// Message integration's names.
        /// </summary>
        UNKNOWN_MESSAGE_TYPE = 0,
        /// <summary>
        /// 
        /// </summary>
        FCM = 1,
        /// <summary>
        ///  - FCM: The variant for Google's Firebase Cloud Messaging.
        /// </summary>
        APNS = 2,
        /// <summary>
        ///  - APNS: The variant for Apple's Message system.
        /// </summary>
        FACEBOOK_NOTIFICATION = 3,
        /// <summary>
        ///  - FACEBOOK_NOTIFICATION: The variant for Facebook App-to-User Notifications.
        /// </summary>
        ONESIGNAL_NOTIFICATION = 4,
        /// <summary>
        ///  - ONESIGNAL_NOTIFICATION: The variant for OneSignal Notifications.
        /// </summary>
        WEBHOOK_NOTIFICATION = 5,
    }

    /// <summary>
    /// The MessageIntegrationUpdateRequest updates the configuration of a possible message integrations.
    /// </summary>
    public interface IConsoleMessageIntegrationUpdateRequest
    {

        /// <summary>
        /// The new configuration for APNs.
        /// </summary>
        IConsoleAppleMessageConfiguration Apns { get; }

        /// <summary>
        /// The new configuration for Facebook App-to-User Notifications.
        /// </summary>
        IConsoleFacebookNotificationConfiguration FacebookNotification { get; }

        /// <summary>
        /// The new configuration for FCM.
        /// </summary>
        IConsoleFirebaseMessagingConfiguration Fcm { get; }

        /// <summary>
        /// The new configuration for OneSignal Notifications.
        /// </summary>
        IConsoleOneSignalNotificationConfiguration OnesignalNotification { get; }
    }

    /// <inheritdoc />
    internal class ConsoleMessageIntegrationUpdateRequest : IConsoleMessageIntegrationUpdateRequest
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleAppleMessageConfiguration Apns => _apns;
        [DataMember(Name="apns"), Preserve]
        public ConsoleAppleMessageConfiguration _apns { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleFacebookNotificationConfiguration FacebookNotification => _facebookNotification;
        [DataMember(Name="facebook_notification"), Preserve]
        public ConsoleFacebookNotificationConfiguration _facebookNotification { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleFirebaseMessagingConfiguration Fcm => _fcm;
        [DataMember(Name="fcm"), Preserve]
        public ConsoleFirebaseMessagingConfiguration _fcm { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleOneSignalNotificationConfiguration OnesignalNotification => _onesignalNotification;
        [DataMember(Name="onesignal_notification"), Preserve]
        public ConsoleOneSignalNotificationConfiguration _onesignalNotification { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Apns: ", Apns, ", ");
            output = string.Concat(output, "FacebookNotification: ", FacebookNotification, ", ");
            output = string.Concat(output, "Fcm: ", Fcm, ", ");
            output = string.Concat(output, "OnesignalNotification: ", OnesignalNotification, ", ");
            return output;
        }
    }

    /// <summary>
    /// Message Schedule
    /// </summary>
    public interface IConsoleMessageSchedule
    {

        /// <summary>
        /// Audience list.
        /// </summary>
        IEnumerable<IConsoleAudienceView> Audiences { get; }

        /// <summary>
        /// Category labels.
        /// </summary>
        IEnumerable<IConsoleCategoryView> Categories { get; }

        /// <summary>
        /// If applicable, channels to send this message through, per integration.
        /// </summary>
        IDictionary<string, IConsoleMessageChannels> Channels { get; }

        /// <summary>
        /// The creation time.
        /// </summary>
        string CreateTimeSec { get; }

        /// <summary>
        /// The Cron expression for schedules.
        /// </summary>
        string CronExpr { get; }

        /// <summary>
        /// The time the schedule terminates in the case of recurring schecules.
        /// </summary>
        string EndTimeSec { get; }

        /// <summary>
        /// Audience list of exclusions.
        /// </summary>
        IEnumerable<IConsoleAudienceView> Holdouts { get; }

        /// <summary>
        /// The identifier of the schedule.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// The integrations to send this message through.
        /// </summary>
        IEnumerable<IConsoleMessageIntegrationType> Integrations { get; }

        /// <summary>
        /// The live event associated. If there is such relation.
        /// </summary>
        IConsoleLiveEventView LiveEvent { get; }

        /// <summary>
        /// The name of the schedule;
        /// </summary>
        string Name { get; }

        /// <summary>
        /// The time the next message will be sent.
        /// </summary>
        string NextSendTimeSec { get; }

        /// <summary>
        /// Offset to the reference point.
        /// </summary>
        string OffsetSec { get; }

        /// <summary>
        /// Reference point, relative to the live event.
        /// </summary>
        ConsoleReferencePoint ReferencePoint { get; }

        /// <summary>
        /// The time the schedule becomes in effect.
        /// </summary>
        string StartTimeSec { get; }

        /// <summary>
        /// The identifier of the template used to render the message's content.
        /// </summary>
        string TemplateId { get; }

        /// <summary>
        /// The update time.
        /// </summary>
        string UpdateTimeSec { get; }
    }

    /// <inheritdoc />
    internal class ConsoleMessageSchedule : IConsoleMessageSchedule
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleAudienceView> Audiences => _audiences ?? new List<ConsoleAudienceView>(0);
        [DataMember(Name="audiences"), Preserve]
        public List<ConsoleAudienceView> _audiences { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleCategoryView> Categories => _categories ?? new List<ConsoleCategoryView>(0);
        [DataMember(Name="categories"), Preserve]
        public List<ConsoleCategoryView> _categories { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IDictionary<string, IConsoleMessageChannels> Channels  => _channels ?? new Dictionary<string, IConsoleMessageChannels>();
        [DataMember(Name="channels"), Preserve]
        public Dictionary<string, IConsoleMessageChannels> _channels { get; set; }

        /// <inheritdoc />
        [DataMember(Name="create_time_sec"), Preserve]
        public string CreateTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="cron_expr"), Preserve]
        public string CronExpr { get; set; }

        /// <inheritdoc />
        [DataMember(Name="end_time_sec"), Preserve]
        public string EndTimeSec { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleAudienceView> Holdouts => _holdouts ?? new List<ConsoleAudienceView>(0);
        [DataMember(Name="holdouts"), Preserve]
        public List<ConsoleAudienceView> _holdouts { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleMessageIntegrationType> Integrations => _integrations ?? new List<ConsoleMessageIntegrationType>(0);
        [DataMember(Name="integrations"), Preserve]
        public List<ConsoleMessageIntegrationType> _integrations { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleLiveEventView LiveEvent => _liveEvent;
        [DataMember(Name="live_event"), Preserve]
        public ConsoleLiveEventView _liveEvent { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="next_send_time_sec"), Preserve]
        public string NextSendTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="offset_sec"), Preserve]
        public string OffsetSec { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public ConsoleReferencePoint ReferencePoint => _referencePoint;
        [DataMember(Name="reference_point"), Preserve]
        public ConsoleReferencePoint _referencePoint { get; set; }

        /// <inheritdoc />
        [DataMember(Name="start_time_sec"), Preserve]
        public string StartTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="template_id"), Preserve]
        public string TemplateId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="update_time_sec"), Preserve]
        public string UpdateTimeSec { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Audiences: [", string.Join(", ", Audiences), "], ");
            output = string.Concat(output, "Categories: [", string.Join(", ", Categories), "], ");

            var channelsString = "";
            foreach (var kvp in Channels)
            {
                channelsString = string.Concat(channelsString, "{" + kvp.Key + "=" + kvp.Value + "}");
            }
            output = string.Concat(output, "Channels: [" + channelsString + "]");
            output = string.Concat(output, "CreateTimeSec: ", CreateTimeSec, ", ");
            output = string.Concat(output, "CronExpr: ", CronExpr, ", ");
            output = string.Concat(output, "EndTimeSec: ", EndTimeSec, ", ");
            output = string.Concat(output, "Holdouts: [", string.Join(", ", Holdouts), "], ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Integrations: [", string.Join(", ", Integrations), "], ");
            output = string.Concat(output, "LiveEvent: ", LiveEvent, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "NextSendTimeSec: ", NextSendTimeSec, ", ");
            output = string.Concat(output, "OffsetSec: ", OffsetSec, ", ");
            output = string.Concat(output, "ReferencePoint: ", ReferencePoint, ", ");
            output = string.Concat(output, "StartTimeSec: ", StartTimeSec, ", ");
            output = string.Concat(output, "TemplateId: ", TemplateId, ", ");
            output = string.Concat(output, "UpdateTimeSec: ", UpdateTimeSec, ", ");
            return output;
        }
    }

    /// <summary>
    /// The request to create a Message Schedule.
    /// </summary>
    public interface IConsoleMessageScheduleCreateRequest
    {

        /// <summary>
        /// Audience list.
        /// </summary>
        IEnumerable<IConsoleAudienceView> Audiences { get; }

        /// <summary>
        /// Category label identifiers
        /// </summary>
        List<string> CategoryIds { get; }

        /// <summary>
        /// If applicable, channels to send this message through, per integration.
        /// </summary>
        IDictionary<string, IConsoleMessageChannels> Channels { get; }

        /// <summary>
        /// The Cron expression for schedules.
        /// </summary>
        string CronExpr { get; }

        /// <summary>
        /// The time the schedule terminates in the case of recurring schecules.
        /// </summary>
        string EndTimeSec { get; }

        /// <summary>
        /// Audience list of exclusions.
        /// </summary>
        IEnumerable<IConsoleAudienceView> Holdouts { get; }

        /// <summary>
        /// The integrations to send this message through.
        /// </summary>
        IEnumerable<IConsoleMessageIntegrationType> Integrations { get; }

        /// <summary>
        /// The name of the schedule;
        /// </summary>
        string Name { get; }

        /// <summary>
        /// The time the schedule becomes in effect.
        /// </summary>
        string StartTimeSec { get; }

        /// <summary>
        /// The identifier of the template used to render the message's content.
        /// </summary>
        string TemplateId { get; }
    }

    /// <inheritdoc />
    internal class ConsoleMessageScheduleCreateRequest : IConsoleMessageScheduleCreateRequest
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleAudienceView> Audiences => _audiences ?? new List<ConsoleAudienceView>(0);
        [DataMember(Name="audiences"), Preserve]
        public List<ConsoleAudienceView> _audiences { get; set; }

        /// <inheritdoc />
        [DataMember(Name="category_ids"), Preserve]
        public List<string> CategoryIds { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IDictionary<string, IConsoleMessageChannels> Channels  => _channels ?? new Dictionary<string, IConsoleMessageChannels>();
        [DataMember(Name="channels"), Preserve]
        public Dictionary<string, IConsoleMessageChannels> _channels { get; set; }

        /// <inheritdoc />
        [DataMember(Name="cron_expr"), Preserve]
        public string CronExpr { get; set; }

        /// <inheritdoc />
        [DataMember(Name="end_time_sec"), Preserve]
        public string EndTimeSec { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleAudienceView> Holdouts => _holdouts ?? new List<ConsoleAudienceView>(0);
        [DataMember(Name="holdouts"), Preserve]
        public List<ConsoleAudienceView> _holdouts { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleMessageIntegrationType> Integrations => _integrations ?? new List<ConsoleMessageIntegrationType>(0);
        [DataMember(Name="integrations"), Preserve]
        public List<ConsoleMessageIntegrationType> _integrations { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="start_time_sec"), Preserve]
        public string StartTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="template_id"), Preserve]
        public string TemplateId { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Audiences: [", string.Join(", ", Audiences), "], ");
            output = string.Concat(output, "CategoryIds: [", string.Join(", ", CategoryIds), "], ");

            var channelsString = "";
            foreach (var kvp in Channels)
            {
                channelsString = string.Concat(channelsString, "{" + kvp.Key + "=" + kvp.Value + "}");
            }
            output = string.Concat(output, "Channels: [" + channelsString + "]");
            output = string.Concat(output, "CronExpr: ", CronExpr, ", ");
            output = string.Concat(output, "EndTimeSec: ", EndTimeSec, ", ");
            output = string.Concat(output, "Holdouts: [", string.Join(", ", Holdouts), "], ");
            output = string.Concat(output, "Integrations: [", string.Join(", ", Integrations), "], ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "StartTimeSec: ", StartTimeSec, ", ");
            output = string.Concat(output, "TemplateId: ", TemplateId, ", ");
            return output;
        }
    }

    /// <summary>
    /// A export of a Message Schedule
    /// </summary>
    public interface IConsoleMessageScheduleExport
    {

        /// <summary>
        /// Audience list.
        /// </summary>
        IEnumerable<IConsoleAudienceView> Audiences { get; }

        /// <summary>
        /// Category label ids.
        /// </summary>
        List<string> CategoryIds { get; }

        /// <summary>
        /// If applicable, channels to send this message through, per integration.
        /// </summary>
        IDictionary<string, IConsoleMessageChannels> Channels { get; }

        /// <summary>
        /// The Cron expression for schedules.
        /// </summary>
        string CronExpr { get; }

        /// <summary>
        /// The time the schedule terminates in the case of recurring schecules.
        /// </summary>
        string EndTimeSec { get; }

        /// <summary>
        /// Audience list of exclusions.
        /// </summary>
        IEnumerable<IConsoleAudienceView> Holdouts { get; }

        /// <summary>
        /// The identifier of the schedule.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// The integrations to send this message through.
        /// </summary>
        IEnumerable<IConsoleMessageIntegrationType> Integrations { get; }

        /// <summary>
        /// The live event associated. If there is such relation.
        /// </summary>
        IConsoleLiveEventView LiveEvent { get; }

        /// <summary>
        /// The name of the schedule;
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Offset to the reference point.
        /// </summary>
        string OffsetSec { get; }

        /// <summary>
        /// Reference point, relative to the live event.
        /// </summary>
        ConsoleReferencePoint ReferencePoint { get; }

        /// <summary>
        /// The time the schedule becomes in effect.
        /// </summary>
        string StartTimeSec { get; }

        /// <summary>
        /// The identifier of the template used to render the message's content.
        /// </summary>
        string TemplateId { get; }
    }

    /// <inheritdoc />
    internal class ConsoleMessageScheduleExport : IConsoleMessageScheduleExport
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleAudienceView> Audiences => _audiences ?? new List<ConsoleAudienceView>(0);
        [DataMember(Name="audiences"), Preserve]
        public List<ConsoleAudienceView> _audiences { get; set; }

        /// <inheritdoc />
        [DataMember(Name="category_ids"), Preserve]
        public List<string> CategoryIds { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IDictionary<string, IConsoleMessageChannels> Channels  => _channels ?? new Dictionary<string, IConsoleMessageChannels>();
        [DataMember(Name="channels"), Preserve]
        public Dictionary<string, IConsoleMessageChannels> _channels { get; set; }

        /// <inheritdoc />
        [DataMember(Name="cron_expr"), Preserve]
        public string CronExpr { get; set; }

        /// <inheritdoc />
        [DataMember(Name="end_time_sec"), Preserve]
        public string EndTimeSec { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleAudienceView> Holdouts => _holdouts ?? new List<ConsoleAudienceView>(0);
        [DataMember(Name="holdouts"), Preserve]
        public List<ConsoleAudienceView> _holdouts { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleMessageIntegrationType> Integrations => _integrations ?? new List<ConsoleMessageIntegrationType>(0);
        [DataMember(Name="integrations"), Preserve]
        public List<ConsoleMessageIntegrationType> _integrations { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleLiveEventView LiveEvent => _liveEvent;
        [DataMember(Name="live_event"), Preserve]
        public ConsoleLiveEventView _liveEvent { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="offset_sec"), Preserve]
        public string OffsetSec { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public ConsoleReferencePoint ReferencePoint => _referencePoint;
        [DataMember(Name="reference_point"), Preserve]
        public ConsoleReferencePoint _referencePoint { get; set; }

        /// <inheritdoc />
        [DataMember(Name="start_time_sec"), Preserve]
        public string StartTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="template_id"), Preserve]
        public string TemplateId { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Audiences: [", string.Join(", ", Audiences), "], ");
            output = string.Concat(output, "CategoryIds: [", string.Join(", ", CategoryIds), "], ");

            var channelsString = "";
            foreach (var kvp in Channels)
            {
                channelsString = string.Concat(channelsString, "{" + kvp.Key + "=" + kvp.Value + "}");
            }
            output = string.Concat(output, "Channels: [" + channelsString + "]");
            output = string.Concat(output, "CronExpr: ", CronExpr, ", ");
            output = string.Concat(output, "EndTimeSec: ", EndTimeSec, ", ");
            output = string.Concat(output, "Holdouts: [", string.Join(", ", Holdouts), "], ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Integrations: [", string.Join(", ", Integrations), "], ");
            output = string.Concat(output, "LiveEvent: ", LiveEvent, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "OffsetSec: ", OffsetSec, ", ");
            output = string.Concat(output, "ReferencePoint: ", ReferencePoint, ", ");
            output = string.Concat(output, "StartTimeSec: ", StartTimeSec, ", ");
            output = string.Concat(output, "TemplateId: ", TemplateId, ", ");
            return output;
        }
    }

    /// <summary>
    /// The search options available for the ExperimentList endpoint.
    /// </summary>
    public interface IConsoleMessageScheduleListRequestSearchOptions
    {

        /// <summary>
        /// Filter by Label name.
        /// </summary>
        IConsoleMultiTextValueFilterOption LabelName { get; }

        /// <summary>
        /// Filter by Name name.
        /// </summary>
        IConsoleSingleTextValueFilterOption Name { get; }
    }

    /// <inheritdoc />
    internal class ConsoleMessageScheduleListRequestSearchOptions : IConsoleMessageScheduleListRequestSearchOptions
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleMultiTextValueFilterOption LabelName => _labelName;
        [DataMember(Name="label_name"), Preserve]
        public ConsoleMultiTextValueFilterOption _labelName { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleSingleTextValueFilterOption Name => _name;
        [DataMember(Name="name"), Preserve]
        public ConsoleSingleTextValueFilterOption _name { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "LabelName: ", LabelName, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            return output;
        }
    }

    /// <summary>
    /// The request to list Message Schedules.
    /// </summary>
    public interface IConsoleMessageScheduleListResponse
    {

        /// <summary>
        /// [deprecated]
        /// </summary>
        string Cursor { get; }

        /// <summary>
        /// The pagination options, if there are more pages.
        /// </summary>
        IConsolePageOptions PageOptions { get; }

        /// <summary>
        /// The list of schedules.
        /// </summary>
        IEnumerable<IConsoleMessageSchedule> Schedules { get; }
    }

    /// <inheritdoc />
    internal class ConsoleMessageScheduleListResponse : IConsoleMessageScheduleListResponse
    {

        /// <inheritdoc />
        [DataMember(Name="cursor"), Preserve]
        public string Cursor { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsolePageOptions PageOptions => _pageOptions;
        [DataMember(Name="page_options"), Preserve]
        public ConsolePageOptions _pageOptions { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleMessageSchedule> Schedules => _schedules ?? new List<ConsoleMessageSchedule>(0);
        [DataMember(Name="schedules"), Preserve]
        public List<ConsoleMessageSchedule> _schedules { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Cursor: ", Cursor, ", ");
            output = string.Concat(output, "PageOptions: ", PageOptions, ", ");
            output = string.Concat(output, "Schedules: [", string.Join(", ", Schedules), "], ");
            return output;
        }
    }

    /// <summary>
    /// Represents a configured metric.
    /// </summary>
    public interface IConsoleMetric
    {

        /// <summary>
        /// Core.
        /// </summary>
        bool Core { get; }

        /// <summary>
        /// Create time.
        /// </summary>
        string CreateTimeSec { get; }

        /// <summary>
        /// The denominator of the hybric metric (optional).
        /// </summary>
        IConsoleMetricView Denominator { get; }

        /// <summary>
        /// Description.
        /// </summary>
        string Description { get; }

        /// <summary>
        /// Event name.
        /// </summary>
        string EventName { get; }

        /// <summary>
        /// Identifier.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// Metric type.
        /// </summary>
        ConsoleMetricType MetricType { get; }

        /// <summary>
        /// Name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// The numerator of the hybric metric (optional).
        /// </summary>
        IConsoleMetricView Numerator { get; }

        /// <summary>
        /// Ordering.
        /// </summary>
        ConsoleMetricOrder Order { get; }

        /// <summary>
        /// Update time.
        /// </summary>
        string UpdateTimeSec { get; }
    }

    /// <inheritdoc />
    internal class ConsoleMetric : IConsoleMetric
    {

        /// <inheritdoc />
        [DataMember(Name="core"), Preserve]
        public bool Core { get; set; }

        /// <inheritdoc />
        [DataMember(Name="create_time_sec"), Preserve]
        public string CreateTimeSec { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleMetricView Denominator => _denominator;
        [DataMember(Name="denominator"), Preserve]
        public ConsoleMetricView _denominator { get; set; }

        /// <inheritdoc />
        [DataMember(Name="description"), Preserve]
        public string Description { get; set; }

        /// <inheritdoc />
        [DataMember(Name="event_name"), Preserve]
        public string EventName { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public ConsoleMetricType MetricType => _metricType;
        [DataMember(Name="metric_type"), Preserve]
        public ConsoleMetricType _metricType { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleMetricView Numerator => _numerator;
        [DataMember(Name="numerator"), Preserve]
        public ConsoleMetricView _numerator { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public ConsoleMetricOrder Order => _order;
        [DataMember(Name="order"), Preserve]
        public ConsoleMetricOrder _order { get; set; }

        /// <inheritdoc />
        [DataMember(Name="update_time_sec"), Preserve]
        public string UpdateTimeSec { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Core: ", Core, ", ");
            output = string.Concat(output, "CreateTimeSec: ", CreateTimeSec, ", ");
            output = string.Concat(output, "Denominator: ", Denominator, ", ");
            output = string.Concat(output, "Description: ", Description, ", ");
            output = string.Concat(output, "EventName: ", EventName, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "MetricType: ", MetricType, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Numerator: ", Numerator, ", ");
            output = string.Concat(output, "Order: ", Order, ", ");
            output = string.Concat(output, "UpdateTimeSec: ", UpdateTimeSec, ", ");
            return output;
        }
    }

    /// <summary>
    /// Request to create a new metric definition.
    /// </summary>
    public interface IConsoleMetricCreateRequest
    {

        /// <summary>
        /// Denominator metric, mandatory if the type is hybrid.
        /// </summary>
        string DenominatorMetricId { get; }

        /// <summary>
        /// Description.
        /// </summary>
        string Description { get; }

        /// <summary>
        /// Event name.
        /// </summary>
        string EventName { get; }

        /// <summary>
        /// Metric type.
        /// </summary>
        ConsoleMetricType MetricType { get; }

        /// <summary>
        /// Name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Numerator metric, mandatory if the type is hybrid.
        /// </summary>
        string NumeratorMetricId { get; }

        /// <summary>
        /// Ordering.
        /// </summary>
        ConsoleMetricOrder Order { get; }
    }

    /// <inheritdoc />
    internal class ConsoleMetricCreateRequest : IConsoleMetricCreateRequest
    {

        /// <inheritdoc />
        [DataMember(Name="denominator_metric_id"), Preserve]
        public string DenominatorMetricId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="description"), Preserve]
        public string Description { get; set; }

        /// <inheritdoc />
        [DataMember(Name="event_name"), Preserve]
        public string EventName { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public ConsoleMetricType MetricType => _metricType;
        [DataMember(Name="metric_type"), Preserve]
        public ConsoleMetricType _metricType { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="numerator_metric_id"), Preserve]
        public string NumeratorMetricId { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public ConsoleMetricOrder Order => _order;
        [DataMember(Name="order"), Preserve]
        public ConsoleMetricOrder _order { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "DenominatorMetricId: ", DenominatorMetricId, ", ");
            output = string.Concat(output, "Description: ", Description, ", ");
            output = string.Concat(output, "EventName: ", EventName, ", ");
            output = string.Concat(output, "MetricType: ", MetricType, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "NumeratorMetricId: ", NumeratorMetricId, ", ");
            output = string.Concat(output, "Order: ", Order, ", ");
            return output;
        }
    }

    /// <summary>
    /// Response to explore metrics data points
    /// </summary>
    public interface IConsoleMetricData
    {

        /// <summary>
        /// Delta indicates if this data set contains an incremental update. If delta is 'false' discard all old data.
        /// </summary>
        bool Delta { get; }

        /// <summary>
        /// Metric type.
        /// </summary>
        ConsoleMetricType MetricType { get; }

        /// <summary>
        /// Name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Ordering.
        /// </summary>
        ConsoleMetricOrder Order { get; }

        /// <summary>
        /// Zero or more data points.
        /// </summary>
        IEnumerable<IConsoleMetricDataPoint> Points { get; }
    }

    /// <inheritdoc />
    internal class ConsoleMetricData : IConsoleMetricData
    {

        /// <inheritdoc />
        [DataMember(Name="delta"), Preserve]
        public bool Delta { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public ConsoleMetricType MetricType => _metricType;
        [DataMember(Name="metric_type"), Preserve]
        public ConsoleMetricType _metricType { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public ConsoleMetricOrder Order => _order;
        [DataMember(Name="order"), Preserve]
        public ConsoleMetricOrder _order { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleMetricDataPoint> Points => _points ?? new List<ConsoleMetricDataPoint>(0);
        [DataMember(Name="points"), Preserve]
        public List<ConsoleMetricDataPoint> _points { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Delta: ", Delta, ", ");
            output = string.Concat(output, "MetricType: ", MetricType, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Order: ", Order, ", ");
            output = string.Concat(output, "Points: [", string.Join(", ", Points), "], ");
            return output;
        }
    }

    /// <summary>
    /// Request to explore metrics data points
    /// </summary>
    public interface IConsoleMetricDataGetRequest
    {

        /// <summary>
        /// End time in UTC seconds.
        /// </summary>
        string EndTimeSec { get; }

        /// <summary>
        /// Inverts the search to be an excludion by live event.
        /// </summary>
        bool ExcludeLiveEvent { get; }

        /// <summary>
        /// The experiment id to filter by on the aggregation window.
        /// </summary>
        string ExperimentPhaseId { get; }

        /// <summary>
        /// The experiment phase variant id to filter by on the aggregation window.
        /// </summary>
        string ExperimentPhaseVariantId { get; }

        /// <summary>
        /// The live event id to filter by on the aggregation window
        /// </summary>
        string LiveEventId { get; }

        /// <summary>
        /// Metric
        /// </summary>
        IConsoleMetricReference MetricQuery { get; }

        /// <summary>
        /// Start time in UTC seconds.
        /// </summary>
        string StartTimeSec { get; }

        /// <summary>
        /// Bucket width, or aggregation window.
        /// </summary>
        string Width { get; }
    }

    /// <inheritdoc />
    internal class ConsoleMetricDataGetRequest : IConsoleMetricDataGetRequest
    {

        /// <inheritdoc />
        [DataMember(Name="end_time_sec"), Preserve]
        public string EndTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="exclude_live_event"), Preserve]
        public bool ExcludeLiveEvent { get; set; }

        /// <inheritdoc />
        [DataMember(Name="experiment_phase_id"), Preserve]
        public string ExperimentPhaseId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="experiment_phase_variant_id"), Preserve]
        public string ExperimentPhaseVariantId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="live_event_id"), Preserve]
        public string LiveEventId { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleMetricReference MetricQuery => _metricQuery;
        [DataMember(Name="metric_query"), Preserve]
        public ConsoleMetricReference _metricQuery { get; set; }

        /// <inheritdoc />
        [DataMember(Name="start_time_sec"), Preserve]
        public string StartTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="width"), Preserve]
        public string Width { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "EndTimeSec: ", EndTimeSec, ", ");
            output = string.Concat(output, "ExcludeLiveEvent: ", ExcludeLiveEvent, ", ");
            output = string.Concat(output, "ExperimentPhaseId: ", ExperimentPhaseId, ", ");
            output = string.Concat(output, "ExperimentPhaseVariantId: ", ExperimentPhaseVariantId, ", ");
            output = string.Concat(output, "LiveEventId: ", LiveEventId, ", ");
            output = string.Concat(output, "MetricQuery: ", MetricQuery, ", ");
            output = string.Concat(output, "StartTimeSec: ", StartTimeSec, ", ");
            output = string.Concat(output, "Width: ", Width, ", ");
            return output;
        }
    }

    /// <summary>
    /// One point of data.
    /// </summary>
    public interface IConsoleMetricDataPoint
    {

        /// <summary>
        /// Data point key, as UTC seconds.
        /// </summary>
        string TimeSec { get; }

        /// <summary>
        /// Data point numeric value.
        /// </summary>
        double Value { get; }
    }

    /// <inheritdoc />
    internal class ConsoleMetricDataPoint : IConsoleMetricDataPoint
    {

        /// <inheritdoc />
        [DataMember(Name="time_sec"), Preserve]
        public string TimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public double Value { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "TimeSec: ", TimeSec, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            return output;
        }
    }

    /// <summary>
    /// Custom metric definition.
    /// </summary>
    public interface IConsoleMetricDefinition
    {

        /// <summary>
        /// Event Name.
        /// </summary>
        string EventName { get; }

        /// <summary>
        /// Metric type.
        /// </summary>
        ConsoleMetricType MetricType { get; }

        /// <summary>
        /// Terms used in the query (always division of the two first terms).
        /// </summary>
        IEnumerable<IConsoleMetricReference> Terms { get; }
    }

    /// <inheritdoc />
    internal class ConsoleMetricDefinition : IConsoleMetricDefinition
    {

        /// <inheritdoc />
        [DataMember(Name="event_name"), Preserve]
        public string EventName { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public ConsoleMetricType MetricType => _metricType;
        [DataMember(Name="metric_type"), Preserve]
        public ConsoleMetricType _metricType { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleMetricReference> Terms => _terms ?? new List<ConsoleMetricReference>(0);
        [DataMember(Name="terms"), Preserve]
        public List<ConsoleMetricReference> _terms { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "EventName: ", EventName, ", ");
            output = string.Concat(output, "MetricType: ", MetricType, ", ");
            output = string.Concat(output, "Terms: [", string.Join(", ", Terms), "], ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IConsoleMetricExport
    {

        /// <summary>
        /// Core.
        /// </summary>
        bool Core { get; }

        /// <summary>
        /// The denominator of the hybric metric (optional).
        /// </summary>
        IConsoleMetricView Denominator { get; }

        /// <summary>
        /// Description.
        /// </summary>
        string Description { get; }

        /// <summary>
        /// Event name.
        /// </summary>
        string EventName { get; }

        /// <summary>
        /// Identifier.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// Metric type.
        /// </summary>
        ConsoleMetricType MetricType { get; }

        /// <summary>
        /// Name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// The numerator of the hybric metric (optional).
        /// </summary>
        IConsoleMetricView Numerator { get; }

        /// <summary>
        /// Ordering.
        /// </summary>
        ConsoleMetricOrder Order { get; }
    }

    /// <inheritdoc />
    internal class ConsoleMetricExport : IConsoleMetricExport
    {

        /// <inheritdoc />
        [DataMember(Name="core"), Preserve]
        public bool Core { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleMetricView Denominator => _denominator;
        [DataMember(Name="denominator"), Preserve]
        public ConsoleMetricView _denominator { get; set; }

        /// <inheritdoc />
        [DataMember(Name="description"), Preserve]
        public string Description { get; set; }

        /// <inheritdoc />
        [DataMember(Name="event_name"), Preserve]
        public string EventName { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public ConsoleMetricType MetricType => _metricType;
        [DataMember(Name="metric_type"), Preserve]
        public ConsoleMetricType _metricType { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleMetricView Numerator => _numerator;
        [DataMember(Name="numerator"), Preserve]
        public ConsoleMetricView _numerator { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public ConsoleMetricOrder Order => _order;
        [DataMember(Name="order"), Preserve]
        public ConsoleMetricOrder _order { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Core: ", Core, ", ");
            output = string.Concat(output, "Denominator: ", Denominator, ", ");
            output = string.Concat(output, "Description: ", Description, ", ");
            output = string.Concat(output, "EventName: ", EventName, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "MetricType: ", MetricType, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Numerator: ", Numerator, ", ");
            output = string.Concat(output, "Order: ", Order, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public enum ConsoleMetricOrder
    {
        /// <summary>
        /// Order of metric.
        /// </summary>
        HIGH = 0,
        /// <summary>
        /// 
        /// </summary>
        LOW = 1,
    }

    /// <summary>
    /// Wrapper message to allow nesting of MetricDefinition or reference by metricId
    /// </summary>
    public interface IConsoleMetricReference
    {

        /// <summary>
        /// 
        /// </summary>
        IConsoleMetricDefinition Definition { get; }

        /// <summary>
        /// 
        /// </summary>
        string MetricId { get; }
    }

    /// <inheritdoc />
    internal class ConsoleMetricReference : IConsoleMetricReference
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleMetricDefinition Definition => _definition;
        [DataMember(Name="definition"), Preserve]
        public ConsoleMetricDefinition _definition { get; set; }

        /// <inheritdoc />
        [DataMember(Name="metric_id"), Preserve]
        public string MetricId { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Definition: ", Definition, ", ");
            output = string.Concat(output, "MetricId: ", MetricId, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public enum ConsoleMetricType
    {
        /// <summary>
        /// Type of metric.
        /// </summary>
        BINOMIAL = 0,
        /// <summary>
        /// 
        /// </summary>
        COUNT = 1,
        /// <summary>
        ///  - BINOMIAL: True/false or present/absent.
        /// </summary>
        SUM = 2,
        /// <summary>
        ///  - COUNT: Count.
        /// </summary>
        DURATION = 3,
        /// <summary>
        ///  - SUM: Sum.
        /// </summary>
        REVENUE = 4,
        /// <summary>
        ///  - DURATION: Time duration.
        /// </summary>
        HYBRID = 5,
    }

    /// <summary>
    /// A metric view.
    /// </summary>
    public interface IConsoleMetricView
    {

        /// <summary>
        /// Identifier.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// Name.
        /// </summary>
        string Name { get; }
    }

    /// <inheritdoc />
    internal class ConsoleMetricView : IConsoleMetricView
    {

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            return output;
        }
    }

    /// <summary>
    /// A list of metrics.
    /// </summary>
    public interface IConsoleMetrics
    {

        /// <summary>
        /// Metrics.
        /// </summary>
        IEnumerable<IConsoleMetric> Metrics { get; }
    }

    /// <inheritdoc />
    internal class ConsoleMetrics : IConsoleMetrics
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleMetric> Metrics => _metrics ?? new List<ConsoleMetric>(0);
        [DataMember(Name="metrics"), Preserve]
        public List<ConsoleMetric> _metrics { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Metrics: [", string.Join(", ", Metrics), "], ");
            return output;
        }
    }

    /// <summary>
    /// The MultiTextValueFilterOption specifies the operation to apply to multi-value text fields. Only a single operation can be used at one time.
    /// </summary>
    public interface IConsoleMultiTextValueFilterOption
    {

        /// <summary>
        /// Filter by elements matching all parameters.
        /// </summary>
        List<string> And { get; }

        /// <summary>
        /// Filter by elements matching one of the parameters.
        /// </summary>
        List<string> Or { get; }
    }

    /// <inheritdoc />
    internal class ConsoleMultiTextValueFilterOption : IConsoleMultiTextValueFilterOption
    {

        /// <inheritdoc />
        [DataMember(Name="and"), Preserve]
        public List<string> And { get; set; }

        /// <inheritdoc />
        [DataMember(Name="or"), Preserve]
        public List<string> Or { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "And: [", string.Join(", ", And), "], ");
            output = string.Concat(output, "Or: [", string.Join(", ", Or), "], ");
            return output;
        }
    }

    /// <summary>
    /// The configuration necessary to integrate with OneSignal Notifications.
    /// </summary>
    public interface IConsoleOneSignalNotificationConfiguration
    {

        /// <summary>
        /// 
        /// </summary>
        string ApiKey { get; }

        /// <summary>
        /// 
        /// </summary>
        string AppId { get; }
    }

    /// <inheritdoc />
    internal class ConsoleOneSignalNotificationConfiguration : IConsoleOneSignalNotificationConfiguration
    {

        /// <inheritdoc />
        [DataMember(Name="api_key"), Preserve]
        public string ApiKey { get; set; }

        /// <inheritdoc />
        [DataMember(Name="app_id"), Preserve]
        public string AppId { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "ApiKey: ", ApiKey, ", ");
            output = string.Concat(output, "AppId: ", AppId, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IConsolePageOptions
    {

        /// <summary>
        /// Cursor, if there are next pages.
        /// </summary>
        string NextCursor { get; }

        /// <summary>
        /// Cursor, if there are prev pages.
        /// </summary>
        string PrevCursor { get; }
    }

    /// <inheritdoc />
    internal class ConsolePageOptions : IConsolePageOptions
    {

        /// <inheritdoc />
        [DataMember(Name="next_cursor"), Preserve]
        public string NextCursor { get; set; }

        /// <inheritdoc />
        [DataMember(Name="prev_cursor"), Preserve]
        public string PrevCursor { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "NextCursor: ", NextCursor, ", ");
            output = string.Concat(output, "PrevCursor: ", PrevCursor, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IConsolePaginationOptions
    {

        /// <summary>
        /// Cursor to the next page.
        /// </summary>
        string Cursor { get; }

        /// <summary>
        /// Limit of results to return.
        /// </summary>
        int Limit { get; }
    }

    /// <inheritdoc />
    internal class ConsolePaginationOptions : IConsolePaginationOptions
    {

        /// <inheritdoc />
        [DataMember(Name="cursor"), Preserve]
        public string Cursor { get; set; }

        /// <inheritdoc />
        [DataMember(Name="limit"), Preserve]
        public int Limit { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Cursor: ", Cursor, ", ");
            output = string.Concat(output, "Limit: ", Limit, ", ");
            return output;
        }
    }

    /// <summary>
    /// The possible actions that can done over a resource.
    /// </summary>
    public interface IConsolePermissions
    {

        /// <summary>
        /// Delete a resource.
        /// </summary>
        bool Delete { get; }

        /// <summary>
        /// Read a resource.
        /// </summary>
        bool Read { get; }

        /// <summary>
        /// Create and/or modify a resource.
        /// </summary>
        bool Write { get; }
    }

    /// <inheritdoc />
    internal class ConsolePermissions : IConsolePermissions
    {

        /// <inheritdoc />
        [DataMember(Name="delete"), Preserve]
        public bool Delete { get; set; }

        /// <inheritdoc />
        [DataMember(Name="read"), Preserve]
        public bool Read { get; set; }

        /// <inheritdoc />
        [DataMember(Name="write"), Preserve]
        public bool Write { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Delete: ", Delete, ", ");
            output = string.Concat(output, "Read: ", Read, ", ");
            output = string.Concat(output, "Write: ", Write, ", ");
            return output;
        }
    }

    /// <summary>
    /// Properties associated with an identity.
    /// </summary>
    public interface IConsoleProperties
    {

        /// <summary>
        /// Event computed properties.
        /// </summary>
        IDictionary<string, string> Computed { get; }

        /// <summary>
        /// Event custom properties.
        /// </summary>
        IDictionary<string, string> Custom { get; }

        /// <summary>
        /// Event default properties.
        /// </summary>
        IDictionary<string, string> Default { get; }
    }

    /// <inheritdoc />
    internal class ConsoleProperties : IConsoleProperties
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IDictionary<string, string> Computed => _computed ?? new Dictionary<string, string>();
        [DataMember(Name="computed"), Preserve]
        public Dictionary<string, string> _computed { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IDictionary<string, string> Custom => _custom ?? new Dictionary<string, string>();
        [DataMember(Name="custom"), Preserve]
        public Dictionary<string, string> _custom { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IDictionary<string, string> Default => _default ?? new Dictionary<string, string>();
        [DataMember(Name="default"), Preserve]
        public Dictionary<string, string> _default { get; set; }

        public override string ToString()
        {
            var output = "";

            var computedString = "";
            foreach (var kvp in Computed)
            {
                computedString = string.Concat(computedString, "{" + kvp.Key + "=" + kvp.Value + "}");
            }
            output = string.Concat(output, "Computed: [" + computedString + "]");

            var customString = "";
            foreach (var kvp in Custom)
            {
                customString = string.Concat(customString, "{" + kvp.Key + "=" + kvp.Value + "}");
            }
            output = string.Concat(output, "Custom: [" + customString + "]");

            var defaultString = "";
            foreach (var kvp in Default)
            {
                defaultString = string.Concat(defaultString, "{" + kvp.Key + "=" + kvp.Value + "}");
            }
            output = string.Concat(output, "Default: [" + defaultString + "]");
            return output;
        }
    }

    /// <summary>
    /// An individual custom property configuration.
    /// </summary>
    public interface IConsolePropertyConfiguration
    {

        /// <summary>
        /// Create time.
        /// </summary>
        string CreateTimeSec { get; }

        /// <summary>
        /// Description.
        /// </summary>
        string Description { get; }

        /// <summary>
        /// Name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Schema validator.
        /// </summary>
        ISatoriconsoleSchema Schema { get; }
    }

    /// <inheritdoc />
    internal class ConsolePropertyConfiguration : IConsolePropertyConfiguration
    {

        /// <inheritdoc />
        [DataMember(Name="create_time_sec"), Preserve]
        public string CreateTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="description"), Preserve]
        public string Description { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public ISatoriconsoleSchema Schema => _schema;
        [DataMember(Name="schema"), Preserve]
        public SatoriconsoleSchema _schema { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "CreateTimeSec: ", CreateTimeSec, ", ");
            output = string.Concat(output, "Description: ", Description, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Schema: ", Schema, ", ");
            return output;
        }
    }

    /// <summary>
    /// Request to create a new custom property configuration.
    /// </summary>
    public interface IConsolePropertyConfigurationCreateRequest
    {

        /// <summary>
        /// Description.
        /// </summary>
        string Description { get; }

        /// <summary>
        /// Name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Schema validator id.
        /// </summary>
        string SchemaId { get; }
    }

    /// <inheritdoc />
    internal class ConsolePropertyConfigurationCreateRequest : IConsolePropertyConfigurationCreateRequest
    {

        /// <inheritdoc />
        [DataMember(Name="description"), Preserve]
        public string Description { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="schema_id"), Preserve]
        public string SchemaId { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Description: ", Description, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "SchemaId: ", SchemaId, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IConsolePropertyConfigurationExport
    {

        /// <summary>
        /// Description.
        /// </summary>
        string Description { get; }

        /// <summary>
        /// Name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Schema validator.
        /// </summary>
        string SchemaId { get; }
    }

    /// <inheritdoc />
    internal class ConsolePropertyConfigurationExport : IConsolePropertyConfigurationExport
    {

        /// <inheritdoc />
        [DataMember(Name="description"), Preserve]
        public string Description { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="schema_id"), Preserve]
        public string SchemaId { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Description: ", Description, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "SchemaId: ", SchemaId, ", ");
            return output;
        }
    }

    /// <summary>
    /// A set of property configurations.
    /// </summary>
    public interface IConsolePropertyConfigurations
    {

        /// <summary>
        /// Zero or more custom property configurations.
        /// </summary>
        IEnumerable<IConsolePropertyConfiguration> Custom { get; }

        /// <summary>
        /// Zero or more default property configurations.
        /// </summary>
        IEnumerable<IConsolePropertyConfiguration> Default { get; }
    }

    /// <inheritdoc />
    internal class ConsolePropertyConfigurations : IConsolePropertyConfigurations
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsolePropertyConfiguration> Custom => _custom ?? new List<ConsolePropertyConfiguration>(0);
        [DataMember(Name="custom"), Preserve]
        public List<ConsolePropertyConfiguration> _custom { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsolePropertyConfiguration> Default => _default ?? new List<ConsolePropertyConfiguration>(0);
        [DataMember(Name="default"), Preserve]
        public List<ConsolePropertyConfiguration> _default { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Custom: [", string.Join(", ", Custom), "], ");
            output = string.Concat(output, "Default: [", string.Join(", ", Default), "], ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IConsolePropertyConfigurationsExport
    {

        /// <summary>
        /// Zero or more custom property configurations.
        /// </summary>
        IEnumerable<IConsolePropertyConfigurationExport> Custom { get; }
    }

    /// <inheritdoc />
    internal class ConsolePropertyConfigurationsExport : IConsolePropertyConfigurationsExport
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsolePropertyConfigurationExport> Custom => _custom ?? new List<ConsolePropertyConfigurationExport>(0);
        [DataMember(Name="custom"), Preserve]
        public List<ConsolePropertyConfigurationExport> _custom { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Custom: [", string.Join(", ", Custom), "], ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public enum ConsoleReferencePoint
    {
        /// <summary>
        ///  - START: Use the start time as a point of reference.
        /// </summary>
        START = 0,
        /// <summary>
        ///  - END: Use the end time as a point of reference.
        /// </summary>
        END = 1,
    }

    /// <summary>
    /// A rejected event.
    /// </summary>
    public interface IConsoleRejectedEvent
    {

        /// <summary>
        /// The wrapped client event.
        /// </summary>
        IConsoleWrappedEvent Event { get; }

        /// <summary>
        /// Identifier of the rejection.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// The reason of the rejection.
        /// </summary>
        RejectedEventReason Reason { get; }
    }

    /// <inheritdoc />
    internal class ConsoleRejectedEvent : IConsoleRejectedEvent
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleWrappedEvent Event => _event;
        [DataMember(Name="event"), Preserve]
        public ConsoleWrappedEvent _event { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public RejectedEventReason Reason => _reason;
        [DataMember(Name="reason"), Preserve]
        public RejectedEventReason _reason { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Event: ", Event, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Reason: ", Reason, ", ");
            return output;
        }
    }

    /// <summary>
    /// A list of rejected events.
    /// </summary>
    public interface IConsoleRejectedEvents
    {

        /// <summary>
        /// Zero or more rejected events.
        /// </summary>
        IEnumerable<IConsoleRejectedEvent> Events { get; }
    }

    /// <inheritdoc />
    internal class ConsoleRejectedEvents : IConsoleRejectedEvents
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleRejectedEvent> Events => _events ?? new List<ConsoleRejectedEvent>(0);
        [DataMember(Name="events"), Preserve]
        public List<ConsoleRejectedEvent> _events { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Events: [", string.Join(", ", Events), "], ");
            return output;
        }
    }

    /// <summary>
    /// The available filters for the RetentionStatsGet RPC.
    /// </summary>
    public interface IConsoleRetentionStatsFilters
    {

        /// <summary>
        /// The list of activities.
        /// </summary>
        IEnumerable<IConsoleRetentionStatsFiltersActivity> Activities { get; }

        /// <summary>
        /// 
        /// </summary>
        IEnumerable<IRetentionStatsFiltersCountry> Countries { get; }

        /// <summary>
        /// The list of game versions.
        /// </summary>
        IEnumerable<IConsoleRetentionStatsFiltersBasicFilter> GameVersions { get; }

        /// <summary>
        /// The list of platforms.
        /// </summary>
        IEnumerable<IConsoleRetentionStatsFiltersBasicFilter> Platform { get; }
    }

    /// <inheritdoc />
    internal class ConsoleRetentionStatsFilters : IConsoleRetentionStatsFilters
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleRetentionStatsFiltersActivity> Activities => _activities ?? new List<ConsoleRetentionStatsFiltersActivity>(0);
        [DataMember(Name="activities"), Preserve]
        public List<ConsoleRetentionStatsFiltersActivity> _activities { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IRetentionStatsFiltersCountry> Countries => _countries ?? new List<RetentionStatsFiltersCountry>(0);
        [DataMember(Name="countries"), Preserve]
        public List<RetentionStatsFiltersCountry> _countries { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleRetentionStatsFiltersBasicFilter> GameVersions => _gameVersions ?? new List<ConsoleRetentionStatsFiltersBasicFilter>(0);
        [DataMember(Name="game_versions"), Preserve]
        public List<ConsoleRetentionStatsFiltersBasicFilter> _gameVersions { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleRetentionStatsFiltersBasicFilter> Platform => _platform ?? new List<ConsoleRetentionStatsFiltersBasicFilter>(0);
        [DataMember(Name="platform"), Preserve]
        public List<ConsoleRetentionStatsFiltersBasicFilter> _platform { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Activities: [", string.Join(", ", Activities), "], ");
            output = string.Concat(output, "Countries: [", string.Join(", ", Countries), "], ");
            output = string.Concat(output, "GameVersions: [", string.Join(", ", GameVersions), "], ");
            output = string.Concat(output, "Platform: [", string.Join(", ", Platform), "], ");
            return output;
        }
    }

    /// <summary>
    /// A activity (Live Event or Experiment)
    /// </summary>
    public interface IConsoleRetentionStatsFiltersActivity
    {

        /// <summary>
        /// The id of the activity.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// The name of the activity.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// The number of identities that match the filter.
        /// </summary>
        string Size { get; }

        /// <summary>
        /// The type of the activity.
        /// </summary>
        ConsoleRetentionStatsFiltersActivityActivityType Type { get; }

        /// <summary>
        /// The list of variants of the activity.
        /// </summary>
        IEnumerable<IConsoleRetentionStatsFiltersActivityVariant> Variants { get; }
    }

    /// <inheritdoc />
    internal class ConsoleRetentionStatsFiltersActivity : IConsoleRetentionStatsFiltersActivity
    {

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="size"), Preserve]
        public string Size { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public ConsoleRetentionStatsFiltersActivityActivityType Type => _type;
        [DataMember(Name="type"), Preserve]
        public ConsoleRetentionStatsFiltersActivityActivityType _type { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleRetentionStatsFiltersActivityVariant> Variants => _variants ?? new List<ConsoleRetentionStatsFiltersActivityVariant>(0);
        [DataMember(Name="variants"), Preserve]
        public List<ConsoleRetentionStatsFiltersActivityVariant> _variants { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Size: ", Size, ", ");
            output = string.Concat(output, "Type: ", Type, ", ");
            output = string.Concat(output, "Variants: [", string.Join(", ", Variants), "], ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public enum ConsoleRetentionStatsFiltersActivityActivityType
    {
        /// <summary>
        /// 
        /// </summary>
        NONE = 0,
        /// <summary>
        /// 
        /// </summary>
        LIVE_EVENT = 1,
        /// <summary>
        /// 
        /// </summary>
        EXPERIMENT = 2,
    }

    /// <summary>
    /// A activity variant.
    /// </summary>
    public interface IConsoleRetentionStatsFiltersActivityVariant
    {

        /// <summary>
        /// The identifier of the variant.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// The name of the variant.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// The number of identities that match the filter.
        /// </summary>
        string Size { get; }
    }

    /// <inheritdoc />
    internal class ConsoleRetentionStatsFiltersActivityVariant : IConsoleRetentionStatsFiltersActivityVariant
    {

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="size"), Preserve]
        public string Size { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Size: ", Size, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IConsoleRetentionStatsFiltersBasicFilter
    {

        /// <summary>
        /// The number of identities that match the filter.
        /// </summary>
        string Size { get; }

        /// <summary>
        /// The value to filter by.
        /// </summary>
        string Value { get; }
    }

    /// <inheritdoc />
    internal class ConsoleRetentionStatsFiltersBasicFilter : IConsoleRetentionStatsFiltersBasicFilter
    {

        /// <inheritdoc />
        [DataMember(Name="size"), Preserve]
        public string Size { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Size: ", Size, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            return output;
        }
    }

    /// <summary>
    /// The retention of identities.
    /// </summary>
    public interface IConsoleRetentionStatsGetResponse
    {

        /// <summary>
        /// The stats over the lifetime of the game.
        /// </summary>
        IConsoleRetentionStatsGetResponseLifetimeStats GameLifetime { get; }

        /// <summary>
        /// The stats on lifetime day N of the game. Indexes 0..7 are for day 0..7 while 8 and 9 indexes are for day 14 and 30.
        /// </summary>
        IEnumerable<IConsoleRetentionStatsGetResponseLifetimeStats> LifetimeOnDay { get; }

        /// <summary>
        /// The list of days and their respective retention values.
        /// </summary>
        IEnumerable<IConsoleCohortRetentionStats> Retentions { get; }
    }

    /// <inheritdoc />
    internal class ConsoleRetentionStatsGetResponse : IConsoleRetentionStatsGetResponse
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleRetentionStatsGetResponseLifetimeStats GameLifetime => _gameLifetime;
        [DataMember(Name="game_lifetime"), Preserve]
        public ConsoleRetentionStatsGetResponseLifetimeStats _gameLifetime { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleRetentionStatsGetResponseLifetimeStats> LifetimeOnDay => _lifetimeOnDay ?? new List<ConsoleRetentionStatsGetResponseLifetimeStats>(0);
        [DataMember(Name="lifetime_on_day"), Preserve]
        public List<ConsoleRetentionStatsGetResponseLifetimeStats> _lifetimeOnDay { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleCohortRetentionStats> Retentions => _retentions ?? new List<ConsoleCohortRetentionStats>(0);
        [DataMember(Name="retentions"), Preserve]
        public List<ConsoleCohortRetentionStats> _retentions { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "GameLifetime: ", GameLifetime, ", ");
            output = string.Concat(output, "LifetimeOnDay: [", string.Join(", ", LifetimeOnDay), "], ");
            output = string.Concat(output, "Retentions: [", string.Join(", ", Retentions), "], ");
            return output;
        }
    }

    /// <summary>
    /// The session and playtime stats.
    /// </summary>
    public interface IConsoleRetentionStatsGetResponseLifetimeStats
    {

        /// <summary>
        /// The average Playtime over the lifetime of the game.
        /// </summary>
        double AvgPlaytimeDuration { get; }

        /// <summary>
        /// The average Session count over the lifetime of the game.
        /// </summary>
        double AvgSessionCount { get; }

        /// <summary>
        /// The average Session duration over the lifetime of the game.
        /// </summary>
        double AvgSessionDuration { get; }
    }

    /// <inheritdoc />
    internal class ConsoleRetentionStatsGetResponseLifetimeStats : IConsoleRetentionStatsGetResponseLifetimeStats
    {

        /// <inheritdoc />
        [DataMember(Name="avg_playtime_duration"), Preserve]
        public double AvgPlaytimeDuration { get; set; }

        /// <inheritdoc />
        [DataMember(Name="avg_session_count"), Preserve]
        public double AvgSessionCount { get; set; }

        /// <inheritdoc />
        [DataMember(Name="avg_session_duration"), Preserve]
        public double AvgSessionDuration { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "AvgPlaytimeDuration: ", AvgPlaytimeDuration, ", ");
            output = string.Concat(output, "AvgSessionCount: ", AvgSessionCount, ", ");
            output = string.Concat(output, "AvgSessionDuration: ", AvgSessionDuration, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IConsoleScheduleView
    {

        /// <summary>
        /// The identifier of the schedule.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// The live event data, if any.
        /// </summary>
        IConsoleLiveEventView LiveEvent { get; }

        /// <summary>
        /// The name of the schedule.
        /// </summary>
        string Name { get; }
    }

    /// <inheritdoc />
    internal class ConsoleScheduleView : IConsoleScheduleView
    {

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleLiveEventView LiveEvent => _liveEvent;
        [DataMember(Name="live_event"), Preserve]
        public ConsoleLiveEventView _liveEvent { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "LiveEvent: ", LiveEvent, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            return output;
        }
    }

    /// <summary>
    /// Request to create a schema.
    /// </summary>
    public interface IConsoleSchemaCreateRequest
    {

        /// <summary>
        /// Description.
        /// </summary>
        string Description { get; }

        /// <summary>
        /// Name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Value.
        /// </summary>
        string Value { get; }
    }

    /// <inheritdoc />
    internal class ConsoleSchemaCreateRequest : IConsoleSchemaCreateRequest
    {

        /// <inheritdoc />
        [DataMember(Name="description"), Preserve]
        public string Description { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Description: ", Description, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IConsoleSchemaExport
    {

        /// <summary>
        /// Description.
        /// </summary>
        string Description { get; }

        /// <summary>
        /// Identifier.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// Name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Value.
        /// </summary>
        string Value { get; }
    }

    /// <inheritdoc />
    internal class ConsoleSchemaExport : IConsoleSchemaExport
    {

        /// <inheritdoc />
        [DataMember(Name="description"), Preserve]
        public string Description { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Description: ", Description, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            return output;
        }
    }

    /// <summary>
    /// A payload schema template.
    /// </summary>
    public interface IConsoleSchemaTemplate
    {

        /// <summary>
        /// Schema form view json.
        /// </summary>
        string FormJson { get; }

        /// <summary>
        /// Schema identifier.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// True if this schema describes a JSON object.
        /// </summary>
        bool IsObject { get; }

        /// <summary>
        /// Schema raw json template.
        /// </summary>
        string Template { get; }

        /// <summary>
        /// Schema Type.
        /// </summary>
        ConsoleSchemaType Type { get; }
    }

    /// <inheritdoc />
    internal class ConsoleSchemaTemplate : IConsoleSchemaTemplate
    {

        /// <inheritdoc />
        [DataMember(Name="form_json"), Preserve]
        public string FormJson { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="is_object"), Preserve]
        public bool IsObject { get; set; }

        /// <inheritdoc />
        [DataMember(Name="template"), Preserve]
        public string Template { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public ConsoleSchemaType Type => _type;
        [DataMember(Name="type"), Preserve]
        public ConsoleSchemaType _type { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "FormJson: ", FormJson, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "IsObject: ", IsObject, ", ");
            output = string.Concat(output, "Template: ", Template, ", ");
            output = string.Concat(output, "Type: ", Type, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public enum ConsoleSchemaType
    {
        /// <summary>
        /// 
        /// </summary>
        SCH_CUSTOM = 0,
        /// <summary>
        /// 
        /// </summary>
        SCH_OBJECT = 1,
        /// <summary>
        /// 
        /// </summary>
        SCH_STRING = 2,
        /// <summary>
        /// 
        /// </summary>
        SCH_NUMBER = 3,
        /// <summary>
        /// 
        /// </summary>
        SCH_INTEGER = 4,
        /// <summary>
        /// 
        /// </summary>
        SCH_ARRAY = 5,
        /// <summary>
        /// 
        /// </summary>
        SCH_BOOLEAN = 6,
        /// <summary>
        /// 
        /// </summary>
        SCH_NULL = 7,
    }

    /// <summary>
    /// An view into an Schema.
    /// </summary>
    public interface IConsoleSchemaView
    {

        /// <summary>
        /// Identifier.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// Name.
        /// </summary>
        string Name { get; }
    }

    /// <inheritdoc />
    internal class ConsoleSchemaView : IConsoleSchemaView
    {

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            return output;
        }
    }

    /// <summary>
    /// A list of schemas.
    /// </summary>
    public interface IConsoleSchemas
    {

        /// <summary>
        /// 
        /// </summary>
        IEnumerable<ISatoriconsoleSchema> Schemas { get; }
    }

    /// <inheritdoc />
    internal class ConsoleSchemas : IConsoleSchemas
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<ISatoriconsoleSchema> Schemas => _schemas ?? new List<SatoriconsoleSchema>(0);
        [DataMember(Name="schemas"), Preserve]
        public List<SatoriconsoleSchema> _schemas { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Schemas: [", string.Join(", ", Schemas), "], ");
            return output;
        }
    }

    /// <summary>
    /// Server key.
    /// </summary>
    public interface IConsoleServerKey
    {

        /// <summary>
        /// ACL.
        /// </summary>
        IDictionary<string, IConsolePermissions> Acl { get; }

        /// <summary>
        /// Create time.
        /// </summary>
        string CreateTimeSec { get; }

        /// <summary>
        /// Key name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Update time.
        /// </summary>
        string UpdateTimeSec { get; }

        /// <summary>
        /// Value.
        /// </summary>
        string Value { get; }
    }

    /// <inheritdoc />
    internal class ConsoleServerKey : IConsoleServerKey
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IDictionary<string, IConsolePermissions> Acl  => _acl ?? new Dictionary<string, IConsolePermissions>();
        [DataMember(Name="acl"), Preserve]
        public Dictionary<string, IConsolePermissions> _acl { get; set; }

        /// <inheritdoc />
        [DataMember(Name="create_time_sec"), Preserve]
        public string CreateTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="update_time_sec"), Preserve]
        public string UpdateTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        public override string ToString()
        {
            var output = "";

            var aclString = "";
            foreach (var kvp in Acl)
            {
                aclString = string.Concat(aclString, "{" + kvp.Key + "=" + kvp.Value + "}");
            }
            output = string.Concat(output, "Acl: [" + aclString + "]");
            output = string.Concat(output, "CreateTimeSec: ", CreateTimeSec, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "UpdateTimeSec: ", UpdateTimeSec, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            return output;
        }
    }

    /// <summary>
    /// Request to create a new server key.
    /// </summary>
    public interface IConsoleServerKeyCreateRequest
    {

        /// <summary>
        /// ACL.
        /// </summary>
        IDictionary<string, IConsolePermissions> Acl { get; }

        /// <summary>
        /// Key name.
        /// </summary>
        string Name { get; }
    }

    /// <inheritdoc />
    internal class ConsoleServerKeyCreateRequest : IConsoleServerKeyCreateRequest
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IDictionary<string, IConsolePermissions> Acl  => _acl ?? new Dictionary<string, IConsolePermissions>();
        [DataMember(Name="acl"), Preserve]
        public Dictionary<string, IConsolePermissions> _acl { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        public override string ToString()
        {
            var output = "";

            var aclString = "";
            foreach (var kvp in Acl)
            {
                aclString = string.Concat(aclString, "{" + kvp.Key + "=" + kvp.Value + "}");
            }
            output = string.Concat(output, "Acl: [" + aclString + "]");
            output = string.Concat(output, "Name: ", Name, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IConsoleServerKeyExport
    {

        /// <summary>
        /// ACL.
        /// </summary>
        IDictionary<string, IConsolePermissions> Acl { get; }

        /// <summary>
        /// Key name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Value.
        /// </summary>
        string Value { get; }
    }

    /// <inheritdoc />
    internal class ConsoleServerKeyExport : IConsoleServerKeyExport
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IDictionary<string, IConsolePermissions> Acl  => _acl ?? new Dictionary<string, IConsolePermissions>();
        [DataMember(Name="acl"), Preserve]
        public Dictionary<string, IConsolePermissions> _acl { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        public override string ToString()
        {
            var output = "";

            var aclString = "";
            foreach (var kvp in Acl)
            {
                aclString = string.Concat(aclString, "{" + kvp.Key + "=" + kvp.Value + "}");
            }
            output = string.Concat(output, "Acl: [" + aclString + "]");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IConsoleServerKeyView
    {

        /// <summary>
        /// Key name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Value.
        /// </summary>
        string Value { get; }
    }

    /// <inheritdoc />
    internal class ConsoleServerKeyView : IConsoleServerKeyView
    {

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            return output;
        }
    }

    /// <summary>
    /// A list of server keys.
    /// </summary>
    public interface IConsoleServerKeys
    {

        /// <summary>
        /// Keys.
        /// </summary>
        IEnumerable<IConsoleServerKey> Keys { get; }
    }

    /// <inheritdoc />
    internal class ConsoleServerKeys : IConsoleServerKeys
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleServerKey> Keys => _keys ?? new List<ConsoleServerKey>(0);
        [DataMember(Name="keys"), Preserve]
        public List<ConsoleServerKey> _keys { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Keys: [", string.Join(", ", Keys), "], ");
            return output;
        }
    }

    /// <summary>
    /// A session.
    /// </summary>
    public interface IConsoleSession
    {

        /// <summary>
        /// MFA code required to setup the MFA mechanism.
        /// </summary>
        string MfaCode { get; }

        /// <summary>
        /// Refresh token.
        /// </summary>
        string RefreshToken { get; }

        /// <summary>
        /// Token credential.
        /// </summary>
        string Token { get; }
    }

    /// <inheritdoc />
    internal class ConsoleSession : IConsoleSession
    {

        /// <inheritdoc />
        [DataMember(Name="mfa_code"), Preserve]
        public string MfaCode { get; set; }

        /// <inheritdoc />
        [DataMember(Name="refresh_token"), Preserve]
        public string RefreshToken { get; set; }

        /// <inheritdoc />
        [DataMember(Name="token"), Preserve]
        public string Token { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "MfaCode: ", MfaCode, ", ");
            output = string.Concat(output, "RefreshToken: ", RefreshToken, ", ");
            output = string.Concat(output, "Token: ", Token, ", ");
            return output;
        }
    }

    /// <summary>
    /// A single setting.
    /// </summary>
    public interface IConsoleSetting
    {

        /// <summary>
        /// Name identifier.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Update time.
        /// </summary>
        string UpdateTimeSec { get; }

        /// <summary>
        /// Setting value.
        /// </summary>
        string Value { get; }
    }

    /// <inheritdoc />
    internal class ConsoleSetting : IConsoleSetting
    {

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="update_time_sec"), Preserve]
        public string UpdateTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "UpdateTimeSec: ", UpdateTimeSec, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            return output;
        }
    }

    /// <summary>
    /// A setting export.
    /// </summary>
    public interface IConsoleSettingExport
    {

        /// <summary>
        /// Name identifier.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Setting value.
        /// </summary>
        string Value { get; }
    }

    /// <inheritdoc />
    internal class ConsoleSettingExport : IConsoleSettingExport
    {

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            return output;
        }
    }

    /// <summary>
    /// A list of settings.
    /// </summary>
    public interface IConsoleSettings
    {

        /// <summary>
        /// Settings.
        /// </summary>
        IEnumerable<IConsoleSetting> Settings { get; }
    }

    /// <inheritdoc />
    internal class ConsoleSettings : IConsoleSettings
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleSetting> Settings => _settings ?? new List<ConsoleSetting>(0);
        [DataMember(Name="settings"), Preserve]
        public List<ConsoleSetting> _settings { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Settings: [", string.Join(", ", Settings), "], ");
            return output;
        }
    }

    /// <summary>
    /// The SingleEnumValueFilterOption specifies the operation to apply to single value enum fields. Only a single operation can be used at one time.
    /// </summary>
    public interface IConsoleSingleEnumValueFilterOption
    {

        /// <summary>
        /// Filter by elements matching exactly the value.
        /// </summary>
        int Exact { get; }

        /// <summary>
        /// Filter by elements matching one of the parameters.
        /// </summary>
        List<int> Or { get; }
    }

    /// <inheritdoc />
    internal class ConsoleSingleEnumValueFilterOption : IConsoleSingleEnumValueFilterOption
    {

        /// <inheritdoc />
        [DataMember(Name="exact"), Preserve]
        public int Exact { get; set; }

        /// <inheritdoc />
        [DataMember(Name="or"), Preserve]
        public List<int> Or { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Exact: ", Exact, ", ");
            output = string.Concat(output, "Or: [", string.Join(", ", Or), "], ");
            return output;
        }
    }

    /// <summary>
    /// The SingleTextValueFilterOption specifies the operation to apply to single value text fields. Only a single operation can be used at one time.
    /// </summary>
    public interface IConsoleSingleTextValueFilterOption
    {

        /// <summary>
        /// Filter by elements matching exactly the value.
        /// </summary>
        string Exact { get; }

        /// <summary>
        /// Filter by elements matching the pattern.
        /// </summary>
        string Like { get; }

        /// <summary>
        /// Filter by elements matching one of the parameters.
        /// </summary>
        List<string> Or { get; }
    }

    /// <inheritdoc />
    internal class ConsoleSingleTextValueFilterOption : IConsoleSingleTextValueFilterOption
    {

        /// <inheritdoc />
        [DataMember(Name="exact"), Preserve]
        public string Exact { get; set; }

        /// <inheritdoc />
        [DataMember(Name="like"), Preserve]
        public string Like { get; set; }

        /// <inheritdoc />
        [DataMember(Name="or"), Preserve]
        public List<string> Or { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Exact: ", Exact, ", ");
            output = string.Concat(output, "Like: ", Like, ", ");
            output = string.Concat(output, "Or: [", string.Join(", ", Or), "], ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public enum ConsoleSplitKey
    {
        /// <summary>
        /// Type of split key.
        /// </summary>
        DYNAMIC = 0,
        /// <summary>
        /// 
        /// </summary>
        RANDOM = 1,
        /// <summary>
        ///  - DYNAMIC: ID + Phase Start.
        /// </summary>
        STABLE = 2,
    }

    /// <summary>
    /// A template.
    /// </summary>
    public interface IConsoleTemplate
    {

        /// <summary>
        /// Category label identifiers.
        /// </summary>
        IEnumerable<IConsoleCategoryView> Categories { get; }

        /// <summary>
        /// Create time.
        /// </summary>
        string CreateTimeSec { get; }

        /// <summary>
        /// The identifier.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// The image_url for the message.
        /// </summary>
        string ImageUrl { get; }

        /// <summary>
        /// The json_metadata for the message
        /// </summary>
        string JsonMetadata { get; }

        /// <summary>
        /// The display name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// The title to generate the message's title.
        /// </summary>
        string Title { get; }

        /// <summary>
        /// Update time.
        /// </summary>
        string UpdateTimeSec { get; }

        /// <summary>
        /// The template value to generate the message's content.
        /// </summary>
        string Value { get; }

        /// <summary>
        /// The value_type for the message's content
        /// </summary>
        string ValueType { get; }

        /// <summary>
        /// The template variants..
        /// </summary>
        IEnumerable<IConsoleTemplateVariant> Variants { get; }
    }

    /// <inheritdoc />
    internal class ConsoleTemplate : IConsoleTemplate
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleCategoryView> Categories => _categories ?? new List<ConsoleCategoryView>(0);
        [DataMember(Name="categories"), Preserve]
        public List<ConsoleCategoryView> _categories { get; set; }

        /// <inheritdoc />
        [DataMember(Name="create_time_sec"), Preserve]
        public string CreateTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="image_url"), Preserve]
        public string ImageUrl { get; set; }

        /// <inheritdoc />
        [DataMember(Name="json_metadata"), Preserve]
        public string JsonMetadata { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="title"), Preserve]
        public string Title { get; set; }

        /// <inheritdoc />
        [DataMember(Name="update_time_sec"), Preserve]
        public string UpdateTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value_type"), Preserve]
        public string ValueType { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleTemplateVariant> Variants => _variants ?? new List<ConsoleTemplateVariant>(0);
        [DataMember(Name="variants"), Preserve]
        public List<ConsoleTemplateVariant> _variants { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Categories: [", string.Join(", ", Categories), "], ");
            output = string.Concat(output, "CreateTimeSec: ", CreateTimeSec, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "ImageUrl: ", ImageUrl, ", ");
            output = string.Concat(output, "JsonMetadata: ", JsonMetadata, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Title: ", Title, ", ");
            output = string.Concat(output, "UpdateTimeSec: ", UpdateTimeSec, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            output = string.Concat(output, "ValueType: ", ValueType, ", ");
            output = string.Concat(output, "Variants: [", string.Join(", ", Variants), "], ");
            return output;
        }
    }

    /// <summary>
    /// The request to create a template.
    /// </summary>
    public interface IConsoleTemplateCreateRequest
    {

        /// <summary>
        /// Category label identifiers.
        /// </summary>
        List<string> CategoryIds { get; }

        /// <summary>
        /// The image_url for the message.
        /// </summary>
        string ImageUrl { get; }

        /// <summary>
        /// The json_metadata for the message
        /// </summary>
        string JsonMetadata { get; }

        /// <summary>
        /// The name for the template.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// The title to generate the message's title.
        /// </summary>
        string Title { get; }

        /// <summary>
        /// The template value to generate the message's content.
        /// </summary>
        string Value { get; }

        /// <summary>
        /// The value_type for the message's content
        /// </summary>
        string ValueType { get; }
    }

    /// <inheritdoc />
    internal class ConsoleTemplateCreateRequest : IConsoleTemplateCreateRequest
    {

        /// <inheritdoc />
        [DataMember(Name="category_ids"), Preserve]
        public List<string> CategoryIds { get; set; }

        /// <inheritdoc />
        [DataMember(Name="image_url"), Preserve]
        public string ImageUrl { get; set; }

        /// <inheritdoc />
        [DataMember(Name="json_metadata"), Preserve]
        public string JsonMetadata { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="title"), Preserve]
        public string Title { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value_type"), Preserve]
        public string ValueType { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "CategoryIds: [", string.Join(", ", CategoryIds), "], ");
            output = string.Concat(output, "ImageUrl: ", ImageUrl, ", ");
            output = string.Concat(output, "JsonMetadata: ", JsonMetadata, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Title: ", Title, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            output = string.Concat(output, "ValueType: ", ValueType, ", ");
            return output;
        }
    }

    /// <summary>
    /// An export of a message template.
    /// </summary>
    public interface IConsoleTemplateExport
    {

        /// <summary>
        /// Category label identifiers.
        /// </summary>
        List<string> CategoryIds { get; }

        /// <summary>
        /// The identifier.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// The image_url for the message.
        /// </summary>
        string ImageUrl { get; }

        /// <summary>
        /// The json_metadata for the message
        /// </summary>
        string JsonMetadata { get; }

        /// <summary>
        /// The display name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// The title to generate the message's title.
        /// </summary>
        string Title { get; }

        /// <summary>
        /// The template value to generate the message's content.
        /// </summary>
        string Value { get; }

        /// <summary>
        /// The value_type for the message's content
        /// </summary>
        string ValueType { get; }

        /// <summary>
        /// The template variants..
        /// </summary>
        IEnumerable<IConsoleTemplateVariantExport> Variants { get; }
    }

    /// <inheritdoc />
    internal class ConsoleTemplateExport : IConsoleTemplateExport
    {

        /// <inheritdoc />
        [DataMember(Name="category_ids"), Preserve]
        public List<string> CategoryIds { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="image_url"), Preserve]
        public string ImageUrl { get; set; }

        /// <inheritdoc />
        [DataMember(Name="json_metadata"), Preserve]
        public string JsonMetadata { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="title"), Preserve]
        public string Title { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value_type"), Preserve]
        public string ValueType { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleTemplateVariantExport> Variants => _variants ?? new List<ConsoleTemplateVariantExport>(0);
        [DataMember(Name="variants"), Preserve]
        public List<ConsoleTemplateVariantExport> _variants { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "CategoryIds: [", string.Join(", ", CategoryIds), "], ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "ImageUrl: ", ImageUrl, ", ");
            output = string.Concat(output, "JsonMetadata: ", JsonMetadata, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Title: ", Title, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            output = string.Concat(output, "ValueType: ", ValueType, ", ");
            output = string.Concat(output, "Variants: [", string.Join(", ", Variants), "], ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IConsoleTemplateListRequestSearchOptions
    {

        /// <summary>
        /// Filter by Label name.
        /// </summary>
        IConsoleMultiTextValueFilterOption LabelName { get; }

        /// <summary>
        /// Filter by Name.
        /// </summary>
        IConsoleSingleTextValueFilterOption Name { get; }
    }

    /// <inheritdoc />
    internal class ConsoleTemplateListRequestSearchOptions : IConsoleTemplateListRequestSearchOptions
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleMultiTextValueFilterOption LabelName => _labelName;
        [DataMember(Name="label_name"), Preserve]
        public ConsoleMultiTextValueFilterOption _labelName { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleSingleTextValueFilterOption Name => _name;
        [DataMember(Name="name"), Preserve]
        public ConsoleSingleTextValueFilterOption _name { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "LabelName: ", LabelName, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            return output;
        }
    }

    /// <summary>
    /// A list of templates.
    /// </summary>
    public interface IConsoleTemplateListResponse
    {

        /// <summary>
        /// The pagination options, if there are more pages.
        /// </summary>
        IConsolePageOptions PageOptions { get; }

        /// <summary>
        /// A list of templates.
        /// </summary>
        IEnumerable<IConsoleTemplateView> Templates { get; }
    }

    /// <inheritdoc />
    internal class ConsoleTemplateListResponse : IConsoleTemplateListResponse
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsolePageOptions PageOptions => _pageOptions;
        [DataMember(Name="page_options"), Preserve]
        public ConsolePageOptions _pageOptions { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleTemplateView> Templates => _templates ?? new List<ConsoleTemplateView>(0);
        [DataMember(Name="templates"), Preserve]
        public List<ConsoleTemplateView> _templates { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "PageOptions: ", PageOptions, ", ");
            output = string.Concat(output, "Templates: [", string.Join(", ", Templates), "], ");
            return output;
        }
    }

    /// <summary>
    /// The template variant preview
    /// </summary>
    public interface IConsoleTemplatePreviewResponse
    {

        /// <summary>
        /// The image_url.
        /// </summary>
        string ImageUrl { get; }

        /// <summary>
        /// The renderization of the title.
        /// </summary>
        string Title { get; }

        /// <summary>
        /// The renderization of the template's default value
        /// </summary>
        string Value { get; }

        /// <summary>
        /// The renderization of the variants
        /// </summary>
        IEnumerable<IConsoleTemplateVariantPreview> Variants { get; }
    }

    /// <inheritdoc />
    internal class ConsoleTemplatePreviewResponse : IConsoleTemplatePreviewResponse
    {

        /// <inheritdoc />
        [DataMember(Name="image_url"), Preserve]
        public string ImageUrl { get; set; }

        /// <inheritdoc />
        [DataMember(Name="title"), Preserve]
        public string Title { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleTemplateVariantPreview> Variants => _variants ?? new List<ConsoleTemplateVariantPreview>(0);
        [DataMember(Name="variants"), Preserve]
        public List<ConsoleTemplateVariantPreview> _variants { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "ImageUrl: ", ImageUrl, ", ");
            output = string.Concat(output, "Title: ", Title, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            output = string.Concat(output, "Variants: [", string.Join(", ", Variants), "], ");
            return output;
        }
    }

    /// <summary>
    /// A template variant.
    /// </summary>
    public interface IConsoleTemplateVariant
    {

        /// <summary>
        /// Create time.
        /// </summary>
        string CreateTimeSec { get; }

        /// <summary>
        /// The image_url for the message.
        /// </summary>
        string ImageUrl { get; }

        /// <summary>
        /// The language of the template.
        /// </summary>
        string Language { get; }

        /// <summary>
        /// The title to generate the message's title.
        /// </summary>
        string Title { get; }

        /// <summary>
        /// Update time.
        /// </summary>
        string UpdateTimeSec { get; }

        /// <summary>
        /// The template value to generate the message's content.
        /// </summary>
        string Value { get; }
    }

    /// <inheritdoc />
    internal class ConsoleTemplateVariant : IConsoleTemplateVariant
    {

        /// <inheritdoc />
        [DataMember(Name="create_time_sec"), Preserve]
        public string CreateTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="image_url"), Preserve]
        public string ImageUrl { get; set; }

        /// <inheritdoc />
        [DataMember(Name="language"), Preserve]
        public string Language { get; set; }

        /// <inheritdoc />
        [DataMember(Name="title"), Preserve]
        public string Title { get; set; }

        /// <inheritdoc />
        [DataMember(Name="update_time_sec"), Preserve]
        public string UpdateTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "CreateTimeSec: ", CreateTimeSec, ", ");
            output = string.Concat(output, "ImageUrl: ", ImageUrl, ", ");
            output = string.Concat(output, "Language: ", Language, ", ");
            output = string.Concat(output, "Title: ", Title, ", ");
            output = string.Concat(output, "UpdateTimeSec: ", UpdateTimeSec, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IConsoleTemplateVariantExport
    {

        /// <summary>
        /// The image_url for the message.
        /// </summary>
        string ImageUrl { get; }

        /// <summary>
        /// The language of the template.
        /// </summary>
        string Language { get; }

        /// <summary>
        /// The title to generate the message's title.
        /// </summary>
        string Title { get; }

        /// <summary>
        /// The template value to generate the message's content.
        /// </summary>
        string Value { get; }
    }

    /// <inheritdoc />
    internal class ConsoleTemplateVariantExport : IConsoleTemplateVariantExport
    {

        /// <inheritdoc />
        [DataMember(Name="image_url"), Preserve]
        public string ImageUrl { get; set; }

        /// <inheritdoc />
        [DataMember(Name="language"), Preserve]
        public string Language { get; set; }

        /// <inheritdoc />
        [DataMember(Name="title"), Preserve]
        public string Title { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "ImageUrl: ", ImageUrl, ", ");
            output = string.Concat(output, "Language: ", Language, ", ");
            output = string.Concat(output, "Title: ", Title, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IConsoleTemplateVariantPreview
    {

        /// <summary>
        /// The image_url for the variant.
        /// </summary>
        string ImageUrl { get; }

        /// <summary>
        /// The language
        /// </summary>
        string Language { get; }

        /// <summary>
        /// The renderization of the variant's title.
        /// </summary>
        string Title { get; }

        /// <summary>
        /// The renderization of the variant's value
        /// </summary>
        string Value { get; }
    }

    /// <inheritdoc />
    internal class ConsoleTemplateVariantPreview : IConsoleTemplateVariantPreview
    {

        /// <inheritdoc />
        [DataMember(Name="image_url"), Preserve]
        public string ImageUrl { get; set; }

        /// <inheritdoc />
        [DataMember(Name="language"), Preserve]
        public string Language { get; set; }

        /// <inheritdoc />
        [DataMember(Name="title"), Preserve]
        public string Title { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "ImageUrl: ", ImageUrl, ", ");
            output = string.Concat(output, "Language: ", Language, ", ");
            output = string.Concat(output, "Title: ", Title, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            return output;
        }
    }

    /// <summary>
    /// A template view.
    /// </summary>
    public interface IConsoleTemplateView
    {

        /// <summary>
        /// Category label identifiers.
        /// </summary>
        IEnumerable<IConsoleCategoryView> Categories { get; }

        /// <summary>
        /// Create time.
        /// </summary>
        string CreateTimeSec { get; }

        /// <summary>
        /// The identifier.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// The image_url for the message.
        /// </summary>
        string ImageUrl { get; }

        /// <summary>
        /// The json_metadata for the message
        /// </summary>
        string JsonMetadata { get; }

        /// <summary>
        /// The display name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// The title to generate the message's title.
        /// </summary>
        string Title { get; }

        /// <summary>
        /// Update time.
        /// </summary>
        string UpdateTimeSec { get; }

        /// <summary>
        /// The template value to generate the message's content.
        /// </summary>
        string Value { get; }

        /// <summary>
        /// The value_type for the message's content
        /// </summary>
        string ValueType { get; }
    }

    /// <inheritdoc />
    internal class ConsoleTemplateView : IConsoleTemplateView
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleCategoryView> Categories => _categories ?? new List<ConsoleCategoryView>(0);
        [DataMember(Name="categories"), Preserve]
        public List<ConsoleCategoryView> _categories { get; set; }

        /// <inheritdoc />
        [DataMember(Name="create_time_sec"), Preserve]
        public string CreateTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="image_url"), Preserve]
        public string ImageUrl { get; set; }

        /// <inheritdoc />
        [DataMember(Name="json_metadata"), Preserve]
        public string JsonMetadata { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="title"), Preserve]
        public string Title { get; set; }

        /// <inheritdoc />
        [DataMember(Name="update_time_sec"), Preserve]
        public string UpdateTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value_type"), Preserve]
        public string ValueType { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Categories: [", string.Join(", ", Categories), "], ");
            output = string.Concat(output, "CreateTimeSec: ", CreateTimeSec, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "ImageUrl: ", ImageUrl, ", ");
            output = string.Concat(output, "JsonMetadata: ", JsonMetadata, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Title: ", Title, ", ");
            output = string.Concat(output, "UpdateTimeSec: ", UpdateTimeSec, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            output = string.Concat(output, "ValueType: ", ValueType, ", ");
            return output;
        }
    }

    /// <summary>
    /// A single console user.
    /// </summary>
    public interface IConsoleUser
    {

        /// <summary>
        /// ACL.
        /// </summary>
        IDictionary<string, IConsolePermissions> Acl { get; }

        /// <summary>
        /// Create time.
        /// </summary>
        string CreateTime { get; }

        /// <summary>
        /// Email.
        /// </summary>
        string Email { get; }

        /// <summary>
        /// Unique immutable identifier.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// Update time.
        /// </summary>
        string UpdateTime { get; }
    }

    /// <inheritdoc />
    internal class ConsoleUser : IConsoleUser
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IDictionary<string, IConsolePermissions> Acl  => _acl ?? new Dictionary<string, IConsolePermissions>();
        [DataMember(Name="acl"), Preserve]
        public Dictionary<string, IConsolePermissions> _acl { get; set; }

        /// <inheritdoc />
        [DataMember(Name="create_time"), Preserve]
        public string CreateTime { get; set; }

        /// <inheritdoc />
        [DataMember(Name="email"), Preserve]
        public string Email { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="update_time"), Preserve]
        public string UpdateTime { get; set; }

        public override string ToString()
        {
            var output = "";

            var aclString = "";
            foreach (var kvp in Acl)
            {
                aclString = string.Concat(aclString, "{" + kvp.Key + "=" + kvp.Value + "}");
            }
            output = string.Concat(output, "Acl: [" + aclString + "]");
            output = string.Concat(output, "CreateTime: ", CreateTime, ", ");
            output = string.Concat(output, "Email: ", Email, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "UpdateTime: ", UpdateTime, ", ");
            return output;
        }
    }

    /// <summary>
    /// Request to create/invite a new user.
    /// </summary>
    public interface IConsoleUserCreateRequest
    {

        /// <summary>
        /// ACL.
        /// </summary>
        IDictionary<string, IConsolePermissions> Acl { get; }

        /// <summary>
        /// Email address.
        /// </summary>
        string Email { get; }
    }

    /// <inheritdoc />
    internal class ConsoleUserCreateRequest : IConsoleUserCreateRequest
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IDictionary<string, IConsolePermissions> Acl  => _acl ?? new Dictionary<string, IConsolePermissions>();
        [DataMember(Name="acl"), Preserve]
        public Dictionary<string, IConsolePermissions> _acl { get; set; }

        /// <inheritdoc />
        [DataMember(Name="email"), Preserve]
        public string Email { get; set; }

        public override string ToString()
        {
            var output = "";

            var aclString = "";
            foreach (var kvp in Acl)
            {
                aclString = string.Concat(aclString, "{" + kvp.Key + "=" + kvp.Value + "}");
            }
            output = string.Concat(output, "Acl: [" + aclString + "]");
            output = string.Concat(output, "Email: ", Email, ", ");
            return output;
        }
    }

    /// <summary>
    /// Response to create/invite a new user.
    /// </summary>
    public interface IConsoleUserCreateResponse
    {

        /// <summary>
        /// A one-time token required to update the user for the first time
        /// </summary>
        string Token { get; }

        /// <summary>
        /// The user recently created.
        /// </summary>
        IConsoleUser User { get; }
    }

    /// <inheritdoc />
    internal class ConsoleUserCreateResponse : IConsoleUserCreateResponse
    {

        /// <inheritdoc />
        [DataMember(Name="token"), Preserve]
        public string Token { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleUser User => _user;
        [DataMember(Name="user"), Preserve]
        public ConsoleUser _user { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Token: ", Token, ", ");
            output = string.Concat(output, "User: ", User, ", ");
            return output;
        }
    }

    /// <summary>
    /// Request to reset a user's credentials, password or MFA.
    /// </summary>
    public interface IConsoleUserResetResponse
    {

        /// <summary>
        /// An one-time code to be used when re-configuring the password.
        /// </summary>
        string Code { get; }
    }

    /// <inheritdoc />
    internal class ConsoleUserResetResponse : IConsoleUserResetResponse
    {

        /// <inheritdoc />
        [DataMember(Name="code"), Preserve]
        public string Code { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Code: ", Code, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IConsoleUserView
    {

        /// <summary>
        /// Email.
        /// </summary>
        string Email { get; }

        /// <summary>
        /// Unique immutable identifier.
        /// </summary>
        string Id { get; }
    }

    /// <inheritdoc />
    internal class ConsoleUserView : IConsoleUserView
    {

        /// <inheritdoc />
        [DataMember(Name="email"), Preserve]
        public string Email { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Email: ", Email, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");
            return output;
        }
    }

    /// <summary>
    /// A list of users.
    /// </summary>
    public interface IConsoleUsers
    {

        /// <summary>
        /// Users.
        /// </summary>
        IEnumerable<IConsoleUser> Users { get; }
    }

    /// <inheritdoc />
    internal class ConsoleUsers : IConsoleUsers
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleUser> Users => _users ?? new List<ConsoleUser>(0);
        [DataMember(Name="users"), Preserve]
        public List<ConsoleUser> _users { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Users: [", string.Join(", ", Users), "], ");
            return output;
        }
    }

    /// <summary>
    /// The configuration of a variant export.
    /// </summary>
    public interface IConsoleVariantExportRequest
    {

        /// <summary>
        /// The name of the resulting audience.
        /// </summary>
        string AudienceName { get; }

        /// <summary>
        /// The name of the resulting flag variant.
        /// </summary>
        string FlagVariantName { get; }

        /// <summary>
        /// Variant identifier.
        /// </summary>
        string Id { get; }
    }

    /// <inheritdoc />
    internal class ConsoleVariantExportRequest : IConsoleVariantExportRequest
    {

        /// <inheritdoc />
        [DataMember(Name="audience_name"), Preserve]
        public string AudienceName { get; set; }

        /// <inheritdoc />
        [DataMember(Name="flag_variant_name"), Preserve]
        public string FlagVariantName { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "AudienceName: ", AudienceName, ", ");
            output = string.Concat(output, "FlagVariantName: ", FlagVariantName, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");
            return output;
        }
    }

    /// <summary>
    /// A single webhook.
    /// </summary>
    public interface IConsoleWebhook
    {

        /// <summary>
        /// The create time of the webhook.
        /// </summary>
        string CreateTimeSec { get; }

        /// <summary>
        /// The description of the webhook.
        /// </summary>
        string Description { get; }

        /// <summary>
        /// If the webhook is enabled.
        /// </summary>
        bool Enabled { get; }

        /// <summary>
        /// The array of events that will trigger the webhook
        /// </summary>
        IEnumerable<IConsoleWebhookEventType> Events { get; }

        /// <summary>
        /// The request HTTP header name.
        /// </summary>
        string HeaderName { get; }

        /// <summary>
        /// The request HTTP header value.
        /// </summary>
        string HeaderValue { get; }

        /// <summary>
        /// The identifier of the webhook.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// The webhook secret.
        /// </summary>
        string Secret { get; }

        /// <summary>
        /// The update time of the webhook.
        /// </summary>
        string UpdateTimeSec { get; }

        /// <summary>
        /// The URL of the webhook.
        /// </summary>
        string Url { get; }
    }

    /// <inheritdoc />
    internal class ConsoleWebhook : IConsoleWebhook
    {

        /// <inheritdoc />
        [DataMember(Name="create_time_sec"), Preserve]
        public string CreateTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="description"), Preserve]
        public string Description { get; set; }

        /// <inheritdoc />
        [DataMember(Name="enabled"), Preserve]
        public bool Enabled { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleWebhookEventType> Events => _events ?? new List<ConsoleWebhookEventType>(0);
        [DataMember(Name="events"), Preserve]
        public List<ConsoleWebhookEventType> _events { get; set; }

        /// <inheritdoc />
        [DataMember(Name="header_name"), Preserve]
        public string HeaderName { get; set; }

        /// <inheritdoc />
        [DataMember(Name="header_value"), Preserve]
        public string HeaderValue { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="secret"), Preserve]
        public string Secret { get; set; }

        /// <inheritdoc />
        [DataMember(Name="update_time_sec"), Preserve]
        public string UpdateTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="url"), Preserve]
        public string Url { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "CreateTimeSec: ", CreateTimeSec, ", ");
            output = string.Concat(output, "Description: ", Description, ", ");
            output = string.Concat(output, "Enabled: ", Enabled, ", ");
            output = string.Concat(output, "Events: [", string.Join(", ", Events), "], ");
            output = string.Concat(output, "HeaderName: ", HeaderName, ", ");
            output = string.Concat(output, "HeaderValue: ", HeaderValue, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Secret: ", Secret, ", ");
            output = string.Concat(output, "UpdateTimeSec: ", UpdateTimeSec, ", ");
            output = string.Concat(output, "Url: ", Url, ", ");
            return output;
        }
    }

    /// <summary>
    /// The request to create a webhook.
    /// </summary>
    public interface IConsoleWebhookCreateRequest
    {

        /// <summary>
        /// The description of the webhook.
        /// </summary>
        string Description { get; }

        /// <summary>
        /// The array of events that will trigger the webhook
        /// </summary>
        IEnumerable<IConsoleWebhookEventType> Events { get; }

        /// <summary>
        /// The webhook request custom HTTP header name.
        /// </summary>
        string HeaderName { get; }

        /// <summary>
        /// The webhook request custom HTTP header value.
        /// </summary>
        string HeaderValue { get; }

        /// <summary>
        /// The URL of the webhook.
        /// </summary>
        string Url { get; }
    }

    /// <inheritdoc />
    internal class ConsoleWebhookCreateRequest : IConsoleWebhookCreateRequest
    {

        /// <inheritdoc />
        [DataMember(Name="description"), Preserve]
        public string Description { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleWebhookEventType> Events => _events ?? new List<ConsoleWebhookEventType>(0);
        [DataMember(Name="events"), Preserve]
        public List<ConsoleWebhookEventType> _events { get; set; }

        /// <inheritdoc />
        [DataMember(Name="header_name"), Preserve]
        public string HeaderName { get; set; }

        /// <inheritdoc />
        [DataMember(Name="header_value"), Preserve]
        public string HeaderValue { get; set; }

        /// <inheritdoc />
        [DataMember(Name="url"), Preserve]
        public string Url { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Description: ", Description, ", ");
            output = string.Concat(output, "Events: [", string.Join(", ", Events), "], ");
            output = string.Concat(output, "HeaderName: ", HeaderName, ", ");
            output = string.Concat(output, "HeaderValue: ", HeaderValue, ", ");
            output = string.Concat(output, "Url: ", Url, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IConsoleWebhookEvent
    {

        /// <summary>
        /// When the event was sent.
        /// </summary>
        string CreateTimeSec { get; }

        /// <summary>
        /// The event type that triggered the request.
        /// </summary>
        ConsoleWebhookEventType Event { get; }

        /// <summary>
        /// The webhook event id.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// The request body.
        /// </summary>
        string RequestBody { get; }

        /// <summary>
        /// The request HTTP headers.
        /// </summary>
        string RequestHeaders { get; }

        /// <summary>
        /// The request url.
        /// </summary>
        string RequestUrl { get; }

        /// <summary>
        /// The response body.
        /// </summary>
        string ResponseBody { get; }

        /// <summary>
        /// The response status code.
        /// </summary>
        int ResponseStatus { get; }

        /// <summary>
        /// The status of the event.
        /// </summary>
        ConsoleWebhookEventStatus Status { get; }

        /// <summary>
        /// The webhook that triggered the event.
        /// </summary>
        string WebhookId { get; }
    }

    /// <inheritdoc />
    internal class ConsoleWebhookEvent : IConsoleWebhookEvent
    {

        /// <inheritdoc />
        [DataMember(Name="create_time_sec"), Preserve]
        public string CreateTimeSec { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public ConsoleWebhookEventType Event => _event;
        [DataMember(Name="event"), Preserve]
        public ConsoleWebhookEventType _event { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="request_body"), Preserve]
        public string RequestBody { get; set; }

        /// <inheritdoc />
        [DataMember(Name="request_headers"), Preserve]
        public string RequestHeaders { get; set; }

        /// <inheritdoc />
        [DataMember(Name="request_url"), Preserve]
        public string RequestUrl { get; set; }

        /// <inheritdoc />
        [DataMember(Name="response_body"), Preserve]
        public string ResponseBody { get; set; }

        /// <inheritdoc />
        [DataMember(Name="response_status"), Preserve]
        public int ResponseStatus { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public ConsoleWebhookEventStatus Status => _status;
        [DataMember(Name="status"), Preserve]
        public ConsoleWebhookEventStatus _status { get; set; }

        /// <inheritdoc />
        [DataMember(Name="webhook_id"), Preserve]
        public string WebhookId { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "CreateTimeSec: ", CreateTimeSec, ", ");
            output = string.Concat(output, "Event: ", Event, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "RequestBody: ", RequestBody, ", ");
            output = string.Concat(output, "RequestHeaders: ", RequestHeaders, ", ");
            output = string.Concat(output, "RequestUrl: ", RequestUrl, ", ");
            output = string.Concat(output, "ResponseBody: ", ResponseBody, ", ");
            output = string.Concat(output, "ResponseStatus: ", ResponseStatus, ", ");
            output = string.Concat(output, "Status: ", Status, ", ");
            output = string.Concat(output, "WebhookId: ", WebhookId, ", ");
            return output;
        }
    }

    /// <summary>
    /// The response to the WebhookEventList.
    /// </summary>
    public interface IConsoleWebhookEventListResponse
    {

        /// <summary>
        /// Cursor, if there are next pages.
        /// </summary>
        string NextCursor { get; }

        /// <summary>
        /// Cursor, if there are prev pages.
        /// </summary>
        string PrevCursor { get; }

        /// <summary>
        /// The list of webhook events.
        /// </summary>
        IEnumerable<IConsoleWebhookEvent> WebhookEvents { get; }
    }

    /// <inheritdoc />
    internal class ConsoleWebhookEventListResponse : IConsoleWebhookEventListResponse
    {

        /// <inheritdoc />
        [DataMember(Name="next_cursor"), Preserve]
        public string NextCursor { get; set; }

        /// <inheritdoc />
        [DataMember(Name="prev_cursor"), Preserve]
        public string PrevCursor { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleWebhookEvent> WebhookEvents => _webhookEvents ?? new List<ConsoleWebhookEvent>(0);
        [DataMember(Name="webhook_events"), Preserve]
        public List<ConsoleWebhookEvent> _webhookEvents { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "NextCursor: ", NextCursor, ", ");
            output = string.Concat(output, "PrevCursor: ", PrevCursor, ", ");
            output = string.Concat(output, "WebhookEvents: [", string.Join(", ", WebhookEvents), "], ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public enum ConsoleWebhookEventStatus
    {
        /// <summary>
        /// A webhook event status, SUCCEEDED if 200 status code, FAILED otherwise.
        /// </summary>
        SUCCEEDED = 0,
        /// <summary>
        /// 
        /// </summary>
        FAILED = 1,
    }

    /// <summary>
    /// 
    /// </summary>
    public enum ConsoleWebhookEventType
    {
        /// <summary>
        /// A webhook event type.
        /// </summary>
        LIVE_EVENT_STARTED = 0,
        /// <summary>
        /// 
        /// </summary>
        LIVE_EVENT_ENDED = 1,
        /// <summary>
        /// 
        /// </summary>
        SCHEDULED_MESSAGE_SENT = 2,
        /// <summary>
        /// 
        /// </summary>
        FEATURE_FLAG_CREATED = 3,
        /// <summary>
        /// 
        /// </summary>
        FEATURE_FLAG_UPDATED = 4,
        /// <summary>
        /// 
        /// </summary>
        FEATURE_FLAG_DELETED = 5,
        /// <summary>
        /// 
        /// </summary>
        FEATURE_FLAG_VARIANT_CREATED = 6,
        /// <summary>
        /// 
        /// </summary>
        FEATURE_FLAG_VARIANT_UPDATED = 7,
        /// <summary>
        /// 
        /// </summary>
        FEATURE_FLAG_VARIANT_DELETED = 8,
        /// <summary>
        /// 
        /// </summary>
        DIRECT_MESSAGE_SENT = 9,
    }

    /// <summary>
    /// A webhook export.
    /// </summary>
    public interface IConsoleWebhookExport
    {

        /// <summary>
        /// The description of the webhook.
        /// </summary>
        string Description { get; }

        /// <summary>
        /// If the webhook is enabled.
        /// </summary>
        bool Enabled { get; }

        /// <summary>
        /// The array of events that will trigger the webhook
        /// </summary>
        IEnumerable<IConsoleWebhookEventType> Events { get; }

        /// <summary>
        /// The webhook request custom HTTP header name.
        /// </summary>
        string HeaderName { get; }

        /// <summary>
        /// The webhook request custom HTTP header value.
        /// </summary>
        string HeaderValue { get; }

        /// <summary>
        /// 
        /// </summary>
        string Id { get; }

        /// <summary>
        /// The secret of the webhook.
        /// </summary>
        string Secret { get; }

        /// <summary>
        /// The identifier of the webhook.
        /// </summary>
        string Url { get; }
    }

    /// <inheritdoc />
    internal class ConsoleWebhookExport : IConsoleWebhookExport
    {

        /// <inheritdoc />
        [DataMember(Name="description"), Preserve]
        public string Description { get; set; }

        /// <inheritdoc />
        [DataMember(Name="enabled"), Preserve]
        public bool Enabled { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleWebhookEventType> Events => _events ?? new List<ConsoleWebhookEventType>(0);
        [DataMember(Name="events"), Preserve]
        public List<ConsoleWebhookEventType> _events { get; set; }

        /// <inheritdoc />
        [DataMember(Name="header_name"), Preserve]
        public string HeaderName { get; set; }

        /// <inheritdoc />
        [DataMember(Name="header_value"), Preserve]
        public string HeaderValue { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="secret"), Preserve]
        public string Secret { get; set; }

        /// <inheritdoc />
        [DataMember(Name="url"), Preserve]
        public string Url { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Description: ", Description, ", ");
            output = string.Concat(output, "Enabled: ", Enabled, ", ");
            output = string.Concat(output, "Events: [", string.Join(", ", Events), "], ");
            output = string.Concat(output, "HeaderName: ", HeaderName, ", ");
            output = string.Concat(output, "HeaderValue: ", HeaderValue, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Secret: ", Secret, ", ");
            output = string.Concat(output, "Url: ", Url, ", ");
            return output;
        }
    }

    /// <summary>
    /// A list of webhooks.
    /// </summary>
    public interface IConsoleWebhooks
    {

        /// <summary>
        /// Webhooks.
        /// </summary>
        IEnumerable<IConsoleWebhook> Webhooks { get; }
    }

    /// <inheritdoc />
    internal class ConsoleWebhooks : IConsoleWebhooks
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleWebhook> Webhooks => _webhooks ?? new List<ConsoleWebhook>(0);
        [DataMember(Name="webhooks"), Preserve]
        public List<ConsoleWebhook> _webhooks { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Webhooks: [", string.Join(", ", Webhooks), "], ");
            return output;
        }
    }

    /// <summary>
    /// Wrapped event.
    /// </summary>
    public interface IConsoleWrappedEvent
    {

        /// <summary>
        /// Event sent by the client.
        /// </summary>
        ISatoriconsoleEvent Event { get; }

        /// <summary>
        /// Identity of the user who sent this event.
        /// </summary>
        string IdentityId { get; }

        /// <summary>
        /// Unix timestamp representing when the event was received by the server.
        /// </summary>
        string ReceiveTime { get; }
    }

    /// <inheritdoc />
    internal class ConsoleWrappedEvent : IConsoleWrappedEvent
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public ISatoriconsoleEvent Event => _event;
        [DataMember(Name="event"), Preserve]
        public SatoriconsoleEvent _event { get; set; }

        /// <inheritdoc />
        [DataMember(Name="identity_id"), Preserve]
        public string IdentityId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="receive_time"), Preserve]
        public string ReceiveTime { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Event: ", Event, ", ");
            output = string.Concat(output, "IdentityId: ", IdentityId, ", ");
            output = string.Concat(output, "ReceiveTime: ", ReceiveTime, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IGooglerpcStatus
    {

        /// <summary>
        /// 
        /// </summary>
        int Code { get; }

        /// <summary>
        /// 
        /// </summary>
        IEnumerable<IProtobufAny> Details { get; }

        /// <summary>
        /// 
        /// </summary>
        string Message { get; }
    }

    /// <inheritdoc />
    internal class GooglerpcStatus : IGooglerpcStatus
    {

        /// <inheritdoc />
        [DataMember(Name="code"), Preserve]
        public int Code { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IProtobufAny> Details => _details ?? new List<ProtobufAny>(0);
        [DataMember(Name="details"), Preserve]
        public List<ProtobufAny> _details { get; set; }

        /// <inheritdoc />
        [DataMember(Name="message"), Preserve]
        public string Message { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Code: ", Code, ", ");
            output = string.Concat(output, "Details: [", string.Join(", ", Details), "], ");
            output = string.Concat(output, "Message: ", Message, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IProtobufAny
    {

        /// <summary>
        /// 
        /// </summary>
        string @type { get; }
    }

    /// <inheritdoc />
    internal class ProtobufAny : IProtobufAny
    {

        /// <inheritdoc />
        [DataMember(Name="@type"), Preserve]
        public string @type { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "@type: ", @type, ", ");
            return output;
        }
    }

    /// <summary>
    /// Represents a category label.
    /// </summary>
    public interface ISatoriconsoleCategory
    {

        /// <summary>
        /// Color hex for the label.
        /// </summary>
        string Color { get; }

        /// <summary>
        /// Create time.
        /// </summary>
        string CreateTimeSec { get; }

        /// <summary>
        /// Description.
        /// </summary>
        string Description { get; }

        /// <summary>
        /// Identifier.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// Name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Update time.
        /// </summary>
        string UpdateTimeSec { get; }
    }

    /// <inheritdoc />
    internal class SatoriconsoleCategory : ISatoriconsoleCategory
    {

        /// <inheritdoc />
        [DataMember(Name="color"), Preserve]
        public string Color { get; set; }

        /// <inheritdoc />
        [DataMember(Name="create_time_sec"), Preserve]
        public string CreateTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="description"), Preserve]
        public string Description { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="update_time_sec"), Preserve]
        public string UpdateTimeSec { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Color: ", Color, ", ");
            output = string.Concat(output, "CreateTimeSec: ", CreateTimeSec, ", ");
            output = string.Concat(output, "Description: ", Description, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "UpdateTimeSec: ", UpdateTimeSec, ", ");
            return output;
        }
    }

    /// <summary>
    /// Request to create a new category.
    /// </summary>
    public interface ISatoriconsoleCategoryCreateRequest
    {

        /// <summary>
        /// Color hex for the label.
        /// </summary>
        string Color { get; }

        /// <summary>
        /// Description.
        /// </summary>
        string Description { get; }

        /// <summary>
        /// Name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Value.
        /// </summary>
        string Value { get; }
    }

    /// <inheritdoc />
    internal class SatoriconsoleCategoryCreateRequest : ISatoriconsoleCategoryCreateRequest
    {

        /// <inheritdoc />
        [DataMember(Name="color"), Preserve]
        public string Color { get; set; }

        /// <inheritdoc />
        [DataMember(Name="description"), Preserve]
        public string Description { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Color: ", Color, ", ");
            output = string.Concat(output, "Description: ", Description, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface ISatoriconsoleDataLake
    {

        /// <summary>
        /// The new configuration for AppNava.
        /// </summary>
        IConsoleDataLakeConfigurationAppNavaML AppNavaMl { get; }

        /// <summary>
        /// The new configuration for BigQuery.
        /// </summary>
        IConsoleDataLakeConfigurationBigQuery Bigquery { get; }

        /// <summary>
        /// The new configuration for Databricks S3.
        /// </summary>
        IConsoleDataLakeConfigurationDatabricks Databricks { get; }

        /// <summary>
        /// The status of the integration.
        /// </summary>
        bool Enabled { get; }

        /// <summary>
        /// The new configuration for Redshift.
        /// </summary>
        IConsoleDataLakeConfigurationRedshift Redshift { get; }

        /// <summary>
        /// The new configuration for S3.
        /// </summary>
        IConsoleDataLakeConfigurationS3 S3 { get; }

        /// <summary>
        /// The new configuration for Snowflake.
        /// </summary>
        IConsoleDataLakeConfigurationSnowflake Snowflake { get; }

        /// <summary>
        /// The name of the Data Lake integration.
        /// </summary>
        ConsoleDataLakeIntegrationType Type { get; }

        /// <summary>
        /// The update time of the integration.
        /// </summary>
        string UpdateTimeSec { get; }
    }

    /// <inheritdoc />
    internal class SatoriconsoleDataLake : ISatoriconsoleDataLake
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleDataLakeConfigurationAppNavaML AppNavaMl => _appNavaMl;
        [DataMember(Name="app_nava_ml"), Preserve]
        public ConsoleDataLakeConfigurationAppNavaML _appNavaMl { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleDataLakeConfigurationBigQuery Bigquery => _bigquery;
        [DataMember(Name="bigquery"), Preserve]
        public ConsoleDataLakeConfigurationBigQuery _bigquery { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleDataLakeConfigurationDatabricks Databricks => _databricks;
        [DataMember(Name="databricks"), Preserve]
        public ConsoleDataLakeConfigurationDatabricks _databricks { get; set; }

        /// <inheritdoc />
        [DataMember(Name="enabled"), Preserve]
        public bool Enabled { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleDataLakeConfigurationRedshift Redshift => _redshift;
        [DataMember(Name="redshift"), Preserve]
        public ConsoleDataLakeConfigurationRedshift _redshift { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleDataLakeConfigurationS3 S3 => _s3;
        [DataMember(Name="s3"), Preserve]
        public ConsoleDataLakeConfigurationS3 _s3 { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IConsoleDataLakeConfigurationSnowflake Snowflake => _snowflake;
        [DataMember(Name="snowflake"), Preserve]
        public ConsoleDataLakeConfigurationSnowflake _snowflake { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public ConsoleDataLakeIntegrationType Type => _type;
        [DataMember(Name="type"), Preserve]
        public ConsoleDataLakeIntegrationType _type { get; set; }

        /// <inheritdoc />
        [DataMember(Name="update_time_sec"), Preserve]
        public string UpdateTimeSec { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "AppNavaMl: ", AppNavaMl, ", ");
            output = string.Concat(output, "Bigquery: ", Bigquery, ", ");
            output = string.Concat(output, "Databricks: ", Databricks, ", ");
            output = string.Concat(output, "Enabled: ", Enabled, ", ");
            output = string.Concat(output, "Redshift: ", Redshift, ", ");
            output = string.Concat(output, "S3: ", S3, ", ");
            output = string.Concat(output, "Snowflake: ", Snowflake, ", ");
            output = string.Concat(output, "Type: ", Type, ", ");
            output = string.Concat(output, "UpdateTimeSec: ", UpdateTimeSec, ", ");
            return output;
        }
    }

    /// <summary>
    /// Satori API single event.
    /// </summary>
    public interface ISatoriconsoleEvent
    {

        /// <summary>
        /// Optional event ID assigned by the client.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// Event metadata, if any.
        /// </summary>
        IDictionary<string, string> Metadata { get; }

        /// <summary>
        /// Event name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// The time when the event was triggered on the producer side.
        /// </summary>
        string Timestamp { get; }

        /// <summary>
        /// Optional value.
        /// </summary>
        string Value { get; }
    }

    /// <inheritdoc />
    internal class SatoriconsoleEvent : ISatoriconsoleEvent
    {

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IDictionary<string, string> Metadata => _metadata ?? new Dictionary<string, string>();
        [DataMember(Name="metadata"), Preserve]
        public Dictionary<string, string> _metadata { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="timestamp"), Preserve]
        public string Timestamp { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Id: ", Id, ", ");

            var metadataString = "";
            foreach (var kvp in Metadata)
            {
                metadataString = string.Concat(metadataString, "{" + kvp.Key + "=" + kvp.Value + "}");
            }
            output = string.Concat(output, "Metadata: [" + metadataString + "]");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Timestamp: ", Timestamp, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface ISatoriconsoleFlag
    {

        /// <summary>
        /// Category labels.
        /// </summary>
        IEnumerable<IConsoleCategoryView> Categories { get; }

        /// <summary>
        /// Core.
        /// </summary>
        bool Core { get; }

        /// <summary>
        /// Create time.
        /// </summary>
        string CreateTimeSec { get; }

        /// <summary>
        /// Optional description.
        /// </summary>
        string Description { get; }

        /// <summary>
        /// Identifier.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// Name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Schema identifier.
        /// </summary>
        string SchemaId { get; }

        /// <summary>
        /// Update time.
        /// </summary>
        string UpdateTimeSec { get; }

        /// <summary>
        /// Value.
        /// </summary>
        string Value { get; }

        /// <summary>
        /// Variants.
        /// </summary>
        IEnumerable<IConsoleFlagVariant> Variants { get; }
    }

    /// <inheritdoc />
    internal class SatoriconsoleFlag : ISatoriconsoleFlag
    {

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleCategoryView> Categories => _categories ?? new List<ConsoleCategoryView>(0);
        [DataMember(Name="categories"), Preserve]
        public List<ConsoleCategoryView> _categories { get; set; }

        /// <inheritdoc />
        [DataMember(Name="core"), Preserve]
        public bool Core { get; set; }

        /// <inheritdoc />
        [DataMember(Name="create_time_sec"), Preserve]
        public string CreateTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="description"), Preserve]
        public string Description { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="schema_id"), Preserve]
        public string SchemaId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="update_time_sec"), Preserve]
        public string UpdateTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IEnumerable<IConsoleFlagVariant> Variants => _variants ?? new List<ConsoleFlagVariant>(0);
        [DataMember(Name="variants"), Preserve]
        public List<ConsoleFlagVariant> _variants { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Categories: [", string.Join(", ", Categories), "], ");
            output = string.Concat(output, "Core: ", Core, ", ");
            output = string.Concat(output, "CreateTimeSec: ", CreateTimeSec, ", ");
            output = string.Concat(output, "Description: ", Description, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "SchemaId: ", SchemaId, ", ");
            output = string.Concat(output, "UpdateTimeSec: ", UpdateTimeSec, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            output = string.Concat(output, "Variants: [", string.Join(", ", Variants), "], ");
            return output;
        }
    }

    /// <summary>
    /// Request to create a new flag.
    /// </summary>
    public interface ISatoriconsoleFlagCreateRequest
    {

        /// <summary>
        /// Category label identifiers.
        /// </summary>
        List<string> CategoryIds { get; }

        /// <summary>
        /// Optional description.
        /// </summary>
        string Description { get; }

        /// <summary>
        /// Name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Schema identifier.
        /// </summary>
        string SchemaId { get; }

        /// <summary>
        /// Value.
        /// </summary>
        string Value { get; }
    }

    /// <inheritdoc />
    internal class SatoriconsoleFlagCreateRequest : ISatoriconsoleFlagCreateRequest
    {

        /// <inheritdoc />
        [DataMember(Name="category_ids"), Preserve]
        public List<string> CategoryIds { get; set; }

        /// <inheritdoc />
        [DataMember(Name="description"), Preserve]
        public string Description { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="schema_id"), Preserve]
        public string SchemaId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "CategoryIds: [", string.Join(", ", CategoryIds), "], ");
            output = string.Concat(output, "Description: ", Description, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "SchemaId: ", SchemaId, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            return output;
        }
    }

    /// <summary>
    /// A payload schema.
    /// </summary>
    public interface ISatoriconsoleSchema
    {

        /// <summary>
        /// Core schema.
        /// </summary>
        bool Core { get; }

        /// <summary>
        /// Create time.
        /// </summary>
        string CreateTimeSec { get; }

        /// <summary>
        /// Description.
        /// </summary>
        string Description { get; }

        /// <summary>
        /// Reference graph of this schema.
        /// </summary>
        ISchemaSchemaGraph Graph { get; }

        /// <summary>
        /// Identifier.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// Name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// References of features using this schema.
        /// </summary>
        IDictionary<string, ISchemaSchemaReferences> References { get; }

        /// <summary>
        /// Type.
        /// </summary>
        ConsoleSchemaType Type { get; }

        /// <summary>
        /// Update time.
        /// </summary>
        string UpdateTimeSec { get; }

        /// <summary>
        /// Value.
        /// </summary>
        string Value { get; }
    }

    /// <inheritdoc />
    internal class SatoriconsoleSchema : ISatoriconsoleSchema
    {

        /// <inheritdoc />
        [DataMember(Name="core"), Preserve]
        public bool Core { get; set; }

        /// <inheritdoc />
        [DataMember(Name="create_time_sec"), Preserve]
        public string CreateTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="description"), Preserve]
        public string Description { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public ISchemaSchemaGraph Graph => _graph;
        [DataMember(Name="graph"), Preserve]
        public SchemaSchemaGraph _graph { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public IDictionary<string, ISchemaSchemaReferences> References  => _references ?? new Dictionary<string, ISchemaSchemaReferences>();
        [DataMember(Name="references"), Preserve]
        public Dictionary<string, ISchemaSchemaReferences> _references { get; set; }

        /// <inheritdoc />
        [IgnoreDataMember]
        public ConsoleSchemaType Type => _type;
        [DataMember(Name="type"), Preserve]
        public ConsoleSchemaType _type { get; set; }

        /// <inheritdoc />
        [DataMember(Name="update_time_sec"), Preserve]
        public string UpdateTimeSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Core: ", Core, ", ");
            output = string.Concat(output, "CreateTimeSec: ", CreateTimeSec, ", ");
            output = string.Concat(output, "Description: ", Description, ", ");
            output = string.Concat(output, "Graph: ", Graph, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");

            var referencesString = "";
            foreach (var kvp in References)
            {
                referencesString = string.Concat(referencesString, "{" + kvp.Key + "=" + kvp.Value + "}");
            }
            output = string.Concat(output, "References: [" + referencesString + "]");
            output = string.Concat(output, "Type: ", Type, ", ");
            output = string.Concat(output, "UpdateTimeSec: ", UpdateTimeSec, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            return output;
        }
    }

    /// <summary>
    /// The low level client for the Satori API.
    /// </summary>
    internal class ApiClient
    {
        public readonly IHttpAdapter HttpAdapter;
        public int Timeout { get; set; }

        private readonly Uri _baseUri;

        public ApiClient(Uri baseUri, IHttpAdapter httpAdapter, int timeout = 10)
        {
            _baseUri = baseUri;
            HttpAdapter = httpAdapter;
            Timeout = timeout;
        }

        /// <summary>
        /// List all AdvertisementMeasurementPartner configurations.
        /// </summary>
        public async Task<IAdvertisementMeasurementPartnerConfigurationListResponse> ConsoleAdvertisementMeasurementPartnerConfigurationListAsync(
            string bearerToken,
            CancellationToken? cancellationToken)
        {

            var urlpath = "/v1/console/advertisement_measurement_partner/configuration";

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<AdvertisementMeasurementPartnerConfigurationListResponse>();
        }

        /// <summary>
        /// AdvertisementMeasurementPartner configuration.
        /// </summary>
        public async Task ConsoleAdvertisementMeasurementPartnerConfigurationUpdateAsync(
            string bearerToken,
            AdvertisementMeasurementPartnerConfigurationUpdateRequest body,
            CancellationToken? cancellationToken)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/advertisement_measurement_partner/configuration";

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "PUT";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
        }

        /// <summary>
        /// Advertisement Measurement Partner Attribution.
        /// </summary>
        public async Task ConsoleAdvertisementMeasurementPartnerAttributionUpdateAsync(
            string bearerToken,
            string advertisementMeasurementPartner,
            string advertisementMeasurementPartnerId,
             parameters,
            CancellationToken? cancellationToken)
        {
            if (advertisementMeasurementPartner == null)
            {
                throw new ArgumentException("'advertisementMeasurementPartner' is required but was null.");
            }
            if (advertisementMeasurementPartnerId == null)
            {
                throw new ArgumentException("'advertisementMeasurementPartnerId' is required but was null.");
            }

            var urlpath = "/v1/console/advertisement_measurement_partner/{advertisementMeasurementPartner}/attribution/{advertisementMeasurementPartnerId}";
            urlpath = urlpath.Replace("{advertisementMeasurementPartner}", Uri.EscapeDataString(advertisementMeasurementPartner));
            urlpath = urlpath.Replace("{advertisementMeasurementPartnerId}", Uri.EscapeDataString(advertisementMeasurementPartnerId));

            var queryParams = "";
            {parameters query false  {}  {  map[] }} // ERROR

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
        }

        /// <summary>
        /// Get a list of API keys.
        /// </summary>
        public async Task<IConsoleApiKeys> ConsoleApiKeyListAsync(
            string bearerToken,
            CancellationToken? cancellationToken)
        {

            var urlpath = "/v1/console/apikey";

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleApiKeys>();
        }

        /// <summary>
        /// Create a new API key.
        /// </summary>
        public async Task<IConsoleApiKey> ConsoleApiKeyCreateAsync(
            string bearerToken,
            ConsoleApiKeyCreateRequest body,
            CancellationToken? cancellationToken)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/apikey";

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleApiKey>();
        }

        /// <summary>
        /// Delete an API key.
        /// </summary>
        public async Task ConsoleApiKeyDeleteAsync(
            string bearerToken,
            string name,
            CancellationToken? cancellationToken)
        {
            if (name == null)
            {
                throw new ArgumentException("'name' is required but was null.");
            }

            var urlpath = "/v1/console/apikey/{name}";
            urlpath = urlpath.Replace("{name}", Uri.EscapeDataString(name));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "DELETE";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
        }

        /// <summary>
        /// Rotate an API key.
        /// </summary>
        public async Task<IConsoleApiKey> ConsoleApiKeyRotateAsync(
            string bearerToken,
            string name,
            CancellationToken? cancellationToken)
        {
            if (name == null)
            {
                throw new ArgumentException("'name' is required but was null.");
            }

            var urlpath = "/v1/console/apikey/{name}/rotate";
            urlpath = urlpath.Replace("{name}", Uri.EscapeDataString(name));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleApiKey>();
        }

        /// <summary>
        /// Get a list of audiences.
        /// </summary>
        public async Task<IConsoleAudienceListResponse> ConsoleAudienceListAsync(
            string bearerToken,
            IEnumerable<string> search.name.or,
            string search.name.exact,
            string search.name.like,
            IEnumerable<string> search.labelName.or,
            IEnumerable<string> search.labelName.and,
            IEnumerable<integer> search.status.or,
            int? search.status.exact,
            int? pagination.limit,
            string pagination.cursor,
            CancellationToken? cancellationToken)
        {

            var urlpath = "/v1/console/audience";

            var queryParams = "";
            foreach (var elem in search.name.or ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "search.name.or=", Uri.EscapeDataString(elem), "&");
            }
            if (search.name.exact != null) {
                queryParams = string.Concat(queryParams, "search.name.exact=", Uri.EscapeDataString(search.name.exact), "&");
            }
            if (search.name.like != null) {
                queryParams = string.Concat(queryParams, "search.name.like=", Uri.EscapeDataString(search.name.like), "&");
            }
            foreach (var elem in search.labelName.or ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "search.label_name.or=", Uri.EscapeDataString(elem), "&");
            }
            foreach (var elem in search.labelName.and ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "search.label_name.and=", Uri.EscapeDataString(elem), "&");
            }
            foreach (var elem in search.status.or ?? new integer[0])
            {
                queryParams = string.Concat(queryParams, "search.status.or=", elem, "&");
            }
            if (search.status.exact != null) {
                queryParams = string.Concat(queryParams, "search.status.exact=", search.status.exact, "&");
            }
            if (pagination.limit != null) {
                queryParams = string.Concat(queryParams, "pagination.limit=", pagination.limit, "&");
            }
            if (pagination.cursor != null) {
                queryParams = string.Concat(queryParams, "pagination.cursor=", Uri.EscapeDataString(pagination.cursor), "&");
            }

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleAudienceListResponse>();
        }

        /// <summary>
        /// Create a new audience.
        /// </summary>
        public async Task<IConsoleAudience> ConsoleAudienceCreateAsync(
            string bearerToken,
            ConsoleAudienceCreateRequest body,
            CancellationToken? cancellationToken)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/audience";

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleAudience>();
        }

        /// <summary>
        /// Delete an audience.
        /// </summary>
        public async Task ConsoleAudienceDeleteAsync(
            string bearerToken,
            string id,
            CancellationToken? cancellationToken)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v1/console/audience/{id}";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "DELETE";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
        }

        /// <summary>
        /// 
        /// </summary>
        public async Task<IConsoleAudience> ConsoleAudienceGetAsync(
            string bearerToken,
            string id,
            CancellationToken? cancellationToken)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v1/console/audience/{id}";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleAudience>();
        }

        /// <summary>
        /// Update an existing audience.
        /// </summary>
        public async Task<IConsoleAudience> ConsoleAudienceUpdateAsync(
            string bearerToken,
            string id,
             body,
            CancellationToken? cancellationToken)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/audience/{id}";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleAudience>();
        }

        /// <summary>
        /// Delete all identities from an audience.
        /// </summary>
        public async Task ConsoleAudienceIdentityDeleteAllAsync(
            string bearerToken,
            string id,
            CancellationToken? cancellationToken)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v1/console/audience/{id}/all-identities";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "DELETE";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
        }

        /// <summary>
        /// List audience identities.
        /// </summary>
        public async Task<IConsoleAudienceIdentities> ConsoleAudienceIdentityListAsync(
            string bearerToken,
            string id,
            string filter,
            int? limit,
            string cursor,
            CancellationToken? cancellationToken)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v1/console/audience/{id}/identity";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";
            if (filter != null) {
                queryParams = string.Concat(queryParams, "filter=", Uri.EscapeDataString(filter), "&");
            }
            if (limit != null) {
                queryParams = string.Concat(queryParams, "limit=", limit, "&");
            }
            if (cursor != null) {
                queryParams = string.Concat(queryParams, "cursor=", Uri.EscapeDataString(cursor), "&");
            }

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleAudienceIdentities>();
        }

        /// <summary>
        /// Remove an identity from an audience.
        /// </summary>
        public async Task ConsoleAudienceIdentityDeleteAsync(
            string bearerToken,
            string id,
            string identityId,
            bool? exclude,
            CancellationToken? cancellationToken)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }
            if (identityId == null)
            {
                throw new ArgumentException("'identityId' is required but was null.");
            }

            var urlpath = "/v1/console/audience/{id}/identity/{identityId}";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));
            urlpath = urlpath.Replace("{identityId}", Uri.EscapeDataString(identityId));

            var queryParams = "";
            if (exclude != null) {
                queryParams = string.Concat(queryParams, "exclude=", exclude.ToString().ToLower(), "&");
            }

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "DELETE";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
        }

        /// <summary>
        /// List the audit log for the Console API
        /// </summary>
        public async Task<IConsoleAuditLogListResponse> ConsoleAuditLogListAsync(
            string bearerToken,
            IEnumerable<string> categories,
            IEnumerable<string> actions,
            int? limit,
            string cursor,
            CancellationToken? cancellationToken)
        {

            var urlpath = "/v1/console/audit-log";

            var queryParams = "";
            foreach (var elem in categories ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "categories=", Uri.EscapeDataString(elem), "&");
            }
            foreach (var elem in actions ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "actions=", Uri.EscapeDataString(elem), "&");
            }
            if (limit != null) {
                queryParams = string.Concat(queryParams, "limit=", limit, "&");
            }
            if (cursor != null) {
                queryParams = string.Concat(queryParams, "cursor=", Uri.EscapeDataString(cursor), "&");
            }

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleAuditLogListResponse>();
        }

        /// <summary>
        /// Retrieve the current item from the specified audit log action.
        /// </summary>
        public async Task<IAuditLogGetCurrentResponse> ConsoleAuditLogGetCurrentAsync(
            string bearerToken,
            string id,
            CancellationToken? cancellationToken)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v1/console/audit-log/{id}/current";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<AuditLogGetCurrentResponse>();
        }

        /// <summary>
        /// Undo the specified audit log action.
        /// </summary>
        public async Task ConsoleAuditLogUndoAsync(
            string bearerToken,
            string id,
             body,
            CancellationToken? cancellationToken)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/audit-log/{id}/undo";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
        }

        /// <summary>
        /// Authenticate against the server.
        /// </summary>
        public async Task<IConsoleSession> ConsoleAuthenticateAsync(
            string basicAuthUsername,
            string basicAuthPassword,
            ConsoleAuthenticateRequest body,
            CancellationToken? cancellationToken)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/authenticate";

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            if (!string.IsNullOrEmpty(basicAuthUsername))
            {
                var credentials = Encoding.UTF8.GetBytes(basicAuthUsername + ":" + basicAuthPassword);
                var header = string.Concat("Basic ", Convert.ToBase64String(credentials));
                headers.Add("Authorization", header);
            }

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleSession>();
        }

        /// <summary>
        /// Log out a session, invalidate a refresh token, or log out all sessions/refresh tokens for a user.
        /// </summary>
        public async Task ConsoleAuthenticateLogoutAsync(
            string bearerToken,
            ConsoleAuthenticateLogoutRequest body,
            CancellationToken? cancellationToken)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/authenticate/logout";

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
        }

        /// <summary>
        /// Change an account's MFA using a code, usually delivered over email.
        /// </summary>
        public async Task<IConsoleAuthenticateMFAChangeResponse> ConsoleAuthenticateMFAChangeAsync(
            string basicAuthUsername,
            string basicAuthPassword,
            ConsoleAuthenticateMFAChangeRequest body,
            CancellationToken? cancellationToken)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/authenticate/mfa_change";

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            if (!string.IsNullOrEmpty(basicAuthUsername))
            {
                var credentials = Encoding.UTF8.GetBytes(basicAuthUsername + ":" + basicAuthPassword);
                var header = string.Concat("Basic ", Convert.ToBase64String(credentials));
                headers.Add("Authorization", header);
            }

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleAuthenticateMFAChangeResponse>();
        }

        /// <summary>
        /// Change an account's password using a code, usually delivered over email.
        /// </summary>
        public async Task ConsoleAuthenticatePasswordChangeAsync(
            string basicAuthUsername,
            string basicAuthPassword,
            ConsoleAuthenticatePasswordChangeRequest body,
            CancellationToken? cancellationToken)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/authenticate/password_change";

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            if (!string.IsNullOrEmpty(basicAuthUsername))
            {
                var credentials = Encoding.UTF8.GetBytes(basicAuthUsername + ":" + basicAuthPassword);
                var header = string.Concat("Basic ", Convert.ToBase64String(credentials));
                headers.Add("Authorization", header);
            }

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
        }

        /// <summary>
        /// Refresh a user's session using a refresh token retrieved from a previous authentication request.
        /// </summary>
        public async Task<IConsoleSession> ConsoleAuthenticateRefreshAsync(
            string basicAuthUsername,
            string basicAuthPassword,
            ConsoleAuthenticateRefreshRequest body,
            CancellationToken? cancellationToken)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/authenticate/refresh";

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            if (!string.IsNullOrEmpty(basicAuthUsername))
            {
                var credentials = Encoding.UTF8.GetBytes(basicAuthUsername + ":" + basicAuthPassword);
                var header = string.Concat("Basic ", Convert.ToBase64String(credentials));
                headers.Add("Authorization", header);
            }

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleSession>();
        }

        /// <summary>
        /// List all categories.
        /// </summary>
        public async Task<IConsoleCategories> ConsoleCategoryListAsync(
            string bearerToken,
            CancellationToken? cancellationToken)
        {

            var urlpath = "/v1/console/category";

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleCategories>();
        }

        /// <summary>
        /// Create a new category.
        /// </summary>
        public async Task<ISatoriconsoleCategory> ConsoleCategoryCreateAsync(
            string bearerToken,
            SatoriconsoleCategoryCreateRequest body,
            CancellationToken? cancellationToken)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/category";

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<SatoriconsoleCategory>();
        }

        /// <summary>
        /// Delete a specific category.
        /// </summary>
        public async Task ConsoleCategoryDeleteAsync(
            string bearerToken,
            string id,
            CancellationToken? cancellationToken)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v1/console/category/{id}";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "DELETE";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
        }

        /// <summary>
        /// Update a category.
        /// </summary>
        public async Task<ISatoriconsoleCategory> ConsoleCategoryUpdateAsync(
            string bearerToken,
            string id,
             body,
            CancellationToken? cancellationToken)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/category/{id}";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<SatoriconsoleCategory>();
        }

        /// <summary>
        /// Get the Satori configuration
        /// </summary>
        public async Task<IConsoleConfiguration> ConsoleConfigurationGetAsync(
            string bearerToken,
            CancellationToken? cancellationToken)
        {

            var urlpath = "/v1/console/configuration";

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleConfiguration>();
        }

        /// <summary>
        /// Remove selected data from the database.
        /// </summary>
        public async Task ConsoleDataDeleteAsync(
            string bearerToken,
            bool? identities,
            bool? events,
            bool? audiences,
            bool? metrics,
            bool? featureFlags,
            bool? experiments,
            bool? liveEvents,
            bool? templates,
            bool? apiKeys,
            bool? serverKeys,
            bool? taxonomyCfg,
            bool? messageCfg,
            bool? datalakeCfg,
            bool? messageSchedules,
            bool? webhooks,
            CancellationToken? cancellationToken)
        {

            var urlpath = "/v1/console/data";

            var queryParams = "";
            if (identities != null) {
                queryParams = string.Concat(queryParams, "identities=", identities.ToString().ToLower(), "&");
            }
            if (events != null) {
                queryParams = string.Concat(queryParams, "events=", events.ToString().ToLower(), "&");
            }
            if (audiences != null) {
                queryParams = string.Concat(queryParams, "audiences=", audiences.ToString().ToLower(), "&");
            }
            if (metrics != null) {
                queryParams = string.Concat(queryParams, "metrics=", metrics.ToString().ToLower(), "&");
            }
            if (featureFlags != null) {
                queryParams = string.Concat(queryParams, "feature_flags=", featureFlags.ToString().ToLower(), "&");
            }
            if (experiments != null) {
                queryParams = string.Concat(queryParams, "experiments=", experiments.ToString().ToLower(), "&");
            }
            if (liveEvents != null) {
                queryParams = string.Concat(queryParams, "live_events=", liveEvents.ToString().ToLower(), "&");
            }
            if (templates != null) {
                queryParams = string.Concat(queryParams, "templates=", templates.ToString().ToLower(), "&");
            }
            if (apiKeys != null) {
                queryParams = string.Concat(queryParams, "api_keys=", apiKeys.ToString().ToLower(), "&");
            }
            if (serverKeys != null) {
                queryParams = string.Concat(queryParams, "server_keys=", serverKeys.ToString().ToLower(), "&");
            }
            if (taxonomyCfg != null) {
                queryParams = string.Concat(queryParams, "taxonomy_cfg=", taxonomyCfg.ToString().ToLower(), "&");
            }
            if (messageCfg != null) {
                queryParams = string.Concat(queryParams, "message_cfg=", messageCfg.ToString().ToLower(), "&");
            }
            if (datalakeCfg != null) {
                queryParams = string.Concat(queryParams, "datalake_cfg=", datalakeCfg.ToString().ToLower(), "&");
            }
            if (messageSchedules != null) {
                queryParams = string.Concat(queryParams, "message_schedules=", messageSchedules.ToString().ToLower(), "&");
            }
            if (webhooks != null) {
                queryParams = string.Concat(queryParams, "webhooks=", webhooks.ToString().ToLower(), "&");
            }

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "DELETE";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
        }

        /// <summary>
        /// Create default Satori data.
        /// </summary>
        public async Task ConsoleDefaultDataCreateAsync(
            string bearerToken,
            CancellationToken? cancellationToken)
        {

            var urlpath = "/v1/console/data/default";

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
        }

        /// <summary>
        /// Export the data related to the concept requested.
        /// </summary>
        public async Task<IConsoleDataExportResponse> ConsoleDataExportAsync(
            string bearerToken,
            ConsoleDataExportRequest body,
            CancellationToken? cancellationToken)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/data/export";

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleDataExportResponse>();
        }

        /// <summary>
        /// Export the data from another Satori server.
        /// </summary>
        public async Task<IConsoleDataExportResponse> ConsoleExternalDataExportAsync(
            string bearerToken,
            ConsoleExternalDataExportRequest body,
            CancellationToken? cancellationToken)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/data/export/external";

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleDataExportResponse>();
        }

        /// <summary>
        /// 
        /// </summary>
        public async Task ConsoleExternalDataExportTestConnectionAsync(
            string bearerToken,
            ConsoleExternalDataExportTestConnectionRequest body,
            CancellationToken? cancellationToken)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/data/export/external/test";

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
        }

        /// <summary>
        /// Import the data related to the concept provided.
        /// </summary>
        public async Task ConsoleDataImportAsync(
            string bearerToken,
            ConsoleDataImportRequest body,
            CancellationToken? cancellationToken)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/data/import";

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
        }

        /// <summary>
        /// 
        /// </summary>
        public async Task<IConsoleExternalDataImportServers> ConsoleExternalDataImportServerListAsync(
            string bearerToken,
            CancellationToken? cancellationToken)
        {

            var urlpath = "/v1/console/data/import/external/server";

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleExternalDataImportServers>();
        }

        /// <summary>
        /// 
        /// </summary>
        public async Task<IConsoleExternalDataImportServer> ConsoleExternalDataImportServerCreateAsync(
            string bearerToken,
            ConsoleExternalDataImportServerCreateRequest body,
            CancellationToken? cancellationToken)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/data/import/external/server";

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleExternalDataImportServer>();
        }

        /// <summary>
        /// 
        /// </summary>
        public async Task ConsoleExternalDataImportServerDeleteAsync(
            string bearerToken,
            string id,
            CancellationToken? cancellationToken)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v1/console/data/import/external/server/{id}";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "DELETE";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
        }

        /// <summary>
        /// 
        /// </summary>
        public async Task<IConsoleExternalDataImportServer> ConsoleExternalDataImportServerUpdateAsync(
            string bearerToken,
            string id,
            ApiConsole_ExternalDataImportServerUpdateRequest body,
            CancellationToken? cancellationToken)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/data/import/external/server/{id}";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "PUT";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleExternalDataImportServer>();
        }

        /// <summary>
        /// Remove any sample data from the database.
        /// </summary>
        public async Task ConsoleSampleDataDeleteAsync(
            string bearerToken,
            CancellationToken? cancellationToken)
        {

            var urlpath = "/v1/console/data/sampledata";

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "DELETE";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
        }

        /// <summary>
        /// Populate the database with sample data.
        /// </summary>
        public async Task ConsoleSampleDataCreateAsync(
            string bearerToken,
            CancellationToken? cancellationToken)
        {

            var urlpath = "/v1/console/data/sampledata";

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
        }

        /// <summary>
        /// List all Data Lake configurations.
        /// </summary>
        public async Task<IConsoleDataLakeListResponse> ConsoleDataLakeListAsync(
            string bearerToken,
            CancellationToken? cancellationToken)
        {

            var urlpath = "/v1/console/datalake";

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleDataLakeListResponse>();
        }

        /// <summary>
        /// Update a Data Lake configuration.
        /// </summary>
        public async Task<ISatoriconsoleDataLake> ConsoleDataLakeUpdateAsync(
            string bearerToken,
            ConsoleDataLakeUpdateRequest body,
            CancellationToken? cancellationToken)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/datalake";

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "PUT";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<SatoriconsoleDataLake>();
        }

        /// <summary>
        /// List all event configurations.
        /// </summary>
        public async Task<IConsoleEventConfigurations> ConsoleEventConfigurationListAsync(
            string bearerToken,
            CancellationToken? cancellationToken)
        {

            var urlpath = "/v1/console/event";

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleEventConfigurations>();
        }

        /// <summary>
        /// Create a new event configuration.
        /// </summary>
        public async Task<IConsoleEventConfiguration> ConsoleEventConfigurationCreateAsync(
            string bearerToken,
            ConsoleEventConfigurationCreateRequest body,
            CancellationToken? cancellationToken)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/event";

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleEventConfiguration>();
        }

        /// <summary>
        /// Delete a specific event configuration.
        /// </summary>
        public async Task ConsoleEventConfigurationDeleteAsync(
            string bearerToken,
            string name,
            CancellationToken? cancellationToken)
        {
            if (name == null)
            {
                throw new ArgumentException("'name' is required but was null.");
            }

            var urlpath = "/v1/console/event/{name}";
            urlpath = urlpath.Replace("{name}", Uri.EscapeDataString(name));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "DELETE";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
        }

        /// <summary>
        /// Update an event configuration.
        /// </summary>
        public async Task<IConsoleEventConfiguration> ConsoleEventConfigurationUpdateAsync(
            string bearerToken,
            string name,
             body,
            CancellationToken? cancellationToken)
        {
            if (name == null)
            {
                throw new ArgumentException("'name' is required but was null.");
            }
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/event/{name}";
            urlpath = urlpath.Replace("{name}", Uri.EscapeDataString(name));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleEventConfiguration>();
        }

        /// <summary>
        /// List available experiments.
        /// </summary>
        public async Task<IConsoleExperiments> ConsoleExperimentListAsync(
            string bearerToken,
            IEnumerable<string> categories,
            IEnumerable<string> search.name.or,
            string search.name.exact,
            string search.name.like,
            IEnumerable<string> search.labelName.or,
            IEnumerable<string> search.labelName.and,
            IEnumerable<integer> search.status.or,
            int? search.status.exact,
            int? pagination.limit,
            string pagination.cursor,
            CancellationToken? cancellationToken)
        {

            var urlpath = "/v1/console/experiment";

            var queryParams = "";
            foreach (var elem in categories ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "categories=", Uri.EscapeDataString(elem), "&");
            }
            foreach (var elem in search.name.or ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "search.name.or=", Uri.EscapeDataString(elem), "&");
            }
            if (search.name.exact != null) {
                queryParams = string.Concat(queryParams, "search.name.exact=", Uri.EscapeDataString(search.name.exact), "&");
            }
            if (search.name.like != null) {
                queryParams = string.Concat(queryParams, "search.name.like=", Uri.EscapeDataString(search.name.like), "&");
            }
            foreach (var elem in search.labelName.or ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "search.label_name.or=", Uri.EscapeDataString(elem), "&");
            }
            foreach (var elem in search.labelName.and ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "search.label_name.and=", Uri.EscapeDataString(elem), "&");
            }
            foreach (var elem in search.status.or ?? new integer[0])
            {
                queryParams = string.Concat(queryParams, "search.status.or=", elem, "&");
            }
            if (search.status.exact != null) {
                queryParams = string.Concat(queryParams, "search.status.exact=", search.status.exact, "&");
            }
            if (pagination.limit != null) {
                queryParams = string.Concat(queryParams, "pagination.limit=", pagination.limit, "&");
            }
            if (pagination.cursor != null) {
                queryParams = string.Concat(queryParams, "pagination.cursor=", Uri.EscapeDataString(pagination.cursor), "&");
            }

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleExperiments>();
        }

        /// <summary>
        /// Create a new experiment.
        /// </summary>
        public async Task<IConsoleExperiment> ConsoleExperimentCreateAsync(
            string bearerToken,
            ConsoleExperimentCreateRequest body,
            CancellationToken? cancellationToken)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/experiment";

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleExperiment>();
        }

        /// <summary>
        /// Get a list of all experiments and its phases for the calendar timeframe view.
        /// </summary>
        public async Task<IConsoleExperimentCalendarResult> ConsoleExperimentCalendarListAsync(
            string bearerToken,
            string startTimeSec,
            string endTimeSec,
            IEnumerable<string> search.name.or,
            string search.name.exact,
            string search.name.like,
            IEnumerable<string> search.labelName.or,
            IEnumerable<string> search.labelName.and,
            CancellationToken? cancellationToken)
        {

            var urlpath = "/v1/console/experiment/calendar";

            var queryParams = "";
            if (startTimeSec != null) {
                queryParams = string.Concat(queryParams, "start_time_sec=", Uri.EscapeDataString(startTimeSec), "&");
            }
            if (endTimeSec != null) {
                queryParams = string.Concat(queryParams, "end_time_sec=", Uri.EscapeDataString(endTimeSec), "&");
            }
            foreach (var elem in search.name.or ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "search.name.or=", Uri.EscapeDataString(elem), "&");
            }
            if (search.name.exact != null) {
                queryParams = string.Concat(queryParams, "search.name.exact=", Uri.EscapeDataString(search.name.exact), "&");
            }
            if (search.name.like != null) {
                queryParams = string.Concat(queryParams, "search.name.like=", Uri.EscapeDataString(search.name.like), "&");
            }
            foreach (var elem in search.labelName.or ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "search.label_name.or=", Uri.EscapeDataString(elem), "&");
            }
            foreach (var elem in search.labelName.and ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "search.label_name.and=", Uri.EscapeDataString(elem), "&");
            }

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleExperimentCalendarResult>();
        }

        /// <summary>
        /// Delete an experiment category.
        /// </summary>
        public async Task ConsoleExperimentCategoryDeleteAsync(
            string bearerToken,
            string experimentId,
            string categoryId,
            CancellationToken? cancellationToken)
        {
            if (experimentId == null)
            {
                throw new ArgumentException("'experimentId' is required but was null.");
            }

            var urlpath = "/v1/console/experiment/{experimentId}/category";
            urlpath = urlpath.Replace("{experimentId}", Uri.EscapeDataString(experimentId));

            var queryParams = "";
            if (categoryId != null) {
                queryParams = string.Concat(queryParams, "category_id=", Uri.EscapeDataString(categoryId), "&");
            }

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "DELETE";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
        }

        /// <summary>
        /// Add categories to an experiment.
        /// </summary>
        public async Task ConsoleExperimentCategoryCreateAsync(
            string bearerToken,
            string experimentId,
             body,
            CancellationToken? cancellationToken)
        {
            if (experimentId == null)
            {
                throw new ArgumentException("'experimentId' is required but was null.");
            }
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/experiment/{experimentId}/category";
            urlpath = urlpath.Replace("{experimentId}", Uri.EscapeDataString(experimentId));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
        }

        /// <summary>
        /// Create a new phase for an existing experiment.
        /// </summary>
        public async Task<IConsoleExperimentPhase> ConsoleExperimentPhaseCreateAsync(
            string bearerToken,
            string experimentId,
             body,
            CancellationToken? cancellationToken)
        {
            if (experimentId == null)
            {
                throw new ArgumentException("'experimentId' is required but was null.");
            }
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/experiment/{experimentId}/phase";
            urlpath = urlpath.Replace("{experimentId}", Uri.EscapeDataString(experimentId));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleExperimentPhase>();
        }

        /// <summary>
        /// Delete an experiment phase.
        /// </summary>
        public async Task ConsoleExperimentPhaseDeleteAsync(
            string bearerToken,
            string experimentId,
            string id,
            CancellationToken? cancellationToken)
        {
            if (experimentId == null)
            {
                throw new ArgumentException("'experimentId' is required but was null.");
            }
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v1/console/experiment/{experimentId}/phase/{id}";
            urlpath = urlpath.Replace("{experimentId}", Uri.EscapeDataString(experimentId));
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "DELETE";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
        }

        /// <summary>
        /// Retrieve a phase for an existing experiment.
        /// </summary>
        public async Task<IConsoleExperimentPhase> ConsoleExperimentPhaseGetAsync(
            string bearerToken,
            string experimentId,
            string id,
            CancellationToken? cancellationToken)
        {
            if (experimentId == null)
            {
                throw new ArgumentException("'experimentId' is required but was null.");
            }
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v1/console/experiment/{experimentId}/phase/{id}";
            urlpath = urlpath.Replace("{experimentId}", Uri.EscapeDataString(experimentId));
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleExperimentPhase>();
        }

        /// <summary>
        /// Update a phase for an existing experiment.
        /// </summary>
        public async Task<IConsoleExperimentPhase> ConsoleExperimentPhaseUpdateAsync(
            string bearerToken,
            string experimentId,
            string id,
            ApiConsole_ExperimentPhaseUpdateRequest body,
            CancellationToken? cancellationToken)
        {
            if (experimentId == null)
            {
                throw new ArgumentException("'experimentId' is required but was null.");
            }
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/experiment/{experimentId}/phase/{id}";
            urlpath = urlpath.Replace("{experimentId}", Uri.EscapeDataString(experimentId));
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "PUT";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleExperimentPhase>();
        }

        /// <summary>
        /// Export the variant as audiences and flag variants.
        /// </summary>
        public async Task ConsoleExperimentPhaseVariantsExportAsync(
            string bearerToken,
            string experimentId,
            string id,
             body,
            CancellationToken? cancellationToken)
        {
            if (experimentId == null)
            {
                throw new ArgumentException("'experimentId' is required but was null.");
            }
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/experiment/{experimentId}/phase/{id}/export_variants";
            urlpath = urlpath.Replace("{experimentId}", Uri.EscapeDataString(experimentId));
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
        }

        /// <summary>
        /// List identities participating in an experiment phase.
        /// </summary>
        public async Task<IConsoleExperimentPhaseIdentities> ConsoleExperimentPhaseIdentityListAsync(
            string bearerToken,
            string experimentId,
            string id,
            string filter,
            int? limit,
            string cursor,
            CancellationToken? cancellationToken)
        {
            if (experimentId == null)
            {
                throw new ArgumentException("'experimentId' is required but was null.");
            }
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v1/console/experiment/{experimentId}/phase/{id}/identity";
            urlpath = urlpath.Replace("{experimentId}", Uri.EscapeDataString(experimentId));
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";
            if (filter != null) {
                queryParams = string.Concat(queryParams, "filter=", Uri.EscapeDataString(filter), "&");
            }
            if (limit != null) {
                queryParams = string.Concat(queryParams, "limit=", limit, "&");
            }
            if (cursor != null) {
                queryParams = string.Concat(queryParams, "cursor=", Uri.EscapeDataString(cursor), "&");
            }

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleExperimentPhaseIdentities>();
        }

        /// <summary>
        /// Create the variant of a participant of a experiment phase.
        /// </summary>
        public async Task ConsoleExperimentPhaseIdentityCreateAsync(
            string bearerToken,
            string experimentId,
            string id,
             body,
            CancellationToken? cancellationToken)
        {
            if (experimentId == null)
            {
                throw new ArgumentException("'experimentId' is required but was null.");
            }
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/experiment/{experimentId}/phase/{id}/identity";
            urlpath = urlpath.Replace("{experimentId}", Uri.EscapeDataString(experimentId));
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
        }

        /// <summary>
        /// List identities participating in an experiment phase.
        /// </summary>
        public async Task ConsoleExperimentPhaseIdentityDeleteAsync(
            string bearerToken,
            string experimentId,
            string id,
            string identityId,
            CancellationToken? cancellationToken)
        {
            if (experimentId == null)
            {
                throw new ArgumentException("'experimentId' is required but was null.");
            }
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }
            if (identityId == null)
            {
                throw new ArgumentException("'identityId' is required but was null.");
            }

            var urlpath = "/v1/console/experiment/{experimentId}/phase/{id}/identity/{identityId}";
            urlpath = urlpath.Replace("{experimentId}", Uri.EscapeDataString(experimentId));
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));
            urlpath = urlpath.Replace("{identityId}", Uri.EscapeDataString(identityId));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "DELETE";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
        }

        /// <summary>
        /// Update the variant of a participant of a experiment phase.
        /// </summary>
        public async Task ConsoleExperimentPhaseIdentityUpdateAsync(
            string bearerToken,
            string experimentId,
            string id,
            string identityId,
            ApiConsole_ExperimentPhaseIdentityUpdateRequest body,
            CancellationToken? cancellationToken)
        {
            if (experimentId == null)
            {
                throw new ArgumentException("'experimentId' is required but was null.");
            }
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }
            if (identityId == null)
            {
                throw new ArgumentException("'identityId' is required but was null.");
            }
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/experiment/{experimentId}/phase/{id}/identity/{identityId}";
            urlpath = urlpath.Replace("{experimentId}", Uri.EscapeDataString(experimentId));
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));
            urlpath = urlpath.Replace("{identityId}", Uri.EscapeDataString(identityId));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "PUT";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
        }

        /// <summary>
        /// Stop a phase for an existing experiment.
        /// </summary>
        public async Task ConsoleExperimentPhaseInterruptAsync(
            string bearerToken,
            string experimentId,
            string id,
            CancellationToken? cancellationToken)
        {
            if (experimentId == null)
            {
                throw new ArgumentException("'experimentId' is required but was null.");
            }
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v1/console/experiment/{experimentId}/phase/{id}/interrupt";
            urlpath = urlpath.Replace("{experimentId}", Uri.EscapeDataString(experimentId));
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
        }

        /// <summary>
        /// Get experiments phase results.
        /// </summary>
        public async Task<IExperimentPhasePhaseResults> ConsoleExperimentPhaseResultsGetAsync(
            string bearerToken,
            string experimentId,
            string id,
            CancellationToken? cancellationToken)
        {
            if (experimentId == null)
            {
                throw new ArgumentException("'experimentId' is required but was null.");
            }
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v1/console/experiment/{experimentId}/phase/{id}/results";
            urlpath = urlpath.Replace("{experimentId}", Uri.EscapeDataString(experimentId));
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ExperimentPhasePhaseResults>();
        }

        /// <summary>
        /// Delete an experiment.
        /// </summary>
        public async Task ConsoleExperimentDeleteAsync(
            string bearerToken,
            string id,
            CancellationToken? cancellationToken)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v1/console/experiment/{id}";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "DELETE";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
        }

        /// <summary>
        /// Get an experiment and its associated data.
        /// </summary>
        public async Task<IConsoleExperiment> ConsoleExperimentGetAsync(
            string bearerToken,
            string id,
            CancellationToken? cancellationToken)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v1/console/experiment/{id}";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleExperiment>();
        }

        /// <summary>
        /// Update an existing experiment.
        /// </summary>
        public async Task<IConsoleExperiment> ConsoleExperimentUpdateAsync(
            string bearerToken,
            string id,
            ApiConsole_ExperimentUpdateRequest body,
            CancellationToken? cancellationToken)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/experiment/{id}";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "PUT";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleExperiment>();
        }

        /// <summary>
        /// Get a list of flags.
        /// </summary>
        public async Task<IConsoleFlags> ConsoleFlagListAsync(
            string bearerToken,
            IEnumerable<string> categories,
            IEnumerable<string> search.name.or,
            string search.name.exact,
            string search.name.like,
            IEnumerable<string> search.labelName.or,
            IEnumerable<string> search.labelName.and,
            int? pagination.limit,
            string pagination.cursor,
            CancellationToken? cancellationToken)
        {

            var urlpath = "/v1/console/flag";

            var queryParams = "";
            foreach (var elem in categories ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "categories=", Uri.EscapeDataString(elem), "&");
            }
            foreach (var elem in search.name.or ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "search.name.or=", Uri.EscapeDataString(elem), "&");
            }
            if (search.name.exact != null) {
                queryParams = string.Concat(queryParams, "search.name.exact=", Uri.EscapeDataString(search.name.exact), "&");
            }
            if (search.name.like != null) {
                queryParams = string.Concat(queryParams, "search.name.like=", Uri.EscapeDataString(search.name.like), "&");
            }
            foreach (var elem in search.labelName.or ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "search.label_name.or=", Uri.EscapeDataString(elem), "&");
            }
            foreach (var elem in search.labelName.and ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "search.label_name.and=", Uri.EscapeDataString(elem), "&");
            }
            if (pagination.limit != null) {
                queryParams = string.Concat(queryParams, "pagination.limit=", pagination.limit, "&");
            }
            if (pagination.cursor != null) {
                queryParams = string.Concat(queryParams, "pagination.cursor=", Uri.EscapeDataString(pagination.cursor), "&");
            }

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleFlags>();
        }

        /// <summary>
        /// Create a new flag.
        /// </summary>
        public async Task<ISatoriconsoleFlag> ConsoleFlagCreateAsync(
            string bearerToken,
            SatoriconsoleFlagCreateRequest body,
            CancellationToken? cancellationToken)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/flag";

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<SatoriconsoleFlag>();
        }

        /// <summary>
        /// Delete a flag category.
        /// </summary>
        public async Task ConsoleFlagCategoryDeleteAsync(
            string bearerToken,
            string flagId,
            string categoryId,
            CancellationToken? cancellationToken)
        {
            if (flagId == null)
            {
                throw new ArgumentException("'flagId' is required but was null.");
            }

            var urlpath = "/v1/console/flag/{flagId}/category";
            urlpath = urlpath.Replace("{flagId}", Uri.EscapeDataString(flagId));

            var queryParams = "";
            if (categoryId != null) {
                queryParams = string.Concat(queryParams, "category_id=", Uri.EscapeDataString(categoryId), "&");
            }

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "DELETE";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
        }

        /// <summary>
        /// Add categories to a flag.
        /// </summary>
        public async Task ConsoleFlagCategoryCreateAsync(
            string bearerToken,
            string flagId,
             body,
            CancellationToken? cancellationToken)
        {
            if (flagId == null)
            {
                throw new ArgumentException("'flagId' is required but was null.");
            }
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/flag/{flagId}/category";
            urlpath = urlpath.Replace("{flagId}", Uri.EscapeDataString(flagId));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
        }

        /// <summary>
        /// Delete a flag.
        /// </summary>
        public async Task ConsoleFlagDeleteAsync(
            string bearerToken,
            string id,
            CancellationToken? cancellationToken)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v1/console/flag/{id}";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "DELETE";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
        }

        /// <summary>
        /// Get a flag.
        /// </summary>
        public async Task<ISatoriconsoleFlag> ConsoleFlagGetAsync(
            string bearerToken,
            string id,
            CancellationToken? cancellationToken)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v1/console/flag/{id}";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<SatoriconsoleFlag>();
        }

        /// <summary>
        /// Update an existing flag.
        /// </summary>
        public async Task<ISatoriconsoleFlag> ConsoleFlagUpdateAsync(
            string bearerToken,
            string id,
             body,
            CancellationToken? cancellationToken)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/flag/{id}";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<SatoriconsoleFlag>();
        }

        /// <summary>
        /// Create a flag variant.
        /// </summary>
        public async Task<IConsoleFlagVariant> ConsoleFlagVariantCreateAsync(
            string bearerToken,
            string id,
             body,
            CancellationToken? cancellationToken)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/flag/{id}/variant";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleFlagVariant>();
        }

        /// <summary>
        /// Delete a flag variant.
        /// </summary>
        public async Task ConsoleFlagVariantDeleteAsync(
            string bearerToken,
            string id,
            string variantId,
            CancellationToken? cancellationToken)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }
            if (variantId == null)
            {
                throw new ArgumentException("'variantId' is required but was null.");
            }

            var urlpath = "/v1/console/flag/{id}/variant/{variantId}";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));
            urlpath = urlpath.Replace("{variantId}", Uri.EscapeDataString(variantId));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "DELETE";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
        }

        /// <summary>
        /// Update an existing flag variant.
        /// </summary>
        public async Task<IConsoleFlagVariant> ConsoleFlagVariantUpdateAsync(
            string bearerToken,
            string id,
            string variantId,
             body,
            CancellationToken? cancellationToken)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }
            if (variantId == null)
            {
                throw new ArgumentException("'variantId' is required but was null.");
            }
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/flag/{id}/variant/{variantId}";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));
            urlpath = urlpath.Replace("{variantId}", Uri.EscapeDataString(variantId));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleFlagVariant>();
        }

        /// <summary>
        /// Delete a single identity.
        /// </summary>
        public async Task ConsoleIdentityDeleteAsync(
            string bearerToken,
            string id,
            CancellationToken? cancellationToken)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v1/console/identity/{id}";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "DELETE";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
        }

        /// <summary>
        /// Get a single identity.
        /// </summary>
        public async Task<IConsoleIdentity> ConsoleIdentityGetAsync(
            string bearerToken,
            string id,
            CancellationToken? cancellationToken)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v1/console/identity/{id}";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleIdentity>();
        }

        /// <summary>
        /// Update an identity.
        /// </summary>
        public async Task<IConsoleIdentity> ConsoleIdentityUpdateAsync(
            string bearerToken,
            string id,
             body,
            CancellationToken? cancellationToken)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/identity/{id}";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleIdentity>();
        }

        /// <summary>
        /// List identity audiences.
        /// </summary>
        public async Task<IConsoleIdentityAudiences> ConsoleIdentityAudienceListAsync(
            string bearerToken,
            string id,
            CancellationToken? cancellationToken)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v1/console/identity/{id}/audience";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleIdentityAudiences>();
        }

        /// <summary>
        /// List events for an identity.
        /// </summary>
        public async Task<IConsoleIdentityEvents> ConsoleIdentityEventListAsync(
            string bearerToken,
            string id,
            int? limit,
            bool? forward,
            string cursor,
            CancellationToken? cancellationToken)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v1/console/identity/{id}/event";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";
            if (limit != null) {
                queryParams = string.Concat(queryParams, "limit=", limit, "&");
            }
            if (forward != null) {
                queryParams = string.Concat(queryParams, "forward=", forward.ToString().ToLower(), "&");
            }
            if (cursor != null) {
                queryParams = string.Concat(queryParams, "cursor=", Uri.EscapeDataString(cursor), "&");
            }

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleIdentityEvents>();
        }

        /// <summary>
        /// List running experiments for an identity.
        /// </summary>
        public async Task<IConsoleIdentityExperiments> ConsoleIdentityExperimentListAsync(
            string bearerToken,
            string id,
            IEnumerable<string> categories,
            CancellationToken? cancellationToken)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v1/console/identity/{id}/experiment";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";
            foreach (var elem in categories ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "categories=", Uri.EscapeDataString(elem), "&");
            }

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleIdentityExperiments>();
        }

        /// <summary>
        /// List feature flags for an identity.
        /// </summary>
        public async Task<IConsoleIdentityFlags> ConsoleIdentityFlagListAsync(
            string bearerToken,
            string id,
            IEnumerable<string> categories,
            CancellationToken? cancellationToken)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v1/console/identity/{id}/flag";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";
            foreach (var elem in categories ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "categories=", Uri.EscapeDataString(elem), "&");
            }

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleIdentityFlags>();
        }

        /// <summary>
        /// List live events for an identity.
        /// </summary>
        public async Task<IConsoleIdentityLiveEvents> ConsoleIdentityLiveEventListAsync(
            string bearerToken,
            string id,
            IEnumerable<string> categories,
            CancellationToken? cancellationToken)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v1/console/identity/{id}/live-event";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";
            foreach (var elem in categories ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "categories=", Uri.EscapeDataString(elem), "&");
            }

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleIdentityLiveEvents>();
        }

        /// <summary>
        /// List messages for an identity.
        /// </summary>
        public async Task<IConsoleIdentityMessages> ConsoleIdentityMessageListAsync(
            string bearerToken,
            string id,
            IEnumerable<string> categories,
            int? limit,
            bool? forward,
            string cursor,
            string messageScheduleName,
            CancellationToken? cancellationToken)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v1/console/identity/{id}/message";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";
            foreach (var elem in categories ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "categories=", Uri.EscapeDataString(elem), "&");
            }
            if (limit != null) {
                queryParams = string.Concat(queryParams, "limit=", limit, "&");
            }
            if (forward != null) {
                queryParams = string.Concat(queryParams, "forward=", forward.ToString().ToLower(), "&");
            }
            if (cursor != null) {
                queryParams = string.Concat(queryParams, "cursor=", Uri.EscapeDataString(cursor), "&");
            }
            if (messageScheduleName != null) {
                queryParams = string.Concat(queryParams, "message_schedule_name=", Uri.EscapeDataString(messageScheduleName), "&");
            }

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleIdentityMessages>();
        }

        /// <summary>
        /// Get the available filters for metric insights.
        /// </summary>
        public async Task<IConsoleInsightMetricsFilters> ConsoleInsightMetricsFiltersGetAsync(
            string bearerToken,
            CancellationToken? cancellationToken)
        {

            var urlpath = "/v1/console/insights/metrics/filters";

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleInsightMetricsFilters>();
        }

        /// <summary>
        /// Get the available Ad Attribution filters for metric insights.
        /// </summary>
        public async Task<IConsoleInsightMetricsFiltersAdAttribution> ConsoleInsightMetricsFiltersAdAttributionGetAsync(
            string bearerToken,
            CancellationToken? cancellationToken)
        {

            var urlpath = "/v1/console/insights/metrics/filters/ad_attribution";

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleInsightMetricsFiltersAdAttribution>();
        }

        /// <summary>
        /// Get the user retention for a group of identities.
        /// </summary>
        public async Task<IConsoleInsightMetricsRetentionCohortGetResponse> ConsoleInsightMetricsRetentionCohortGetAsync(
            string bearerToken,
            string startTimeSec,
            string endTimeSec,
            IEnumerable<string> dayRange,
            IEnumerable<string> countryCodes,
            IEnumerable<string> gameVersions,
            IEnumerable<string> gamePlatforms,
            IEnumerable<string> liveEventIds,
            IEnumerable<string> experimentIds,
            IEnumerable<string> experimentPhaseVariants,
            CancellationToken? cancellationToken)
        {

            var urlpath = "/v1/console/insights/metrics/retention/cohort";

            var queryParams = "";
            if (startTimeSec != null) {
                queryParams = string.Concat(queryParams, "start_time_sec=", Uri.EscapeDataString(startTimeSec), "&");
            }
            if (endTimeSec != null) {
                queryParams = string.Concat(queryParams, "end_time_sec=", Uri.EscapeDataString(endTimeSec), "&");
            }
            foreach (var elem in dayRange ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "day_range=", Uri.EscapeDataString(elem), "&");
            }
            foreach (var elem in countryCodes ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "country_codes=", Uri.EscapeDataString(elem), "&");
            }
            foreach (var elem in gameVersions ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "game_versions=", Uri.EscapeDataString(elem), "&");
            }
            foreach (var elem in gamePlatforms ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "game_platforms=", Uri.EscapeDataString(elem), "&");
            }
            foreach (var elem in liveEventIds ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "live_event_ids=", Uri.EscapeDataString(elem), "&");
            }
            foreach (var elem in experimentIds ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "experiment_ids=", Uri.EscapeDataString(elem), "&");
            }
            foreach (var elem in experimentPhaseVariants ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "experiment_phase_variants=", Uri.EscapeDataString(elem), "&");
            }

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleInsightMetricsRetentionCohortGetResponse>();
        }

        /// <summary>
        /// Get the user retention over the lifetime of the game.
        /// </summary>
        public async Task<IConsoleInsightMetricsRetentionLifetimeGetResponse> ConsoleInsightMetricsRetentionLifetimeGetAsync(
            string bearerToken,
            IEnumerable<string> dayRange,
            CancellationToken? cancellationToken)
        {

            var urlpath = "/v1/console/insights/metrics/retention/lifetime";

            var queryParams = "";
            foreach (var elem in dayRange ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "day_range=", Uri.EscapeDataString(elem), "&");
            }

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleInsightMetricsRetentionLifetimeGetResponse>();
        }

        /// <summary>
        /// Get Return-On-Ad-Spent for a group of identities.
        /// </summary>
        public async Task<IConsoleInsightMetricsRoasCohortGetResponse> ConsoleInsightMetricsRoasCohortGetAsync(
            string bearerToken,
            string startTimeSec,
            string endTimeSec,
            IEnumerable<string> dayRange,
            IEnumerable<string> countryCodes,
            IEnumerable<string> adAttributionPlatforms,
            IEnumerable<string> adAttributionChannels,
            IEnumerable<string> adAttributionCampaigns,
            IEnumerable<string> adAttributionCreatives,
            IEnumerable<string> gamePlatforms,
            IEnumerable<string> gameVersions,
            IEnumerable<string> liveEventIds,
            IEnumerable<string> experimentIds,
            IEnumerable<string> experimentPhaseVariants,
            CancellationToken? cancellationToken)
        {

            var urlpath = "/v1/console/insights/metrics/roas/cohort";

            var queryParams = "";
            if (startTimeSec != null) {
                queryParams = string.Concat(queryParams, "start_time_sec=", Uri.EscapeDataString(startTimeSec), "&");
            }
            if (endTimeSec != null) {
                queryParams = string.Concat(queryParams, "end_time_sec=", Uri.EscapeDataString(endTimeSec), "&");
            }
            foreach (var elem in dayRange ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "day_range=", Uri.EscapeDataString(elem), "&");
            }
            foreach (var elem in countryCodes ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "country_codes=", Uri.EscapeDataString(elem), "&");
            }
            foreach (var elem in adAttributionPlatforms ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "ad_attribution_platforms=", Uri.EscapeDataString(elem), "&");
            }
            foreach (var elem in adAttributionChannels ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "ad_attribution_channels=", Uri.EscapeDataString(elem), "&");
            }
            foreach (var elem in adAttributionCampaigns ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "ad_attribution_campaigns=", Uri.EscapeDataString(elem), "&");
            }
            foreach (var elem in adAttributionCreatives ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "ad_attribution_creatives=", Uri.EscapeDataString(elem), "&");
            }
            foreach (var elem in gamePlatforms ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "game_platforms=", Uri.EscapeDataString(elem), "&");
            }
            foreach (var elem in gameVersions ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "game_versions=", Uri.EscapeDataString(elem), "&");
            }
            foreach (var elem in liveEventIds ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "live_event_ids=", Uri.EscapeDataString(elem), "&");
            }
            foreach (var elem in experimentIds ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "experiment_ids=", Uri.EscapeDataString(elem), "&");
            }
            foreach (var elem in experimentPhaseVariants ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "experiment_phase_variants=", Uri.EscapeDataString(elem), "&");
            }

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleInsightMetricsRoasCohortGetResponse>();
        }

        /// <summary>
        /// Get the Return-On-Ad-Spent over the lifetime of the game.
        /// </summary>
        public async Task<IConsoleInsightMetricsRoasLifetimeGetResponse> ConsoleInsightMetricsRoasLifetimeGetAsync(
            string bearerToken,
            IEnumerable<string> dayRange,
            CancellationToken? cancellationToken)
        {

            var urlpath = "/v1/console/insights/metrics/roas/lifetime";

            var queryParams = "";
            foreach (var elem in dayRange ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "day_range=", Uri.EscapeDataString(elem), "&");
            }

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleInsightMetricsRoasLifetimeGetResponse>();
        }

        /// <summary>
        /// Get a list of all live events.
        /// </summary>
        public async Task<IConsoleLiveEvents> ConsoleLiveEventListAsync(
            string bearerToken,
            IEnumerable<string> categories,
            string status,
            IEnumerable<string> search.name.or,
            string search.name.exact,
            string search.name.like,
            IEnumerable<integer> search.status.or,
            int? search.status.exact,
            IEnumerable<string> search.labelName.or,
            IEnumerable<string> search.labelName.and,
            int? pagination.limit,
            string pagination.cursor,
            CancellationToken? cancellationToken)
        {

            var urlpath = "/v1/console/live-event";

            var queryParams = "";
            foreach (var elem in categories ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "categories=", Uri.EscapeDataString(elem), "&");
            }
            if (status != null) {
                queryParams = string.Concat(queryParams, "status=", Uri.EscapeDataString(status), "&");
            }
            foreach (var elem in search.name.or ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "search.name.or=", Uri.EscapeDataString(elem), "&");
            }
            if (search.name.exact != null) {
                queryParams = string.Concat(queryParams, "search.name.exact=", Uri.EscapeDataString(search.name.exact), "&");
            }
            if (search.name.like != null) {
                queryParams = string.Concat(queryParams, "search.name.like=", Uri.EscapeDataString(search.name.like), "&");
            }
            foreach (var elem in search.status.or ?? new integer[0])
            {
                queryParams = string.Concat(queryParams, "search.status.or=", elem, "&");
            }
            if (search.status.exact != null) {
                queryParams = string.Concat(queryParams, "search.status.exact=", search.status.exact, "&");
            }
            foreach (var elem in search.labelName.or ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "search.label_name.or=", Uri.EscapeDataString(elem), "&");
            }
            foreach (var elem in search.labelName.and ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "search.label_name.and=", Uri.EscapeDataString(elem), "&");
            }
            if (pagination.limit != null) {
                queryParams = string.Concat(queryParams, "pagination.limit=", pagination.limit, "&");
            }
            if (pagination.cursor != null) {
                queryParams = string.Concat(queryParams, "pagination.cursor=", Uri.EscapeDataString(pagination.cursor), "&");
            }

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleLiveEvents>();
        }

        /// <summary>
        /// Create a new live event.
        /// </summary>
        public async Task<IConsoleLiveEvent> ConsoleLiveEventCreateAsync(
            string bearerToken,
            ConsoleLiveEventCreateRequest body,
            CancellationToken? cancellationToken)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/live-event";

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleLiveEvent>();
        }

        /// <summary>
        /// Get a list of all live events for the calendar timeframe view.
        /// </summary>
        public async Task<IConsoleLiveEventCalendarResult> ConsoleLiveEventCalendarListAsync(
            string bearerToken,
            string startTimeSec,
            string endTimeSec,
            IEnumerable<string> search.name.or,
            string search.name.exact,
            string search.name.like,
            IEnumerable<string> search.labelName.or,
            IEnumerable<string> search.labelName.and,
            CancellationToken? cancellationToken)
        {

            var urlpath = "/v1/console/live-event/calendar";

            var queryParams = "";
            if (startTimeSec != null) {
                queryParams = string.Concat(queryParams, "start_time_sec=", Uri.EscapeDataString(startTimeSec), "&");
            }
            if (endTimeSec != null) {
                queryParams = string.Concat(queryParams, "end_time_sec=", Uri.EscapeDataString(endTimeSec), "&");
            }
            foreach (var elem in search.name.or ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "search.name.or=", Uri.EscapeDataString(elem), "&");
            }
            if (search.name.exact != null) {
                queryParams = string.Concat(queryParams, "search.name.exact=", Uri.EscapeDataString(search.name.exact), "&");
            }
            if (search.name.like != null) {
                queryParams = string.Concat(queryParams, "search.name.like=", Uri.EscapeDataString(search.name.like), "&");
            }
            foreach (var elem in search.labelName.or ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "search.label_name.or=", Uri.EscapeDataString(elem), "&");
            }
            foreach (var elem in search.labelName.and ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "search.label_name.and=", Uri.EscapeDataString(elem), "&");
            }

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleLiveEventCalendarResult>();
        }

        /// <summary>
        /// Delete a live event.
        /// </summary>
        public async Task ConsoleLiveEventDeleteAsync(
            string bearerToken,
            string id,
            CancellationToken? cancellationToken)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v1/console/live-event/{id}";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "DELETE";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
        }

        /// <summary>
        /// Get an individual live event.
        /// </summary>
        public async Task<IConsoleLiveEvent> ConsoleLiveEventGetAsync(
            string bearerToken,
            string id,
            CancellationToken? cancellationToken)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v1/console/live-event/{id}";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleLiveEvent>();
        }

        /// <summary>
        /// Update an existing live event.
        /// </summary>
        public async Task<IConsoleLiveEvent> ConsoleLiveEventUpdateAsync(
            string bearerToken,
            string id,
            ApiConsole_LiveEventUpdateRequest body,
            CancellationToken? cancellationToken)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/live-event/{id}";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "PUT";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleLiveEvent>();
        }

        /// <summary>
        /// List the message schedules configured for a live event.
        /// </summary>
        public async Task<IConsoleLiveEventMessageScheduleListResponse> ConsoleLiveEventMessageScheduleListAsync(
            string bearerToken,
            string id,
            CancellationToken? cancellationToken)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v1/console/live-event/{id}/message";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleLiveEventMessageScheduleListResponse>();
        }

        /// <summary>
        /// Delete a live event category.
        /// </summary>
        public async Task ConsoleLiveEventCategoryDeleteAsync(
            string bearerToken,
            string liveEventId,
            string categoryId,
            CancellationToken? cancellationToken)
        {
            if (liveEventId == null)
            {
                throw new ArgumentException("'liveEventId' is required but was null.");
            }

            var urlpath = "/v1/console/live-event/{liveEventId}/category";
            urlpath = urlpath.Replace("{liveEventId}", Uri.EscapeDataString(liveEventId));

            var queryParams = "";
            if (categoryId != null) {
                queryParams = string.Concat(queryParams, "category_id=", Uri.EscapeDataString(categoryId), "&");
            }

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "DELETE";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
        }

        /// <summary>
        /// Add categories to a live event.
        /// </summary>
        public async Task ConsoleLiveEventCategoryCreateAsync(
            string bearerToken,
            string liveEventId,
             body,
            CancellationToken? cancellationToken)
        {
            if (liveEventId == null)
            {
                throw new ArgumentException("'liveEventId' is required but was null.");
            }
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/live-event/{liveEventId}/category";
            urlpath = urlpath.Replace("{liveEventId}", Uri.EscapeDataString(liveEventId));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
        }

        /// <summary>
        /// List flags associated to a live event.
        /// </summary>
        public async Task<IConsoleLiveEventFlagListResponse> ConsoleLiveEventFlagListAsync(
            string bearerToken,
            string liveEventId,
            CancellationToken? cancellationToken)
        {
            if (liveEventId == null)
            {
                throw new ArgumentException("'liveEventId' is required but was null.");
            }

            var urlpath = "/v1/console/live-event/{liveEventId}/flag";
            urlpath = urlpath.Replace("{liveEventId}", Uri.EscapeDataString(liveEventId));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleLiveEventFlagListResponse>();
        }

        /// <summary>
        /// Add a flag to a live event.
        /// </summary>
        public async Task<IConsoleLiveEventFlag> ConsoleLiveEventFlagCreateAsync(
            string bearerToken,
            string liveEventId,
             body,
            CancellationToken? cancellationToken)
        {
            if (liveEventId == null)
            {
                throw new ArgumentException("'liveEventId' is required but was null.");
            }
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/live-event/{liveEventId}/flag";
            urlpath = urlpath.Replace("{liveEventId}", Uri.EscapeDataString(liveEventId));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleLiveEventFlag>();
        }

        /// <summary>
        /// Remove a flag associated to a live event.
        /// </summary>
        public async Task ConsoleLiveEventFlagDeleteAsync(
            string bearerToken,
            string liveEventId,
            string id,
            CancellationToken? cancellationToken)
        {
            if (liveEventId == null)
            {
                throw new ArgumentException("'liveEventId' is required but was null.");
            }
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v1/console/live-event/{liveEventId}/flag/{id}";
            urlpath = urlpath.Replace("{liveEventId}", Uri.EscapeDataString(liveEventId));
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "DELETE";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
        }

        /// <summary>
        /// Update a flag to a live event.
        /// </summary>
        public async Task<IConsoleLiveEventFlag> ConsoleLiveEventFlagUpdateAsync(
            string bearerToken,
            string liveEventId,
            string id,
            ApiConsole_LiveEventFlagUpdateRequest body,
            CancellationToken? cancellationToken)
        {
            if (liveEventId == null)
            {
                throw new ArgumentException("'liveEventId' is required but was null.");
            }
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/live-event/{liveEventId}/flag/{id}";
            urlpath = urlpath.Replace("{liveEventId}", Uri.EscapeDataString(liveEventId));
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "PUT";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleLiveEventFlag>();
        }

        /// <summary>
        /// Create a flag variant of a flag associated to a live event.
        /// </summary>
        public async Task<IConsoleLiveEventFlagVariant> ConsoleLiveEventFlagVariantCreateAsync(
            string bearerToken,
            string liveEventId,
            string liveEventFlagId,
             body,
            CancellationToken? cancellationToken)
        {
            if (liveEventId == null)
            {
                throw new ArgumentException("'liveEventId' is required but was null.");
            }
            if (liveEventFlagId == null)
            {
                throw new ArgumentException("'liveEventFlagId' is required but was null.");
            }
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/live-event/{liveEventId}/flag/{liveEventFlagId}/variant";
            urlpath = urlpath.Replace("{liveEventId}", Uri.EscapeDataString(liveEventId));
            urlpath = urlpath.Replace("{liveEventFlagId}", Uri.EscapeDataString(liveEventFlagId));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleLiveEventFlagVariant>();
        }

        /// <summary>
        /// Delete a flag variant of a flag associated to a live event.
        /// </summary>
        public async Task ConsoleLiveEventFlagVariantDeleteAsync(
            string bearerToken,
            string liveEventId,
            string liveEventFlagId,
            string id,
            CancellationToken? cancellationToken)
        {
            if (liveEventId == null)
            {
                throw new ArgumentException("'liveEventId' is required but was null.");
            }
            if (liveEventFlagId == null)
            {
                throw new ArgumentException("'liveEventFlagId' is required but was null.");
            }
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v1/console/live-event/{liveEventId}/flag/{liveEventFlagId}/variant/{id}";
            urlpath = urlpath.Replace("{liveEventId}", Uri.EscapeDataString(liveEventId));
            urlpath = urlpath.Replace("{liveEventFlagId}", Uri.EscapeDataString(liveEventFlagId));
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "DELETE";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
        }

        /// <summary>
        /// Update a flag variant of a flag associated to a live event.
        /// </summary>
        public async Task<IConsoleLiveEventFlagVariant> ConsoleLiveEventFlagVariantUpdateAsync(
            string bearerToken,
            string liveEventId,
            string liveEventFlagId,
            string id,
            ApiConsole_LiveEventFlagVariantUpdateRequest body,
            CancellationToken? cancellationToken)
        {
            if (liveEventId == null)
            {
                throw new ArgumentException("'liveEventId' is required but was null.");
            }
            if (liveEventFlagId == null)
            {
                throw new ArgumentException("'liveEventFlagId' is required but was null.");
            }
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/live-event/{liveEventId}/flag/{liveEventFlagId}/variant/{id}";
            urlpath = urlpath.Replace("{liveEventId}", Uri.EscapeDataString(liveEventId));
            urlpath = urlpath.Replace("{liveEventFlagId}", Uri.EscapeDataString(liveEventFlagId));
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "PUT";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleLiveEventFlagVariant>();
        }

        /// <summary>
        /// Create a message schedule for a live event.
        /// </summary>
        public async Task<IConsoleMessageSchedule> ConsoleLiveEventMessageScheduleCreateAsync(
            string bearerToken,
            string liveEventId,
             body,
            CancellationToken? cancellationToken)
        {
            if (liveEventId == null)
            {
                throw new ArgumentException("'liveEventId' is required but was null.");
            }
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/live-event/{liveEventId}/message";
            urlpath = urlpath.Replace("{liveEventId}", Uri.EscapeDataString(liveEventId));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleMessageSchedule>();
        }

        /// <summary>
        /// Delete a message schedule for a live event.
        /// </summary>
        public async Task ConsoleLiveEventMessageScheduleDeleteAsync(
            string bearerToken,
            string liveEventId,
            string id,
            CancellationToken? cancellationToken)
        {
            if (liveEventId == null)
            {
                throw new ArgumentException("'liveEventId' is required but was null.");
            }
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v1/console/live-event/{liveEventId}/message/{id}";
            urlpath = urlpath.Replace("{liveEventId}", Uri.EscapeDataString(liveEventId));
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "DELETE";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
        }

        /// <summary>
        /// Update a message schedule for a live event.
        /// </summary>
        public async Task<IConsoleMessageSchedule> ConsoleLiveEventMessageScheduleUpdateAsync(
            string bearerToken,
            string liveEventId,
            string id,
            ApiConsole_LiveEventMessageScheduleUpdateRequest body,
            CancellationToken? cancellationToken)
        {
            if (liveEventId == null)
            {
                throw new ArgumentException("'liveEventId' is required but was null.");
            }
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/live-event/{liveEventId}/message/{id}";
            urlpath = urlpath.Replace("{liveEventId}", Uri.EscapeDataString(liveEventId));
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "PUT";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleMessageSchedule>();
        }

        /// <summary>
        /// List the runs for a given live event/
        /// </summary>
        public async Task<IConsoleLiveEventRunListResponse> ConsoleLiveEventRunListAsync(
            string bearerToken,
            string liveEventId,
            CancellationToken? cancellationToken)
        {
            if (liveEventId == null)
            {
                throw new ArgumentException("'liveEventId' is required but was null.");
            }

            var urlpath = "/v1/console/live-event/{liveEventId}/run";
            urlpath = urlpath.Replace("{liveEventId}", Uri.EscapeDataString(liveEventId));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleLiveEventRunListResponse>();
        }

        /// <summary>
        /// Get the run resuls for a given live event/
        /// </summary>
        public async Task<IConsoleLiveEventRunCandidateListResponse> ConsoleLiveEventRunCandidateIdentityListAsync(
            string bearerToken,
            string liveEventId,
            string id,
            string filter,
            int? limit,
            string cursor,
            CancellationToken? cancellationToken)
        {
            if (liveEventId == null)
            {
                throw new ArgumentException("'liveEventId' is required but was null.");
            }
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v1/console/live-event/{liveEventId}/run/{id}/candidate";
            urlpath = urlpath.Replace("{liveEventId}", Uri.EscapeDataString(liveEventId));
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";
            if (filter != null) {
                queryParams = string.Concat(queryParams, "filter=", Uri.EscapeDataString(filter), "&");
            }
            if (limit != null) {
                queryParams = string.Concat(queryParams, "limit=", limit, "&");
            }
            if (cursor != null) {
                queryParams = string.Concat(queryParams, "cursor=", Uri.EscapeDataString(cursor), "&");
            }

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleLiveEventRunCandidateListResponse>();
        }

        /// <summary>
        /// Get the run participant identity list for a given live event.
        /// </summary>
        public async Task<IConsoleLiveEventRunParticipantListResponse> ConsoleLiveEventRunParticipantIdentityListAsync(
            string bearerToken,
            string liveEventId,
            string id,
            string filter,
            int? limit,
            string cursor,
            CancellationToken? cancellationToken)
        {
            if (liveEventId == null)
            {
                throw new ArgumentException("'liveEventId' is required but was null.");
            }
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v1/console/live-event/{liveEventId}/run/{id}/participant";
            urlpath = urlpath.Replace("{liveEventId}", Uri.EscapeDataString(liveEventId));
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";
            if (filter != null) {
                queryParams = string.Concat(queryParams, "filter=", Uri.EscapeDataString(filter), "&");
            }
            if (limit != null) {
                queryParams = string.Concat(queryParams, "limit=", limit, "&");
            }
            if (cursor != null) {
                queryParams = string.Concat(queryParams, "cursor=", Uri.EscapeDataString(cursor), "&");
            }

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleLiveEventRunParticipantListResponse>();
        }

        /// <summary>
        /// Send messages directly.
        /// </summary>
        public async Task<IConsoleMessageDirectSendResponse> ConsoleMessageDirectSendAsync(
            string bearerToken,
            ConsoleMessageDirectSendRequest body,
            CancellationToken? cancellationToken)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/message-direct";

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleMessageDirectSendResponse>();
        }

        /// <summary>
        /// List the existing message schedules.
        /// </summary>
        public async Task<IConsoleMessageScheduleListResponse> ConsoleMessageScheduleListAsync(
            string bearerToken,
            string filter,
            IEnumerable<string> categories,
            int? limit,
            string cursor,
            IEnumerable<string> search.name.or,
            string search.name.exact,
            string search.name.like,
            IEnumerable<string> search.labelName.or,
            IEnumerable<string> search.labelName.and,
            int? pagination.limit,
            string pagination.cursor,
            CancellationToken? cancellationToken)
        {

            var urlpath = "/v1/console/message-schedule";

            var queryParams = "";
            if (filter != null) {
                queryParams = string.Concat(queryParams, "filter=", Uri.EscapeDataString(filter), "&");
            }
            foreach (var elem in categories ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "categories=", Uri.EscapeDataString(elem), "&");
            }
            if (limit != null) {
                queryParams = string.Concat(queryParams, "limit=", limit, "&");
            }
            if (cursor != null) {
                queryParams = string.Concat(queryParams, "cursor=", Uri.EscapeDataString(cursor), "&");
            }
            foreach (var elem in search.name.or ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "search.name.or=", Uri.EscapeDataString(elem), "&");
            }
            if (search.name.exact != null) {
                queryParams = string.Concat(queryParams, "search.name.exact=", Uri.EscapeDataString(search.name.exact), "&");
            }
            if (search.name.like != null) {
                queryParams = string.Concat(queryParams, "search.name.like=", Uri.EscapeDataString(search.name.like), "&");
            }
            foreach (var elem in search.labelName.or ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "search.label_name.or=", Uri.EscapeDataString(elem), "&");
            }
            foreach (var elem in search.labelName.and ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "search.label_name.and=", Uri.EscapeDataString(elem), "&");
            }
            if (pagination.limit != null) {
                queryParams = string.Concat(queryParams, "pagination.limit=", pagination.limit, "&");
            }
            if (pagination.cursor != null) {
                queryParams = string.Concat(queryParams, "pagination.cursor=", Uri.EscapeDataString(pagination.cursor), "&");
            }

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleMessageScheduleListResponse>();
        }

        /// <summary>
        /// Create a message schedule.
        /// </summary>
        public async Task<IConsoleMessageSchedule> ConsoleMessageScheduleCreateAsync(
            string bearerToken,
            ConsoleMessageScheduleCreateRequest body,
            CancellationToken? cancellationToken)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/message-schedule";

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleMessageSchedule>();
        }

        /// <summary>
        /// Delete a message schedule.
        /// </summary>
        public async Task ConsoleMessageScheduleDeleteAsync(
            string bearerToken,
            string id,
            CancellationToken? cancellationToken)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v1/console/message-schedule/{id}";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "DELETE";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
        }

        /// <summary>
        /// Update a message schedule.
        /// </summary>
        public async Task<IConsoleMessageSchedule> ConsoleMessageScheduleUpdateAsync(
            string bearerToken,
            string id,
            ApiConsole_MessageScheduleUpdateRequest body,
            CancellationToken? cancellationToken)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/message-schedule/{id}";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "PUT";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleMessageSchedule>();
        }

        /// <summary>
        /// Delete a message schedule category.
        /// </summary>
        public async Task ConsoleMessageScheduleCategoryDeleteAsync(
            string bearerToken,
            string messageScheduleId,
            string categoryId,
            CancellationToken? cancellationToken)
        {
            if (messageScheduleId == null)
            {
                throw new ArgumentException("'messageScheduleId' is required but was null.");
            }

            var urlpath = "/v1/console/message-schedule/{messageScheduleId}/category";
            urlpath = urlpath.Replace("{messageScheduleId}", Uri.EscapeDataString(messageScheduleId));

            var queryParams = "";
            if (categoryId != null) {
                queryParams = string.Concat(queryParams, "category_id=", Uri.EscapeDataString(categoryId), "&");
            }

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "DELETE";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
        }

        /// <summary>
        /// Add categories to a message schedule.
        /// </summary>
        public async Task ConsoleMessageScheduleCategoryCreateAsync(
            string bearerToken,
            string messageScheduleId,
             body,
            CancellationToken? cancellationToken)
        {
            if (messageScheduleId == null)
            {
                throw new ArgumentException("'messageScheduleId' is required but was null.");
            }
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/message-schedule/{messageScheduleId}/category";
            urlpath = urlpath.Replace("{messageScheduleId}", Uri.EscapeDataString(messageScheduleId));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
        }

        /// <summary>
        /// List all Message Integration configurations.
        /// </summary>
        public async Task<IConsoleMessageIntegrationListResponse> ConsoleMessageIntegrationListAsync(
            string bearerToken,
            CancellationToken? cancellationToken)
        {

            var urlpath = "/v1/console/message_integration";

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleMessageIntegrationListResponse>();
        }

        /// <summary>
        /// Update a Message Integration configuration.
        /// </summary>
        public async Task<IConsoleMessageIntegration> ConsoleMessageIntegrationUpdateAsync(
            string bearerToken,
            ConsoleMessageIntegrationUpdateRequest body,
            CancellationToken? cancellationToken)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/message_integration";

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "PUT";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleMessageIntegration>();
        }

        /// <summary>
        /// Get a list of available metrics.
        /// </summary>
        public async Task<IConsoleMetrics> ConsoleMetricListAsync(
            string bearerToken,
            CancellationToken? cancellationToken)
        {

            var urlpath = "/v1/console/metric";

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleMetrics>();
        }

        /// <summary>
        /// Create a new metric definition.
        /// </summary>
        public async Task<IConsoleMetric> ConsoleMetricCreateAsync(
            string bearerToken,
            ConsoleMetricCreateRequest body,
            CancellationToken? cancellationToken)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/metric";

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleMetric>();
        }

        /// <summary>
        /// Get data for a metric.
        /// </summary>
        public async Task<IConsoleMetricData> ConsoleMetricDataGetAsync(
            string bearerToken,
            ConsoleMetricDataGetRequest body,
            CancellationToken? cancellationToken)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/metric/data";

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleMetricData>();
        }

        /// <summary>
        /// Delete a metric.
        /// </summary>
        public async Task ConsoleMetricDeleteAsync(
            string bearerToken,
            string id,
            CancellationToken? cancellationToken)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v1/console/metric/{id}";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "DELETE";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
        }

        /// <summary>
        /// Update a metric definition.
        /// </summary>
        public async Task<IConsoleMetric> ConsoleMetricUpdateAsync(
            string bearerToken,
            string id,
            ApiConsole_MetricUpdateRequest body,
            CancellationToken? cancellationToken)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/metric/{id}";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "PUT";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleMetric>();
        }

        /// <summary>
        /// List all custom property configurations.
        /// </summary>
        public async Task<IConsolePropertyConfigurations> ConsolePropertyConfigurationListAsync(
            string bearerToken,
            CancellationToken? cancellationToken)
        {

            var urlpath = "/v1/console/property";

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsolePropertyConfigurations>();
        }

        /// <summary>
        /// Create a new custom property configuration.
        /// </summary>
        public async Task<IConsolePropertyConfiguration> ConsolePropertyConfigurationCreateAsync(
            string bearerToken,
            ConsolePropertyConfigurationCreateRequest body,
            CancellationToken? cancellationToken)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/property";

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsolePropertyConfiguration>();
        }

        /// <summary>
        /// Delete a specific custom property configuration.
        /// </summary>
        public async Task ConsolePropertyConfigurationDeleteAsync(
            string bearerToken,
            string name,
            CancellationToken? cancellationToken)
        {
            if (name == null)
            {
                throw new ArgumentException("'name' is required but was null.");
            }

            var urlpath = "/v1/console/property/{name}";
            urlpath = urlpath.Replace("{name}", Uri.EscapeDataString(name));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "DELETE";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
        }

        /// <summary>
        /// 
        /// </summary>
        public async Task<IConsoleRejectedEvents> ConsoleRejectedEventsListAsync(
            string bearerToken,
            CancellationToken? cancellationToken)
        {

            var urlpath = "/v1/console/rejected-events";

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleRejectedEvents>();
        }

        /// <summary>
        /// Get retention for a group of identities.
        /// </summary>
        public async Task<IConsoleRetentionStatsGetResponse> ConsoleRetentionStatsGetAsync(
            string bearerToken,
            string startTimeSec,
            string endTimeSec,
            IEnumerable<string> countryCodes,
            IEnumerable<string> gameVersions,
            IEnumerable<string> platforms,
            IEnumerable<string> liveEventIds,
            IEnumerable<string> experimentIds,
            IEnumerable<string> experimentPhaseVariants,
            CancellationToken? cancellationToken)
        {

            var urlpath = "/v1/console/retention-stats";

            var queryParams = "";
            if (startTimeSec != null) {
                queryParams = string.Concat(queryParams, "start_time_sec=", Uri.EscapeDataString(startTimeSec), "&");
            }
            if (endTimeSec != null) {
                queryParams = string.Concat(queryParams, "end_time_sec=", Uri.EscapeDataString(endTimeSec), "&");
            }
            foreach (var elem in countryCodes ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "country_codes=", Uri.EscapeDataString(elem), "&");
            }
            foreach (var elem in gameVersions ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "game_versions=", Uri.EscapeDataString(elem), "&");
            }
            foreach (var elem in platforms ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "platforms=", Uri.EscapeDataString(elem), "&");
            }
            foreach (var elem in liveEventIds ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "live_event_ids=", Uri.EscapeDataString(elem), "&");
            }
            foreach (var elem in experimentIds ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "experiment_ids=", Uri.EscapeDataString(elem), "&");
            }
            foreach (var elem in experimentPhaseVariants ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "experiment_phase_variants=", Uri.EscapeDataString(elem), "&");
            }

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleRetentionStatsGetResponse>();
        }

        /// <summary>
        /// Get the available retention filters.
        /// </summary>
        public async Task<IConsoleRetentionStatsFilters> ConsoleRetentionStatsFiltersGetAsync(
            string bearerToken,
            CancellationToken? cancellationToken)
        {

            var urlpath = "/v1/console/retention-stats/filters";

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleRetentionStatsFilters>();
        }

        /// <summary>
        /// Get a list of all schemas.
        /// </summary>
        public async Task<IConsoleSchemas> ConsoleSchemaListAsync(
            string bearerToken,
            CancellationToken? cancellationToken)
        {

            var urlpath = "/v1/console/schema";

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleSchemas>();
        }

        /// <summary>
        /// 
        /// </summary>
        public async Task<ISatoriconsoleSchema> ConsoleSchemaCreateAsync(
            string bearerToken,
            ConsoleSchemaCreateRequest body,
            CancellationToken? cancellationToken)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/schema";

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<SatoriconsoleSchema>();
        }

        /// <summary>
        /// Infer schema from data.
        /// </summary>
        public async Task<IConsoleInferredSchema> ConsoleSchemaInferAsync(
            string bearerToken,
            string data,
            CancellationToken? cancellationToken)
        {

            var urlpath = "/v1/console/schema/infer";

            var queryParams = "";
            if (data != null) {
                queryParams = string.Concat(queryParams, "data=", Uri.EscapeDataString(data), "&");
            }

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleInferredSchema>();
        }

        /// <summary>
        /// Delete a schema.
        /// </summary>
        public async Task ConsoleSchemaDeleteAsync(
            string bearerToken,
            string id,
            CancellationToken? cancellationToken)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v1/console/schema/{id}";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "DELETE";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
        }

        /// <summary>
        /// Get an individual schema.
        /// </summary>
        public async Task<ISatoriconsoleSchema> ConsoleSchemaGetAsync(
            string bearerToken,
            string id,
            CancellationToken? cancellationToken)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v1/console/schema/{id}";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<SatoriconsoleSchema>();
        }

        /// <summary>
        /// Update an existing schema.
        /// </summary>
        public async Task<ISatoriconsoleSchema> ConsoleSchemaUpdateAsync(
            string bearerToken,
            string id,
             body,
            CancellationToken? cancellationToken)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/schema/{id}";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<SatoriconsoleSchema>();
        }

        /// <summary>
        /// Get an individual schema's template.
        /// </summary>
        public async Task<IConsoleSchemaTemplate> ConsoleSchemaTemplateGetAsync(
            string bearerToken,
            string id,
            CancellationToken? cancellationToken)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v1/console/schema/{id}/template";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleSchemaTemplate>();
        }

        /// <summary>
        /// Get a list of server keys.
        /// </summary>
        public async Task<IConsoleServerKeys> ConsoleServerKeyListAsync(
            string bearerToken,
            CancellationToken? cancellationToken)
        {

            var urlpath = "/v1/console/serverkey";

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleServerKeys>();
        }

        /// <summary>
        /// Create a new server key.
        /// </summary>
        public async Task<IConsoleServerKey> ConsoleServerKeyCreateAsync(
            string bearerToken,
            ConsoleServerKeyCreateRequest body,
            CancellationToken? cancellationToken)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/serverkey";

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleServerKey>();
        }

        /// <summary>
        /// Delete a server key.
        /// </summary>
        public async Task ConsoleServerKeyDeleteAsync(
            string bearerToken,
            string name,
            CancellationToken? cancellationToken)
        {
            if (name == null)
            {
                throw new ArgumentException("'name' is required but was null.");
            }

            var urlpath = "/v1/console/serverkey/{name}";
            urlpath = urlpath.Replace("{name}", Uri.EscapeDataString(name));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "DELETE";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
        }

        /// <summary>
        /// Rotate the server key.
        /// </summary>
        public async Task<IConsoleServerKey> ConsoleServerKeyRotateAsync(
            string bearerToken,
            string name,
            CancellationToken? cancellationToken)
        {
            if (name == null)
            {
                throw new ArgumentException("'name' is required but was null.");
            }

            var urlpath = "/v1/console/serverkey/{name}/rotate";
            urlpath = urlpath.Replace("{name}", Uri.EscapeDataString(name));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleServerKey>();
        }

        /// <summary>
        /// Get a list of all settings.
        /// </summary>
        public async Task<IConsoleSettings> ConsoleSettingListAsync(
            string bearerToken,
            IEnumerable<string> names,
            CancellationToken? cancellationToken)
        {

            var urlpath = "/v1/console/setting";

            var queryParams = "";
            foreach (var elem in names ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "names=", Uri.EscapeDataString(elem), "&");
            }

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleSettings>();
        }

        /// <summary>
        /// 
        /// </summary>
        public async Task<IConsoleSetting> ConsoleSettingGetAsync(
            string bearerToken,
            string name,
            CancellationToken? cancellationToken)
        {
            if (name == null)
            {
                throw new ArgumentException("'name' is required but was null.");
            }

            var urlpath = "/v1/console/setting/{name}";
            urlpath = urlpath.Replace("{name}", Uri.EscapeDataString(name));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleSetting>();
        }

        /// <summary>
        /// Update an existing setting.
        /// </summary>
        public async Task<IConsoleSetting> ConsoleSettingUpdateAsync(
            string bearerToken,
            string name,
             body,
            CancellationToken? cancellationToken)
        {
            if (name == null)
            {
                throw new ArgumentException("'name' is required but was null.");
            }
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/setting/{name}";
            urlpath = urlpath.Replace("{name}", Uri.EscapeDataString(name));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleSetting>();
        }

        /// <summary>
        /// List templates.
        /// </summary>
        public async Task<IConsoleTemplateListResponse> ConsoleTemplateListAsync(
            string bearerToken,
            IEnumerable<string> search.name.or,
            string search.name.exact,
            string search.name.like,
            IEnumerable<string> search.labelName.or,
            IEnumerable<string> search.labelName.and,
            int? pagination.limit,
            string pagination.cursor,
            CancellationToken? cancellationToken)
        {

            var urlpath = "/v1/console/template";

            var queryParams = "";
            foreach (var elem in search.name.or ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "search.name.or=", Uri.EscapeDataString(elem), "&");
            }
            if (search.name.exact != null) {
                queryParams = string.Concat(queryParams, "search.name.exact=", Uri.EscapeDataString(search.name.exact), "&");
            }
            if (search.name.like != null) {
                queryParams = string.Concat(queryParams, "search.name.like=", Uri.EscapeDataString(search.name.like), "&");
            }
            foreach (var elem in search.labelName.or ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "search.label_name.or=", Uri.EscapeDataString(elem), "&");
            }
            foreach (var elem in search.labelName.and ?? new string[0])
            {
                queryParams = string.Concat(queryParams, "search.label_name.and=", Uri.EscapeDataString(elem), "&");
            }
            if (pagination.limit != null) {
                queryParams = string.Concat(queryParams, "pagination.limit=", pagination.limit, "&");
            }
            if (pagination.cursor != null) {
                queryParams = string.Concat(queryParams, "pagination.cursor=", Uri.EscapeDataString(pagination.cursor), "&");
            }

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleTemplateListResponse>();
        }

        /// <summary>
        /// Create a template.
        /// </summary>
        public async Task<IConsoleTemplate> ConsoleTemplateCreateAsync(
            string bearerToken,
            ConsoleTemplateCreateRequest body,
            CancellationToken? cancellationToken)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/template";

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleTemplate>();
        }

        /// <summary>
        /// Delete a template.
        /// </summary>
        public async Task ConsoleTemplateDeleteAsync(
            string bearerToken,
            string id,
            CancellationToken? cancellationToken)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v1/console/template/{id}";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "DELETE";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
        }

        /// <summary>
        /// Get a template.
        /// </summary>
        public async Task<IConsoleTemplate> ConsoleTemplateGetAsync(
            string bearerToken,
            string id,
            CancellationToken? cancellationToken)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v1/console/template/{id}";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleTemplate>();
        }

        /// <summary>
        /// Update  a template.
        /// </summary>
        public async Task<IConsoleTemplate> ConsoleTemplateUpdateAsync(
            string bearerToken,
            string id,
            ApiConsole_TemplateUpdateRequest body,
            CancellationToken? cancellationToken)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/template/{id}";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "PUT";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleTemplate>();
        }

        /// <summary>
        /// Preview a template.
        /// </summary>
        public async Task<IConsoleTemplatePreviewResponse> ConsoleTemplatePreviewAsync(
            string bearerToken,
            string templateId,
             body,
            CancellationToken? cancellationToken)
        {
            if (templateId == null)
            {
                throw new ArgumentException("'templateId' is required but was null.");
            }
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/template/{templateId}/preview";
            urlpath = urlpath.Replace("{templateId}", Uri.EscapeDataString(templateId));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleTemplatePreviewResponse>();
        }

        /// <summary>
        /// Create a template variant.
        /// </summary>
        public async Task<IConsoleTemplateVariant> ConsoleTemplateVariantCreateAsync(
            string bearerToken,
            string templateId,
             body,
            CancellationToken? cancellationToken)
        {
            if (templateId == null)
            {
                throw new ArgumentException("'templateId' is required but was null.");
            }
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/template/{templateId}/variant";
            urlpath = urlpath.Replace("{templateId}", Uri.EscapeDataString(templateId));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleTemplateVariant>();
        }

        /// <summary>
        /// Delete a template variant.
        /// </summary>
        public async Task ConsoleTemplateVariantDeleteAsync(
            string bearerToken,
            string templateId,
            string language,
            CancellationToken? cancellationToken)
        {
            if (templateId == null)
            {
                throw new ArgumentException("'templateId' is required but was null.");
            }
            if (language == null)
            {
                throw new ArgumentException("'language' is required but was null.");
            }

            var urlpath = "/v1/console/template/{templateId}/variant/{language}";
            urlpath = urlpath.Replace("{templateId}", Uri.EscapeDataString(templateId));
            urlpath = urlpath.Replace("{language}", Uri.EscapeDataString(language));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "DELETE";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
        }

        /// <summary>
        /// Update a template variant.
        /// </summary>
        public async Task<IConsoleTemplateVariant> ConsoleTemplateVariantUpdateAsync(
            string bearerToken,
            string templateId,
            string language,
            ApiConsole_TemplateVariantUpdateRequest body,
            CancellationToken? cancellationToken)
        {
            if (templateId == null)
            {
                throw new ArgumentException("'templateId' is required but was null.");
            }
            if (language == null)
            {
                throw new ArgumentException("'language' is required but was null.");
            }
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/template/{templateId}/variant/{language}";
            urlpath = urlpath.Replace("{templateId}", Uri.EscapeDataString(templateId));
            urlpath = urlpath.Replace("{language}", Uri.EscapeDataString(language));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "PUT";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleTemplateVariant>();
        }

        /// <summary>
        /// Get a list of all console users.
        /// </summary>
        public async Task<IConsoleUsers> ConsoleUserListAsync(
            string bearerToken,
            CancellationToken? cancellationToken)
        {

            var urlpath = "/v1/console/user";

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleUsers>();
        }

        /// <summary>
        /// Create a new user, triggering an invitation.
        /// </summary>
        public async Task<IConsoleUserCreateResponse> ConsoleUserCreateAsync(
            string bearerToken,
            ConsoleUserCreateRequest body,
            CancellationToken? cancellationToken)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/user";

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleUserCreateResponse>();
        }

        /// <summary>
        /// Delete a user.
        /// </summary>
        public async Task ConsoleUserDeleteAsync(
            string bearerToken,
            string id,
            CancellationToken? cancellationToken)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v1/console/user/{id}";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "DELETE";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
        }

        /// <summary>
        /// Get a User
        /// </summary>
        public async Task<IConsoleUser> ConsoleUserGetAsync(
            string bearerToken,
            string id,
            CancellationToken? cancellationToken)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v1/console/user/{id}";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleUser>();
        }

        /// <summary>
        /// Update an existing user.
        /// </summary>
        public async Task<IConsoleUser> ConsoleUserUpdateAsync(
            string bearerToken,
            string id,
             body,
            CancellationToken? cancellationToken)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/user/{id}";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleUser>();
        }

        /// <summary>
        /// Reset a user's multi-factor authentication credentials.
        /// </summary>
        public async Task ConsoleUserResetMfaAsync(
            string bearerToken,
            string id,
            CancellationToken? cancellationToken)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v1/console/user/{id}/reset/mfa";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
        }

        /// <summary>
        /// Reset a user's password.
        /// </summary>
        public async Task<IConsoleUserResetResponse> ConsoleUserResetPasswordAsync(
            string bearerToken,
            string id,
            CancellationToken? cancellationToken)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v1/console/user/{id}/reset/password";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleUserResetResponse>();
        }

        /// <summary>
        /// Get a list of all webhooks.
        /// </summary>
        public async Task<IConsoleWebhooks> ConsoleWebhookListAsync(
            string bearerToken,
            CancellationToken? cancellationToken)
        {

            var urlpath = "/v1/console/webhook";

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleWebhooks>();
        }

        /// <summary>
        /// Update an existing webhook.
        /// </summary>
        public async Task<IConsoleWebhook> ConsoleWebhookCreateAsync(
            string bearerToken,
            ConsoleWebhookCreateRequest body,
            CancellationToken? cancellationToken)
        {
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/webhook";

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleWebhook>();
        }

        /// <summary>
        /// Get all webhook test payloads.
        /// </summary>
        public async Task<IWebhookTestPayloads> ConsoleWebhookGetTestPayloadsAsync(
            string bearerToken,
            CancellationToken? cancellationToken)
        {

            var urlpath = "/v1/console/webhook/test-payloads";

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<WebhookTestPayloads>();
        }

        /// <summary>
        /// Delete an existing webhook.
        /// </summary>
        public async Task ConsoleWebhookDeleteAsync(
            string bearerToken,
            string id,
            CancellationToken? cancellationToken)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v1/console/webhook/{id}";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "DELETE";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
        }

        /// <summary>
        /// Get a specific webhook.
        /// </summary>
        public async Task<IConsoleWebhook> ConsoleWebhookGetAsync(
            string bearerToken,
            string id,
            CancellationToken? cancellationToken)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v1/console/webhook/{id}";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleWebhook>();
        }

        /// <summary>
        /// Update an existing webhook.
        /// </summary>
        public async Task<IConsoleWebhook> ConsoleWebhookUpdateAsync(
            string bearerToken,
            string id,
            ApiConsole_WebhookUpdateRequest body,
            CancellationToken? cancellationToken)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/webhook/{id}";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "PUT";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleWebhook>();
        }

        /// <summary>
        /// List webhook events.
        /// </summary>
        public async Task<IConsoleWebhookEventListResponse> ConsoleWebhookEventListAsync(
            string bearerToken,
            string id,
            int? limit,
            string cursor,
            string status,
            CancellationToken? cancellationToken)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v1/console/webhook/{id}/event";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";
            if (limit != null) {
                queryParams = string.Concat(queryParams, "limit=", limit, "&");
            }
            if (cursor != null) {
                queryParams = string.Concat(queryParams, "cursor=", Uri.EscapeDataString(cursor), "&");
            }
            if (status != null) {
                queryParams = string.Concat(queryParams, "status=", Uri.EscapeDataString(status), "&");
            }

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "GET";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleWebhookEventListResponse>();
        }

        /// <summary>
        /// Reset a webhook's secret.
        /// </summary>
        public async Task<IConsoleWebhook> ConsoleWebhookResetSecretAsync(
            string bearerToken,
            string id,
            CancellationToken? cancellationToken)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v1/console/webhook/{id}/reset";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var contents = await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
            return contents.FromJson<ConsoleWebhook>();
        }

        /// <summary>
        /// Send test payload to webhook.
        /// </summary>
        public async Task ConsoleWebhookTestPayloadAsync(
            string bearerToken,
            string id,
             body,
            CancellationToken? cancellationToken)
        {
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v1/console/webhook/{id}/test-payload";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var queryParams = "";

            string path = _baseUri.AbsolutePath.TrimEnd('/') + urlpath;

            var uri = new UriBuilder(_baseUri)
            {
                Path = path,
                Query = queryParams
            }.Uri;

            var method = "POST";
            var headers = new Dictionary<string, string>();
            var header = string.Concat("Bearer ", bearerToken);
            headers.Add("Authorization", header);

            byte[] content = null;
            var jsonBody = body.ToJson();
            content = Encoding.UTF8.GetBytes(jsonBody);
            await HttpAdapter.SendAsync(method, uri, headers, content, Timeout, cancellationToken);
        }
    }
}
